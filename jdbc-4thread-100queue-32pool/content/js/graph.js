/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 22350.0, "series": [{"data": [[0.0, 18.0], [0.1, 275.0], [0.2, 401.0], [0.3, 434.0], [0.4, 475.0], [0.5, 508.0], [0.6, 530.0], [0.7, 547.0], [0.8, 607.0], [0.9, 664.0], [1.0, 697.0], [1.1, 738.0], [1.2, 787.0], [1.3, 813.0], [1.4, 842.0], [1.5, 868.0], [1.6, 881.0], [1.7, 897.0], [1.8, 908.0], [1.9, 947.0], [2.0, 979.0], [2.1, 1002.0], [2.2, 1021.0], [2.3, 1038.0], [2.4, 1050.0], [2.5, 1062.0], [2.6, 1080.0], [2.7, 1091.0], [2.8, 1150.0], [2.9, 1180.0], [3.0, 1221.0], [3.1, 1250.0], [3.2, 1310.0], [3.3, 1430.0], [3.4, 1459.0], [3.5, 1476.0], [3.6, 1499.0], [3.7, 1519.0], [3.8, 1555.0], [3.9, 1571.0], [4.0, 1656.0], [4.1, 1709.0], [4.2, 1776.0], [4.3, 1828.0], [4.4, 1883.0], [4.5, 1904.0], [4.6, 1926.0], [4.7, 1952.0], [4.8, 2009.0], [4.9, 2069.0], [5.0, 2161.0], [5.1, 2305.0], [5.2, 2407.0], [5.3, 2592.0], [5.4, 2725.0], [5.5, 2769.0], [5.6, 2788.0], [5.7, 2837.0], [5.8, 2886.0], [5.9, 2899.0], [6.0, 2941.0], [6.1, 2974.0], [6.2, 2996.0], [6.3, 3025.0], [6.4, 3062.0], [6.5, 3100.0], [6.6, 3149.0], [6.7, 3208.0], [6.8, 3248.0], [6.9, 3293.0], [7.0, 3315.0], [7.1, 3331.0], [7.2, 3350.0], [7.3, 3371.0], [7.4, 3380.0], [7.5, 3393.0], [7.6, 3399.0], [7.7, 3408.0], [7.8, 3413.0], [7.9, 3421.0], [8.0, 3434.0], [8.1, 3439.0], [8.2, 3446.0], [8.3, 3456.0], [8.4, 3467.0], [8.5, 3474.0], [8.6, 3482.0], [8.7, 3486.0], [8.8, 3490.0], [8.9, 3495.0], [9.0, 3498.0], [9.1, 3501.0], [9.2, 3504.0], [9.3, 3505.0], [9.4, 3507.0], [9.5, 3511.0], [9.6, 3514.0], [9.7, 3520.0], [9.8, 3523.0], [9.9, 3529.0], [10.0, 3534.0], [10.1, 3543.0], [10.2, 3548.0], [10.3, 3555.0], [10.4, 3560.0], [10.5, 3567.0], [10.6, 3571.0], [10.7, 3572.0], [10.8, 3577.0], [10.9, 3581.0], [11.0, 3584.0], [11.1, 3588.0], [11.2, 3590.0], [11.3, 3595.0], [11.4, 3597.0], [11.5, 3601.0], [11.6, 3604.0], [11.7, 3605.0], [11.8, 3607.0], [11.9, 3610.0], [12.0, 3612.0], [12.1, 3617.0], [12.2, 3623.0], [12.3, 3629.0], [12.4, 3634.0], [12.5, 3640.0], [12.6, 3647.0], [12.7, 3651.0], [12.8, 3657.0], [12.9, 3663.0], [13.0, 3667.0], [13.1, 3670.0], [13.2, 3674.0], [13.3, 3679.0], [13.4, 3683.0], [13.5, 3687.0], [13.6, 3690.0], [13.7, 3694.0], [13.8, 3697.0], [13.9, 3701.0], [14.0, 3706.0], [14.1, 3712.0], [14.2, 3716.0], [14.3, 3718.0], [14.4, 3721.0], [14.5, 3726.0], [14.6, 3733.0], [14.7, 3746.0], [14.8, 3751.0], [14.9, 3760.0], [15.0, 3765.0], [15.1, 3770.0], [15.2, 3776.0], [15.3, 3780.0], [15.4, 3783.0], [15.5, 3787.0], [15.6, 3791.0], [15.7, 3794.0], [15.8, 3797.0], [15.9, 3801.0], [16.0, 3804.0], [16.1, 3807.0], [16.2, 3810.0], [16.3, 3813.0], [16.4, 3820.0], [16.5, 3825.0], [16.6, 3831.0], [16.7, 3836.0], [16.8, 3840.0], [16.9, 3843.0], [17.0, 3849.0], [17.1, 3855.0], [17.2, 3862.0], [17.3, 3866.0], [17.4, 3869.0], [17.5, 3874.0], [17.6, 3879.0], [17.7, 3884.0], [17.8, 3888.0], [17.9, 3892.0], [18.0, 3896.0], [18.1, 3900.0], [18.2, 3903.0], [18.3, 3909.0], [18.4, 3911.0], [18.5, 3915.0], [18.6, 3917.0], [18.7, 3924.0], [18.8, 3928.0], [18.9, 3936.0], [19.0, 3945.0], [19.1, 3952.0], [19.2, 3957.0], [19.3, 3962.0], [19.4, 3969.0], [19.5, 3974.0], [19.6, 3978.0], [19.7, 3981.0], [19.8, 3987.0], [19.9, 3990.0], [20.0, 3995.0], [20.1, 3999.0], [20.2, 4006.0], [20.3, 4009.0], [20.4, 4013.0], [20.5, 4020.0], [20.6, 4026.0], [20.7, 4031.0], [20.8, 4040.0], [20.9, 4048.0], [21.0, 4057.0], [21.1, 4065.0], [21.2, 4076.0], [21.3, 4080.0], [21.4, 4085.0], [21.5, 4091.0], [21.6, 4097.0], [21.7, 4103.0], [21.8, 4111.0], [21.9, 4114.0], [22.0, 4120.0], [22.1, 4128.0], [22.2, 4136.0], [22.3, 4151.0], [22.4, 4163.0], [22.5, 4170.0], [22.6, 4178.0], [22.7, 4183.0], [22.8, 4188.0], [22.9, 4194.0], [23.0, 4198.0], [23.1, 4204.0], [23.2, 4207.0], [23.3, 4218.0], [23.4, 4229.0], [23.5, 4236.0], [23.6, 4243.0], [23.7, 4255.0], [23.8, 4265.0], [23.9, 4273.0], [24.0, 4282.0], [24.1, 4292.0], [24.2, 4296.0], [24.3, 4304.0], [24.4, 4307.0], [24.5, 4311.0], [24.6, 4318.0], [24.7, 4320.0], [24.8, 4325.0], [24.9, 4332.0], [25.0, 4339.0], [25.1, 4348.0], [25.2, 4365.0], [25.3, 4375.0], [25.4, 4383.0], [25.5, 4389.0], [25.6, 4392.0], [25.7, 4396.0], [25.8, 4401.0], [25.9, 4405.0], [26.0, 4410.0], [26.1, 4415.0], [26.2, 4420.0], [26.3, 4426.0], [26.4, 4431.0], [26.5, 4436.0], [26.6, 4440.0], [26.7, 4458.0], [26.8, 4465.0], [26.9, 4475.0], [27.0, 4483.0], [27.1, 4489.0], [27.2, 4492.0], [27.3, 4495.0], [27.4, 4498.0], [27.5, 4503.0], [27.6, 4506.0], [27.7, 4508.0], [27.8, 4510.0], [27.9, 4514.0], [28.0, 4518.0], [28.1, 4523.0], [28.2, 4529.0], [28.3, 4534.0], [28.4, 4545.0], [28.5, 4560.0], [28.6, 4567.0], [28.7, 4572.0], [28.8, 4577.0], [28.9, 4584.0], [29.0, 4587.0], [29.1, 4591.0], [29.2, 4595.0], [29.3, 4597.0], [29.4, 4601.0], [29.5, 4603.0], [29.6, 4606.0], [29.7, 4609.0], [29.8, 4612.0], [29.9, 4613.0], [30.0, 4616.0], [30.1, 4621.0], [30.2, 4623.0], [30.3, 4626.0], [30.4, 4630.0], [30.5, 4634.0], [30.6, 4641.0], [30.7, 4649.0], [30.8, 4656.0], [30.9, 4663.0], [31.0, 4670.0], [31.1, 4676.0], [31.2, 4678.0], [31.3, 4681.0], [31.4, 4683.0], [31.5, 4685.0], [31.6, 4689.0], [31.7, 4690.0], [31.8, 4692.0], [31.9, 4693.0], [32.0, 4697.0], [32.1, 4698.0], [32.2, 4700.0], [32.3, 4702.0], [32.4, 4705.0], [32.5, 4706.0], [32.6, 4708.0], [32.7, 4712.0], [32.8, 4714.0], [32.9, 4716.0], [33.0, 4720.0], [33.1, 4721.0], [33.2, 4725.0], [33.3, 4730.0], [33.4, 4739.0], [33.5, 4743.0], [33.6, 4751.0], [33.7, 4758.0], [33.8, 4765.0], [33.9, 4771.0], [34.0, 4774.0], [34.1, 4779.0], [34.2, 4786.0], [34.3, 4789.0], [34.4, 4794.0], [34.5, 4797.0], [34.6, 4799.0], [34.7, 4802.0], [34.8, 4808.0], [34.9, 4813.0], [35.0, 4816.0], [35.1, 4821.0], [35.2, 4827.0], [35.3, 4836.0], [35.4, 4841.0], [35.5, 4851.0], [35.6, 4862.0], [35.7, 4870.0], [35.8, 4879.0], [35.9, 4885.0], [36.0, 4889.0], [36.1, 4898.0], [36.2, 4913.0], [36.3, 4940.0], [36.4, 4958.0], [36.5, 4975.0], [36.6, 4984.0], [36.7, 4998.0], [36.8, 5010.0], [36.9, 5039.0], [37.0, 5061.0], [37.1, 5082.0], [37.2, 5099.0], [37.3, 5114.0], [37.4, 5140.0], [37.5, 5171.0], [37.6, 5191.0], [37.7, 5207.0], [37.8, 5218.0], [37.9, 5264.0], [38.0, 5286.0], [38.1, 5302.0], [38.2, 5322.0], [38.3, 5341.0], [38.4, 5348.0], [38.5, 5366.0], [38.6, 5379.0], [38.7, 5384.0], [38.8, 5387.0], [38.9, 5392.0], [39.0, 5397.0], [39.1, 5405.0], [39.2, 5411.0], [39.3, 5415.0], [39.4, 5420.0], [39.5, 5430.0], [39.6, 5442.0], [39.7, 5461.0], [39.8, 5470.0], [39.9, 5479.0], [40.0, 5485.0], [40.1, 5490.0], [40.2, 5497.0], [40.3, 5504.0], [40.4, 5509.0], [40.5, 5514.0], [40.6, 5521.0], [40.7, 5530.0], [40.8, 5548.0], [40.9, 5564.0], [41.0, 5571.0], [41.1, 5579.0], [41.2, 5584.0], [41.3, 5594.0], [41.4, 5599.0], [41.5, 5605.0], [41.6, 5612.0], [41.7, 5621.0], [41.8, 5641.0], [41.9, 5657.0], [42.0, 5673.0], [42.1, 5685.0], [42.2, 5691.0], [42.3, 5695.0], [42.4, 5699.0], [42.5, 5708.0], [42.6, 5715.0], [42.7, 5724.0], [42.8, 5743.0], [42.9, 5759.0], [43.0, 5773.0], [43.1, 5783.0], [43.2, 5792.0], [43.3, 5797.0], [43.4, 5802.0], [43.5, 5806.0], [43.6, 5815.0], [43.7, 5824.0], [43.8, 5835.0], [43.9, 5848.0], [44.0, 5860.0], [44.1, 5873.0], [44.2, 5879.0], [44.3, 5886.0], [44.4, 5893.0], [44.5, 5898.0], [44.6, 5904.0], [44.7, 5911.0], [44.8, 5923.0], [44.9, 5938.0], [45.0, 5959.0], [45.1, 5980.0], [45.2, 5998.0], [45.3, 6015.0], [45.4, 6031.0], [45.5, 6071.0], [45.6, 6088.0], [45.7, 6149.0], [45.8, 6210.0], [45.9, 6286.0], [46.0, 6311.0], [46.1, 6330.0], [46.2, 6391.0], [46.3, 6410.0], [46.4, 6429.0], [46.5, 6466.0], [46.6, 6490.0], [46.7, 6497.0], [46.8, 6508.0], [46.9, 6543.0], [47.0, 6579.0], [47.1, 6586.0], [47.2, 6609.0], [47.3, 6639.0], [47.4, 6662.0], [47.5, 6682.0], [47.6, 6703.0], [47.7, 6717.0], [47.8, 6734.0], [47.9, 6758.0], [48.0, 6775.0], [48.1, 6790.0], [48.2, 6811.0], [48.3, 6840.0], [48.4, 6865.0], [48.5, 6891.0], [48.6, 6929.0], [48.7, 6946.0], [48.8, 6998.0], [48.9, 7024.0], [49.0, 7055.0], [49.1, 7084.0], [49.2, 7115.0], [49.3, 7128.0], [49.4, 7168.0], [49.5, 7189.0], [49.6, 7206.0], [49.7, 7231.0], [49.8, 7261.0], [49.9, 7285.0], [50.0, 7301.0], [50.1, 7313.0], [50.2, 7320.0], [50.3, 7328.0], [50.4, 7342.0], [50.5, 7365.0], [50.6, 7382.0], [50.7, 7397.0], [50.8, 7404.0], [50.9, 7412.0], [51.0, 7422.0], [51.1, 7447.0], [51.2, 7466.0], [51.3, 7487.0], [51.4, 7505.0], [51.5, 7524.0], [51.6, 7535.0], [51.7, 7548.0], [51.8, 7567.0], [51.9, 7583.0], [52.0, 7600.0], [52.1, 7618.0], [52.2, 7627.0], [52.3, 7641.0], [52.4, 7653.0], [52.5, 7666.0], [52.6, 7676.0], [52.7, 7683.0], [52.8, 7691.0], [52.9, 7696.0], [53.0, 7701.0], [53.1, 7706.0], [53.2, 7713.0], [53.3, 7718.0], [53.4, 7735.0], [53.5, 7742.0], [53.6, 7758.0], [53.7, 7778.0], [53.8, 7783.0], [53.9, 7791.0], [54.0, 7799.0], [54.1, 7804.0], [54.2, 7812.0], [54.3, 7820.0], [54.4, 7830.0], [54.5, 7845.0], [54.6, 7866.0], [54.7, 7876.0], [54.8, 7889.0], [54.9, 7894.0], [55.0, 7899.0], [55.1, 7903.0], [55.2, 7909.0], [55.3, 7915.0], [55.4, 7922.0], [55.5, 7927.0], [55.6, 7934.0], [55.7, 7949.0], [55.8, 7957.0], [55.9, 7966.0], [56.0, 7976.0], [56.1, 7986.0], [56.2, 7993.0], [56.3, 7998.0], [56.4, 8008.0], [56.5, 8015.0], [56.6, 8024.0], [56.7, 8056.0], [56.8, 8068.0], [56.9, 8075.0], [57.0, 8084.0], [57.1, 8089.0], [57.2, 8098.0], [57.3, 8106.0], [57.4, 8114.0], [57.5, 8119.0], [57.6, 8132.0], [57.7, 8150.0], [57.8, 8158.0], [57.9, 8172.0], [58.0, 8180.0], [58.1, 8187.0], [58.2, 8194.0], [58.3, 8200.0], [58.4, 8216.0], [58.5, 8234.0], [58.6, 8253.0], [58.7, 8263.0], [58.8, 8281.0], [58.9, 8298.0], [59.0, 8308.0], [59.1, 8331.0], [59.2, 8352.0], [59.3, 8373.0], [59.4, 8386.0], [59.5, 8399.0], [59.6, 8407.0], [59.7, 8419.0], [59.8, 8429.0], [59.9, 8442.0], [60.0, 8475.0], [60.1, 8494.0], [60.2, 8502.0], [60.3, 8506.0], [60.4, 8518.0], [60.5, 8538.0], [60.6, 8568.0], [60.7, 8587.0], [60.8, 8597.0], [60.9, 8610.0], [61.0, 8625.0], [61.1, 8639.0], [61.2, 8659.0], [61.3, 8681.0], [61.4, 8697.0], [61.5, 8703.0], [61.6, 8716.0], [61.7, 8723.0], [61.8, 8729.0], [61.9, 8754.0], [62.0, 8779.0], [62.1, 8798.0], [62.2, 8803.0], [62.3, 8819.0], [62.4, 8831.0], [62.5, 8844.0], [62.6, 8867.0], [62.7, 8891.0], [62.8, 8905.0], [62.9, 8914.0], [63.0, 8943.0], [63.1, 8969.0], [63.2, 8994.0], [63.3, 9007.0], [63.4, 9063.0], [63.5, 9089.0], [63.6, 9103.0], [63.7, 9120.0], [63.8, 9154.0], [63.9, 9179.0], [64.0, 9208.0], [64.1, 9220.0], [64.2, 9250.0], [64.3, 9272.0], [64.4, 9287.0], [64.5, 9305.0], [64.6, 9315.0], [64.7, 9356.0], [64.8, 9382.0], [64.9, 9405.0], [65.0, 9429.0], [65.1, 9455.0], [65.2, 9484.0], [65.3, 9497.0], [65.4, 9508.0], [65.5, 9532.0], [65.6, 9558.0], [65.7, 9578.0], [65.8, 9593.0], [65.9, 9614.0], [66.0, 9667.0], [66.1, 9712.0], [66.2, 9735.0], [66.3, 9768.0], [66.4, 9793.0], [66.5, 9804.0], [66.6, 9820.0], [66.7, 9863.0], [66.8, 9899.0], [66.9, 9946.0], [67.0, 9975.0], [67.1, 10012.0], [67.2, 10048.0], [67.3, 10096.0], [67.4, 10111.0], [67.5, 10123.0], [67.6, 10146.0], [67.7, 10187.0], [67.8, 10199.0], [67.9, 10212.0], [68.0, 10237.0], [68.1, 10263.0], [68.2, 10278.0], [68.3, 10294.0], [68.4, 10301.0], [68.5, 10311.0], [68.6, 10340.0], [68.7, 10365.0], [68.8, 10389.0], [68.9, 10403.0], [69.0, 10409.0], [69.1, 10422.0], [69.2, 10456.0], [69.3, 10476.0], [69.4, 10486.0], [69.5, 10495.0], [69.6, 10501.0], [69.7, 10511.0], [69.8, 10533.0], [69.9, 10564.0], [70.0, 10593.0], [70.1, 10606.0], [70.2, 10620.0], [70.3, 10652.0], [70.4, 10666.0], [70.5, 10682.0], [70.6, 10707.0], [70.7, 10721.0], [70.8, 10765.0], [70.9, 10782.0], [71.0, 10793.0], [71.1, 10800.0], [71.2, 10810.0], [71.3, 10816.0], [71.4, 10830.0], [71.5, 10864.0], [71.6, 10885.0], [71.7, 10894.0], [71.8, 10905.0], [71.9, 10917.0], [72.0, 10949.0], [72.1, 10964.0], [72.2, 10994.0], [72.3, 11007.0], [72.4, 11027.0], [72.5, 11049.0], [72.6, 11083.0], [72.7, 11088.0], [72.8, 11104.0], [72.9, 11134.0], [73.0, 11165.0], [73.1, 11181.0], [73.2, 11195.0], [73.3, 11225.0], [73.4, 11251.0], [73.5, 11277.0], [73.6, 11287.0], [73.7, 11306.0], [73.8, 11318.0], [73.9, 11346.0], [74.0, 11367.0], [74.1, 11385.0], [74.2, 11402.0], [74.3, 11417.0], [74.4, 11436.0], [74.5, 11477.0], [74.6, 11498.0], [74.7, 11518.0], [74.8, 11545.0], [74.9, 11581.0], [75.0, 11602.0], [75.1, 11613.0], [75.2, 11669.0], [75.3, 11689.0], [75.4, 11697.0], [75.5, 11714.0], [75.6, 11725.0], [75.7, 11746.0], [75.8, 11765.0], [75.9, 11786.0], [76.0, 11795.0], [76.1, 11804.0], [76.2, 11819.0], [76.3, 11826.0], [76.4, 11854.0], [76.5, 11879.0], [76.6, 11893.0], [76.7, 11897.0], [76.8, 11912.0], [76.9, 11923.0], [77.0, 11948.0], [77.1, 11967.0], [77.2, 11976.0], [77.3, 11996.0], [77.4, 12009.0], [77.5, 12021.0], [77.6, 12030.0], [77.7, 12064.0], [77.8, 12082.0], [77.9, 12094.0], [78.0, 12102.0], [78.1, 12114.0], [78.2, 12132.0], [78.3, 12165.0], [78.4, 12199.0], [78.5, 12206.0], [78.6, 12233.0], [78.7, 12282.0], [78.8, 12298.0], [78.9, 12321.0], [79.0, 12372.0], [79.1, 12399.0], [79.2, 12417.0], [79.3, 12446.0], [79.4, 12464.0], [79.5, 12496.0], [79.6, 12513.0], [79.7, 12563.0], [79.8, 12585.0], [79.9, 12612.0], [80.0, 12633.0], [80.1, 12665.0], [80.2, 12690.0], [80.3, 12709.0], [80.4, 12727.0], [80.5, 12768.0], [80.6, 12815.0], [80.7, 12858.0], [80.8, 12887.0], [80.9, 12904.0], [81.0, 12929.0], [81.1, 12976.0], [81.2, 12989.0], [81.3, 12999.0], [81.4, 13012.0], [81.5, 13028.0], [81.6, 13052.0], [81.7, 13076.0], [81.8, 13091.0], [81.9, 13104.0], [82.0, 13115.0], [82.1, 13127.0], [82.2, 13149.0], [82.3, 13170.0], [82.4, 13185.0], [82.5, 13190.0], [82.6, 13207.0], [82.7, 13228.0], [82.8, 13254.0], [82.9, 13272.0], [83.0, 13287.0], [83.1, 13299.0], [83.2, 13325.0], [83.3, 13342.0], [83.4, 13375.0], [83.5, 13393.0], [83.6, 13409.0], [83.7, 13422.0], [83.8, 13449.0], [83.9, 13473.0], [84.0, 13505.0], [84.1, 13520.0], [84.2, 13546.0], [84.3, 13564.0], [84.4, 13585.0], [84.5, 13601.0], [84.6, 13615.0], [84.7, 13630.0], [84.8, 13655.0], [84.9, 13672.0], [85.0, 13705.0], [85.1, 13719.0], [85.2, 13735.0], [85.3, 13764.0], [85.4, 13782.0], [85.5, 13796.0], [85.6, 13808.0], [85.7, 13818.0], [85.8, 13832.0], [85.9, 13856.0], [86.0, 13867.0], [86.1, 13879.0], [86.2, 13896.0], [86.3, 13937.0], [86.4, 13957.0], [86.5, 13984.0], [86.6, 13994.0], [86.7, 14012.0], [86.8, 14043.0], [86.9, 14069.0], [87.0, 14088.0], [87.1, 14104.0], [87.2, 14121.0], [87.3, 14149.0], [87.4, 14168.0], [87.5, 14191.0], [87.6, 14206.0], [87.7, 14220.0], [87.8, 14237.0], [87.9, 14260.0], [88.0, 14275.0], [88.1, 14284.0], [88.2, 14294.0], [88.3, 14306.0], [88.4, 14324.0], [88.5, 14352.0], [88.6, 14378.0], [88.7, 14401.0], [88.8, 14427.0], [88.9, 14444.0], [89.0, 14459.0], [89.1, 14487.0], [89.2, 14504.0], [89.3, 14524.0], [89.4, 14550.0], [89.5, 14570.0], [89.6, 14589.0], [89.7, 14604.0], [89.8, 14623.0], [89.9, 14635.0], [90.0, 14653.0], [90.1, 14681.0], [90.2, 14699.0], [90.3, 14719.0], [90.4, 14727.0], [90.5, 14742.0], [90.6, 14777.0], [90.7, 14795.0], [90.8, 14807.0], [90.9, 14822.0], [91.0, 14837.0], [91.1, 14859.0], [91.2, 14882.0], [91.3, 14896.0], [91.4, 14904.0], [91.5, 14916.0], [91.6, 14933.0], [91.7, 14961.0], [91.8, 14977.0], [91.9, 14998.0], [92.0, 15022.0], [92.1, 15039.0], [92.2, 15071.0], [92.3, 15105.0], [92.4, 15130.0], [92.5, 15159.0], [92.6, 15169.0], [92.7, 15198.0], [92.8, 15225.0], [92.9, 15248.0], [93.0, 15272.0], [93.1, 15314.0], [93.2, 15345.0], [93.3, 15403.0], [93.4, 15455.0], [93.5, 15493.0], [93.6, 15520.0], [93.7, 15573.0], [93.8, 15605.0], [93.9, 15638.0], [94.0, 15680.0], [94.1, 15698.0], [94.2, 15730.0], [94.3, 15761.0], [94.4, 15790.0], [94.5, 15870.0], [94.6, 15925.0], [94.7, 15974.0], [94.8, 16009.0], [94.9, 16030.0], [95.0, 16058.0], [95.1, 16091.0], [95.2, 16102.0], [95.3, 16164.0], [95.4, 16196.0], [95.5, 16216.0], [95.6, 16264.0], [95.7, 16315.0], [95.8, 16343.0], [95.9, 16391.0], [96.0, 16415.0], [96.1, 16447.0], [96.2, 16488.0], [96.3, 16515.0], [96.4, 16603.0], [96.5, 16669.0], [96.6, 16764.0], [96.7, 16831.0], [96.8, 16909.0], [96.9, 17010.0], [97.0, 17093.0], [97.1, 17183.0], [97.2, 17229.0], [97.3, 17294.0], [97.4, 17341.0], [97.5, 17423.0], [97.6, 17495.0], [97.7, 17532.0], [97.8, 17610.0], [97.9, 17675.0], [98.0, 17789.0], [98.1, 17883.0], [98.2, 18028.0], [98.3, 18149.0], [98.4, 18342.0], [98.5, 18553.0], [98.6, 18670.0], [98.7, 18786.0], [98.8, 18873.0], [98.9, 19010.0], [99.0, 19109.0], [99.1, 19196.0], [99.2, 19278.0], [99.3, 19404.0], [99.4, 19508.0], [99.5, 19595.0], [99.6, 19756.0], [99.7, 19899.0], [99.8, 20022.0], [99.9, 20263.0], [100.0, 22350.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 281.0, "series": [{"data": [[0.0, 3.0], [100.0, 4.0], [200.0, 5.0], [300.0, 8.0], [400.0, 27.0], [500.0, 32.0], [600.0, 21.0], [700.0, 21.0], [800.0, 51.0], [900.0, 38.0], [1000.0, 62.0], [1100.0, 23.0], [1200.0, 24.0], [1300.0, 4.0], [1400.0, 38.0], [1500.0, 33.0], [1600.0, 16.0], [1700.0, 17.0], [1800.0, 19.0], [1900.0, 31.0], [2000.0, 18.0], [2100.0, 8.0], [2300.0, 9.0], [2200.0, 7.0], [2400.0, 7.0], [2500.0, 7.0], [2600.0, 7.0], [2700.0, 21.0], [2800.0, 30.0], [2900.0, 30.0], [3000.0, 29.0], [3100.0, 19.0], [3200.0, 22.0], [3300.0, 70.0], [3400.0, 145.0], [3500.0, 243.0], [3600.0, 234.0], [3700.0, 204.0], [3800.0, 222.0], [3900.0, 202.0], [4000.0, 151.0], [4100.0, 144.0], [4200.0, 119.0], [4300.0, 151.0], [4600.0, 281.0], [4400.0, 167.0], [4500.0, 192.0], [4800.0, 150.0], [4700.0, 247.0], [4900.0, 58.0], [5000.0, 49.0], [5100.0, 47.0], [5300.0, 96.0], [5200.0, 43.0], [5600.0, 98.0], [5500.0, 119.0], [5400.0, 118.0], [5800.0, 114.0], [5700.0, 97.0], [5900.0, 70.0], [6000.0, 43.0], [6100.0, 13.0], [6200.0, 17.0], [6300.0, 28.0], [6500.0, 45.0], [6400.0, 50.0], [6600.0, 42.0], [6700.0, 57.0], [6800.0, 39.0], [6900.0, 25.0], [7000.0, 34.0], [7100.0, 41.0], [7400.0, 64.0], [7300.0, 75.0], [7200.0, 43.0], [7600.0, 95.0], [7500.0, 62.0], [7700.0, 111.0], [7900.0, 131.0], [7800.0, 95.0], [8000.0, 89.0], [8100.0, 109.0], [8200.0, 62.0], [8300.0, 59.0], [8500.0, 65.0], [8400.0, 67.0], [8600.0, 62.0], [8700.0, 69.0], [8800.0, 63.0], [8900.0, 49.0], [9100.0, 42.0], [9200.0, 51.0], [9000.0, 30.0], [9300.0, 38.0], [9400.0, 45.0], [9600.0, 22.0], [9700.0, 41.0], [9500.0, 52.0], [10000.0, 28.0], [9900.0, 24.0], [9800.0, 34.0], [10100.0, 48.0], [10200.0, 55.0], [10300.0, 50.0], [10400.0, 70.0], [10500.0, 50.0], [10600.0, 50.0], [10700.0, 52.0], [10900.0, 48.0], [10800.0, 71.0], [11100.0, 45.0], [11200.0, 45.0], [11000.0, 50.0], [11300.0, 52.0], [11500.0, 37.0], [11700.0, 62.0], [11600.0, 45.0], [11400.0, 41.0], [11800.0, 68.0], [12000.0, 63.0], [11900.0, 61.0], [12100.0, 44.0], [12200.0, 41.0], [12500.0, 33.0], [12400.0, 41.0], [12600.0, 40.0], [12300.0, 29.0], [12700.0, 33.0], [13100.0, 69.0], [12800.0, 30.0], [13300.0, 45.0], [13200.0, 55.0], [13000.0, 55.0], [12900.0, 44.0], [13400.0, 41.0], [13500.0, 52.0], [13800.0, 66.0], [13700.0, 56.0], [13600.0, 50.0], [14100.0, 51.0], [13900.0, 42.0], [14200.0, 67.0], [14300.0, 46.0], [14000.0, 42.0], [14400.0, 51.0], [14500.0, 47.0], [14600.0, 54.0], [14700.0, 52.0], [14800.0, 61.0], [14900.0, 58.0], [15000.0, 37.0], [15100.0, 43.0], [15200.0, 36.0], [15300.0, 22.0], [15400.0, 23.0], [15500.0, 26.0], [15700.0, 34.0], [15600.0, 32.0], [15800.0, 8.0], [16000.0, 36.0], [15900.0, 26.0], [16200.0, 25.0], [16100.0, 28.0], [16300.0, 27.0], [17200.0, 17.0], [16600.0, 15.0], [17000.0, 13.0], [16400.0, 32.0], [16800.0, 10.0], [17400.0, 16.0], [17600.0, 13.0], [18400.0, 5.0], [18200.0, 3.0], [18000.0, 11.0], [17800.0, 9.0], [18800.0, 8.0], [19000.0, 11.0], [19200.0, 11.0], [18600.0, 8.0], [19400.0, 9.0], [20000.0, 8.0], [19800.0, 10.0], [20200.0, 4.0], [19600.0, 7.0], [20400.0, 1.0], [20800.0, 1.0], [21400.0, 1.0], [17100.0, 13.0], [17300.0, 14.0], [16500.0, 13.0], [16700.0, 13.0], [16900.0, 11.0], [17500.0, 16.0], [17900.0, 6.0], [18100.0, 5.0], [17700.0, 11.0], [18300.0, 8.0], [18500.0, 5.0], [18700.0, 11.0], [18900.0, 8.0], [19100.0, 12.0], [19300.0, 7.0], [19700.0, 3.0], [19500.0, 12.0], [20100.0, 1.0], [19900.0, 7.0], [20300.0, 1.0], [20700.0, 3.0], [21700.0, 2.0], [22300.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4987.0, "series": [{"data": [[0.0, 15.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 143.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4987.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4855.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 808.0591725465055, "minX": 1.61787228E12, "maxY": 997.4460680127528, "series": [{"data": [[1.61787228E12, 997.4460680127528], [1.61787234E12, 808.0591725465055]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787234E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.0, "maxY": 17220.0, "series": [{"data": [[3.0, 549.0], [5.0, 547.0], [6.0, 697.0], [7.0, 729.0], [8.0, 818.0], [9.0, 993.0], [10.0, 1054.0], [11.0, 836.0], [12.0, 1054.0], [13.0, 781.0], [15.0, 529.5], [16.0, 804.0], [17.0, 1150.0], [18.0, 1044.5], [19.0, 821.0], [20.0, 35.0], [21.0, 1038.0], [23.0, 866.0], [24.0, 632.0], [25.0, 432.0], [26.0, 808.0], [27.0, 556.0], [28.0, 99.0], [29.0, 168.0], [30.0, 603.0], [31.0, 1145.0], [32.0, 622.0], [35.0, 713.0], [34.0, 605.5], [37.0, 948.0], [36.0, 336.0], [39.0, 738.0], [38.0, 412.0], [41.0, 767.0], [42.0, 1114.0], [45.0, 331.0], [44.0, 616.0], [47.0, 780.0], [46.0, 1008.0], [49.0, 528.0], [48.0, 433.0], [51.0, 979.0], [50.0, 915.5], [53.0, 1045.0], [52.0, 1002.0], [55.0, 895.0], [57.0, 930.5], [59.0, 1083.5], [61.0, 1091.0], [60.0, 1033.0], [63.0, 1030.0], [62.0, 1048.0], [66.0, 1091.0], [65.0, 1125.0], [70.0, 1101.0], [69.0, 1086.5], [68.0, 1064.5], [75.0, 1164.0], [74.0, 1179.0], [73.0, 1175.0], [72.0, 1080.0], [79.0, 1021.0], [78.0, 1068.0], [77.0, 1167.0], [76.0, 1050.0], [82.0, 1332.6666666666667], [87.0, 1416.0], [86.0, 1415.0], [85.0, 1429.0], [84.0, 1295.0], [91.0, 1166.0], [89.0, 1431.0], [88.0, 1231.0], [95.0, 1476.0], [94.0, 1180.0], [93.0, 1325.5], [92.0, 1355.75], [98.0, 1351.0], [97.0, 1487.5], [96.0, 1342.5], [103.0, 1505.5], [102.0, 1483.0], [101.0, 1557.0], [100.0, 1478.5], [106.0, 1445.0], [105.0, 1090.0], [104.0, 1551.0], [111.0, 1461.0], [110.0, 1226.0], [109.0, 1472.0], [108.0, 1447.0], [115.0, 1455.5], [114.0, 1487.0], [113.0, 1555.0], [112.0, 1192.0], [119.0, 1470.0], [118.0, 1286.0], [117.0, 1378.5], [116.0, 1495.5], [123.0, 1537.5], [121.0, 1430.6666666666667], [120.0, 1339.0], [127.0, 1409.0], [126.0, 1450.3333333333333], [125.0, 1276.0], [124.0, 1447.0], [135.0, 1434.8], [134.0, 1517.5], [133.0, 1507.0], [132.0, 1221.0], [131.0, 1527.0], [130.0, 1308.0], [129.0, 1555.0], [128.0, 1260.0], [143.0, 1513.0], [142.0, 1348.0], [141.0, 1574.0], [140.0, 1436.0], [139.0, 1407.3333333333333], [136.0, 1514.0], [151.0, 1627.75], [150.0, 1764.0], [149.0, 1694.0], [148.0, 1652.0], [147.0, 1783.0], [146.0, 1587.0], [145.0, 1571.0], [144.0, 1674.0], [159.0, 1667.5], [157.0, 1263.0], [156.0, 1795.0], [155.0, 1776.0], [154.0, 1822.3333333333333], [152.0, 1248.0], [167.0, 1634.6666666666667], [165.0, 1588.0], [163.0, 1789.3333333333333], [162.0, 1691.6666666666667], [160.0, 2055.0], [174.0, 1961.0], [173.0, 1907.0], [172.0, 1750.0], [171.0, 1899.0], [170.0, 1729.0], [169.0, 1995.0], [168.0, 1576.5], [183.0, 1877.0], [181.0, 1822.0], [180.0, 1985.5], [179.0, 1926.0], [177.0, 1800.0], [176.0, 1812.75], [191.0, 1947.0], [190.0, 1939.0], [189.0, 1939.5], [188.0, 1849.0], [187.0, 1899.0], [186.0, 2094.0], [185.0, 1969.6666666666667], [184.0, 1883.0], [199.0, 2055.3333333333335], [198.0, 2053.5], [197.0, 1926.0], [196.0, 2127.0], [195.0, 1980.25], [194.0, 1903.0], [193.0, 2022.0], [192.0, 2085.0], [207.0, 2265.375], [206.0, 2527.0], [205.0, 2216.0], [204.0, 2328.75], [203.0, 1889.0], [202.0, 2021.6666666666667], [201.0, 2161.0], [200.0, 2061.3333333333335], [215.0, 2632.0], [214.0, 2905.0], [213.0, 2437.0], [212.0, 2559.0], [211.0, 2524.0], [209.0, 3011.0], [208.0, 2398.0], [223.0, 3053.0], [222.0, 2055.0], [221.0, 2819.5], [219.0, 2969.0], [218.0, 2456.6666666666665], [217.0, 2537.0], [216.0, 2425.0], [231.0, 3010.5], [230.0, 3260.0], [229.0, 2118.0], [228.0, 3137.0], [227.0, 3015.0], [226.0, 2099.0], [225.0, 2948.0], [224.0, 2676.0], [239.0, 2918.0], [238.0, 2814.5], [237.0, 2634.5], [236.0, 2738.5], [235.0, 2930.25], [234.0, 2685.3333333333335], [233.0, 2471.6666666666665], [247.0, 3139.0], [246.0, 3037.0], [244.0, 2858.5], [242.0, 3307.0], [241.0, 2925.0], [240.0, 3363.0], [255.0, 3365.6666666666665], [254.0, 3532.0], [253.0, 2974.0], [252.0, 3408.5], [251.0, 3092.0], [250.0, 3161.0], [249.0, 2963.0], [248.0, 3016.0], [270.0, 2898.0], [271.0, 3521.6666666666665], [269.0, 3559.0], [268.0, 3427.0], [267.0, 2774.0], [266.0, 2987.0], [265.0, 3592.0], [264.0, 3572.0], [263.0, 2901.3333333333335], [257.0, 3017.0], [256.0, 3534.0], [259.0, 2988.0], [258.0, 3166.5], [262.0, 3500.0], [261.0, 3504.0], [260.0, 3186.0], [286.0, 3477.5], [287.0, 3645.0], [285.0, 3531.285714285714], [284.0, 3399.0], [283.0, 3695.0], [282.0, 3269.0], [281.0, 3888.0], [280.0, 3143.0], [279.0, 3590.0], [272.0, 3628.0], [274.0, 3604.0], [273.0, 3052.0], [278.0, 3535.0], [277.0, 3886.0], [276.0, 3174.5], [302.0, 3856.0], [303.0, 3429.0], [301.0, 4173.0], [300.0, 3502.0], [299.0, 3423.0], [298.0, 3885.0], [296.0, 3534.3333333333335], [295.0, 3797.3333333333335], [289.0, 3527.5], [288.0, 3634.5], [291.0, 3493.0], [290.0, 3516.25], [294.0, 3470.0], [293.0, 3497.0], [292.0, 3950.0], [318.0, 4015.1666666666665], [319.0, 4388.142857142857], [317.0, 3843.0], [316.0, 3866.0], [315.0, 3698.5], [314.0, 4320.5], [313.0, 3987.0], [312.0, 3611.0], [311.0, 3756.5], [305.0, 3498.0], [304.0, 3488.0], [307.0, 3233.0], [306.0, 4103.5], [310.0, 3625.0], [309.0, 4006.0], [308.0, 4249.0], [333.0, 4640.5], [334.0, 5074.0], [332.0, 5057.0], [322.0, 4150.0], [320.0, 3331.0], [331.0, 5386.0], [330.0, 4396.5], [329.0, 3899.0], [327.0, 3624.6666666666665], [326.0, 4247.666666666667], [325.0, 4427.833333333333], [344.0, 3371.0], [349.0, 4400.25], [339.0, 3470.0], [338.0, 3484.0], [337.0, 3495.0], [336.0, 4554.5], [347.0, 4685.333333333333], [346.0, 5209.0], [345.0, 5186.0], [343.0, 5008.75], [342.0, 4563.333333333333], [341.0, 5338.5], [340.0, 5204.0], [365.0, 5242.0], [367.0, 5218.0], [363.0, 4753.8], [366.0, 5607.25], [364.0, 5666.0], [355.0, 5105.0], [354.0, 3475.0], [353.0, 5365.0], [352.0, 4863.125], [361.0, 4865.666666666667], [360.0, 5629.0], [359.0, 5311.0], [358.0, 5612.0], [357.0, 3608.0], [356.0, 4603.8], [383.0, 5404.0], [378.0, 4691.5], [380.0, 4022.6666666666665], [371.0, 5709.0], [370.0, 5663.0], [369.0, 5621.0], [368.0, 5514.0], [382.0, 5781.333333333333], [381.0, 5626.0], [379.0, 4593.5], [377.0, 4751.0], [376.0, 5179.666666666667], [375.0, 3882.0], [374.0, 5792.0], [373.0, 4080.0], [372.0, 5318.75], [399.0, 5832.5], [395.0, 2732.25], [398.0, 6043.0], [397.0, 5815.0], [396.0, 5711.0], [387.0, 5880.0], [386.0, 5682.8], [385.0, 5436.5], [384.0, 5518.333333333333], [394.0, 5832.333333333333], [393.0, 5586.5], [392.0, 5479.0], [391.0, 5827.0], [390.0, 5731.75], [389.0, 4968.0], [388.0, 5444.0], [413.0, 5877.0], [414.0, 292.0], [412.0, 685.0], [403.0, 4957.833333333333], [402.0, 5861.0], [401.0, 5798.0], [400.0, 5902.625], [411.0, 6406.0], [410.0, 4046.3333333333335], [409.0, 6113.0], [408.0, 6264.0], [407.0, 5914.0], [406.0, 194.0], [405.0, 6091.0], [404.0, 182.0], [430.0, 3587.0], [431.0, 5680.0], [429.0, 481.0], [427.0, 2251.0], [426.0, 4989.666666666667], [425.0, 4276.0], [422.0, 6062.5], [416.0, 5022.666666666666], [419.0, 5832.0], [418.0, 5841.0], [417.0, 680.0], [446.0, 813.0], [445.0, 5251.333333333333], [435.0, 7866.0], [434.0, 3060.5], [433.0, 2632.0], [432.0, 6014.799999999999], [443.0, 6064.0], [442.0, 916.0], [441.0, 6309.0], [440.0, 3828.0], [439.0, 5950.0], [438.0, 5440.0], [437.0, 2786.857142857143], [436.0, 6798.0], [462.0, 5601.0], [463.0, 5710.0], [461.0, 823.0], [460.0, 5775.0], [459.0, 5795.0], [458.0, 4057.4], [456.0, 4379.5], [455.0, 5152.666666666666], [449.0, 5231.0], [448.0, 6295.4], [451.0, 8008.0], [450.0, 5287.0], [454.0, 3133.5], [452.0, 5302.0], [478.0, 2512.0], [479.0, 6313.0], [477.0, 717.0], [476.0, 685.0], [475.0, 678.0], [474.0, 685.3333333333334], [473.0, 697.0], [472.0, 675.5], [471.0, 3487.0], [464.0, 4112.2], [469.0, 694.5], [468.0, 5916.625000000001], [494.0, 435.0], [495.0, 6204.0], [493.0, 491.3333333333333], [492.0, 505.0], [491.0, 452.6666666666667], [490.0, 545.6666666666666], [489.0, 576.0], [488.0, 529.6250000000001], [487.0, 547.0], [481.0, 584.0], [480.0, 4682.666666666667], [483.0, 571.0], [482.0, 607.0], [486.0, 534.0], [485.0, 544.0], [484.0, 581.0], [510.0, 7717.0], [508.0, 6192.333333333333], [511.0, 7276.333333333333], [509.0, 7385.666666666667], [507.0, 6203.857142857142], [506.0, 7055.0], [505.0, 5114.333333333333], [504.0, 4881.714285714285], [503.0, 408.0], [497.0, 550.0], [496.0, 6998.0], [499.0, 5359.0], [498.0, 547.0], [502.0, 1733.0], [501.0, 3791.0], [500.0, 549.0], [537.0, 967.0], [541.0, 11203.0], [542.0, 3207.0], [529.0, 981.0], [528.0, 4420.5], [531.0, 7810.4], [530.0, 6390.857142857143], [533.0, 981.0], [532.0, 3832.6000000000004], [540.0, 1017.0], [539.0, 1080.0], [538.0, 1018.0], [536.0, 977.0], [519.0, 9123.0], [518.0, 7747.0], [517.0, 7826.666666666667], [516.0, 7500.5], [515.0, 7622.2], [514.0, 7682.125], [513.0, 7573.777777777778], [512.0, 7225.785714285715], [527.0, 4532.0], [526.0, 9776.0], [525.0, 4470.0], [524.0, 7888.5], [523.0, 7861.833333333333], [522.0, 7906.0], [521.0, 6241.333333333333], [520.0, 8263.25], [535.0, 1154.0], [534.0, 1040.75], [572.0, 909.0], [547.0, 1730.5], [546.0, 998.0], [545.0, 9533.0], [544.0, 5592.0], [549.0, 911.0], [548.0, 987.3333333333334], [551.0, 3204.0], [550.0, 912.5], [559.0, 4426.0], [558.0, 894.3333333333334], [557.0, 2211.0], [556.0, 878.0], [555.0, 862.0], [554.0, 858.0], [553.0, 955.0], [552.0, 2962.6], [575.0, 1459.0], [561.0, 874.0], [560.0, 856.0], [563.0, 877.0], [562.0, 836.5], [565.0, 944.5], [564.0, 869.3333333333334], [567.0, 994.0], [566.0, 5948.0], [574.0, 956.5], [573.0, 5587.4], [571.0, 837.0], [570.0, 842.0], [569.0, 944.0], [568.0, 956.0], [605.0, 11165.0], [591.0, 4306.75], [590.0, 4727.5], [589.0, 5959.0], [588.0, 6170.666666666667], [587.0, 1323.5], [586.0, 1330.0], [585.0, 5089.4], [584.0, 4497.333333333333], [607.0, 8591.714285714286], [592.0, 8515.75], [594.0, 8114.0], [593.0, 7763.5], [604.0, 9090.0], [603.0, 9143.6], [602.0, 9224.833333333332], [583.0, 849.0], [582.0, 5891.5], [581.0, 9365.5], [580.0, 4739.5], [579.0, 754.0], [578.0, 4697.714285714285], [599.0, 9024.25], [598.0, 7853.5], [596.0, 7547.0], [595.0, 8276.0], [636.0, 6881.5], [612.0, 9267.714285714286], [623.0, 6904.5], [609.0, 10519.666666666666], [608.0, 9704.499999999998], [611.0, 10100.0], [610.0, 10100.0], [621.0, 10764.4], [620.0, 8704.5], [619.0, 6950.0], [618.0, 10397.0], [617.0, 11507.75], [616.0, 12838.0], [639.0, 2886.4], [625.0, 10860.57142857143], [629.0, 10233.185185185184], [628.0, 8890.6], [631.0, 6634.666666666667], [630.0, 5719.75], [638.0, 2939.0], [637.0, 2780.0], [635.0, 9307.333333333334], [634.0, 2914.0], [633.0, 2788.0], [632.0, 2824.0], [615.0, 10765.942857142856], [614.0, 10352.5], [613.0, 10415.8], [668.0, 12777.5], [644.0, 2890.0], [651.0, 6802.8], [650.0, 10976.857142857141], [649.0, 12870.0], [648.0, 9769.7], [652.0, 2822.0], [655.0, 3551.0], [641.0, 2832.0], [640.0, 7221.0], [643.0, 5936.0], [642.0, 2915.0], [654.0, 5917.2], [671.0, 7845.5], [657.0, 7124.142857142857], [656.0, 6208.0], [659.0, 3307.0], [658.0, 6581.333333333334], [661.0, 7627.25], [660.0, 8492.5], [663.0, 3315.0], [662.0, 6262.666666666666], [670.0, 6197.666666666667], [669.0, 6157.666666666667], [667.0, 7693.5], [666.0, 6418.833333333334], [665.0, 3346.5], [664.0, 12104.0], [647.0, 10806.125], [646.0, 9141.099999999999], [645.0, 3608.0], [701.0, 13423.0], [673.0, 3022.0], [677.0, 3340.5], [675.0, 6411.111111111111], [674.0, 9521.333333333334], [679.0, 10592.699999999999], [678.0, 5641.0], [697.0, 13788.238095238095], [696.0, 12521.0], [686.0, 7990.733333333333], [685.0, 11757.2], [684.0, 12390.625], [683.0, 12644.25], [681.0, 12392.0], [680.0, 10909.857142857143], [687.0, 7592.5], [672.0, 3463.0], [690.0, 9656.333333333334], [689.0, 10948.0], [688.0, 12295.0], [693.0, 12097.0], [692.0, 10563.25], [695.0, 7859.0], [694.0, 9796.583333333334], [703.0, 13049.166666666666], [702.0, 14247.0], [700.0, 12113.6], [699.0, 13178.5], [729.0, 4253.666666666667], [723.0, 4213.5], [732.0, 8479.333333333334], [733.0, 11696.333333333334], [722.0, 4231.571428571428], [730.0, 4367.666666666667], [728.0, 7504.0], [711.0, 4218.0], [710.0, 17220.0], [709.0, 11706.133333333335], [708.0, 15350.8], [707.0, 15011.09090909091], [706.0, 13461.25], [705.0, 14720.666666666666], [704.0, 13175.0], [718.0, 3998.0], [717.0, 4083.5], [716.0, 4465.0], [715.0, 4265.0], [714.0, 4130.5], [713.0, 4177.0], [712.0, 4952.0], [727.0, 4253.8], [726.0, 4182.333333333333], [724.0, 6083.857142857143], [761.0, 4174.666666666667], [766.0, 3534.0], [767.0, 4005.714285714286], [752.0, 3858.75], [755.0, 3770.0], [753.0, 4544.583333333334], [765.0, 4126.333333333333], [763.0, 3962.0], [762.0, 3887.8], [751.0, 3844.0], [737.0, 9566.0], [736.0, 9438.75], [739.0, 12085.5], [738.0, 11421.666666666666], [741.0, 3948.2], [740.0, 9137.0], [743.0, 16663.0], [742.0, 3866.0], [750.0, 10269.0], [749.0, 3891.0], [748.0, 5421.125], [747.0, 3939.0], [746.0, 12946.333333333336], [745.0, 4076.0], [744.0, 3880.0], [759.0, 15012.666666666666], [758.0, 9728.272727272726], [757.0, 3748.0], [756.0, 9711.615384615385], [792.0, 6150.8], [796.0, 10747.724137931034], [798.0, 12304.222222222223], [784.0, 12450.25], [787.0, 4886.0], [785.0, 9707.0], [795.0, 3957.0], [794.0, 4033.0], [793.0, 9362.75], [783.0, 13092.68], [768.0, 4307.6], [770.0, 4292.5], [769.0, 4314.0], [773.0, 5135.363636363637], [772.0, 4322.0], [775.0, 14559.90909090909], [774.0, 5612.142857142857], [782.0, 13687.2], [780.0, 15345.0], [779.0, 13577.285714285714], [778.0, 14715.833333333334], [777.0, 14900.0], [776.0, 15511.5], [791.0, 9472.0], [790.0, 6751.0], [789.0, 3947.2999999999993], [788.0, 3981.0], [826.0, 4334.666666666667], [830.0, 8524.25], [831.0, 3887.0], [817.0, 11772.843750000004], [816.0, 6380.0], [820.0, 7738.666666666667], [819.0, 9042.94117647059], [829.0, 6468.705882352942], [828.0, 7486.1], [827.0, 5704.333333333333], [824.0, 4383.0], [807.0, 6703.166666666667], [806.0, 4000.4285714285716], [805.0, 4165.0], [804.0, 3789.5], [803.0, 5161.1875], [802.0, 3819.0], [801.0, 8881.633333333333], [815.0, 5003.307692307692], [814.0, 4402.5], [813.0, 4229.111111111112], [812.0, 4331.0], [811.0, 4089.6], [810.0, 4180.700000000001], [809.0, 3921.0], [808.0, 7599.333333333334], [823.0, 4352.857142857143], [821.0, 8014.857142857142], [860.0, 12180.0], [863.0, 8327.2], [848.0, 11141.166666666668], [850.0, 4761.705882352942], [849.0, 4761.25], [852.0, 5492.0], [851.0, 5020.0], [862.0, 12748.185185185186], [861.0, 15169.0], [859.0, 15211.75], [858.0, 14505.4], [857.0, 14654.666666666666], [856.0, 14509.0], [847.0, 10700.863636363634], [835.0, 11781.678571428572], [832.0, 3778.0], [837.0, 13111.400000000001], [836.0, 9352.5], [839.0, 9456.25], [838.0, 12836.666666666666], [846.0, 10056.142857142857], [845.0, 11172.0], [844.0, 13485.0], [843.0, 14096.25], [842.0, 13019.57142857143], [840.0, 12903.0], [854.0, 13187.090909090908], [853.0, 6565.5], [890.0, 9167.285714285716], [894.0, 11720.125], [895.0, 10882.6], [881.0, 7009.666666666667], [883.0, 10367.666666666666], [882.0, 6838.0], [885.0, 11512.071428571431], [884.0, 8073.714285714286], [893.0, 7378.833333333333], [892.0, 9410.888888888889], [891.0, 8379.352941176468], [888.0, 7353.0], [871.0, 11743.133333333333], [870.0, 13789.0], [869.0, 8148.666666666667], [868.0, 6615.0], [867.0, 8317.2], [866.0, 6651.0], [865.0, 6694.0], [879.0, 7080.666666666667], [878.0, 9683.55], [877.0, 8879.833333333332], [876.0, 9622.333333333334], [875.0, 7500.315789473683], [874.0, 6487.0], [873.0, 9644.333333333334], [872.0, 6861.2307692307695], [887.0, 10395.0], [886.0, 7503.0], [924.0, 4175.0], [927.0, 4358.272727272728], [912.0, 6451.857142857142], [914.0, 8252.0], [913.0, 6375.0], [916.0, 9801.0], [915.0, 7029.0], [926.0, 5714.75], [925.0, 8255.5], [923.0, 5510.461538461538], [922.0, 4159.333333333333], [921.0, 8595.333333333334], [920.0, 4338.0], [911.0, 5487.333333333333], [897.0, 9377.888888888887], [896.0, 11762.125], [899.0, 7800.055555555556], [898.0, 7690.25], [901.0, 8746.846153846152], [900.0, 7039.285714285715], [903.0, 11047.31868131868], [902.0, 8984.133333333333], [910.0, 8643.048780487807], [909.0, 12088.0], [908.0, 8281.423076923076], [907.0, 9384.5], [906.0, 10722.0], [905.0, 9457.5], [904.0, 8415.107142857145], [919.0, 5976.349999999999], [917.0, 5751.1], [956.0, 3725.3333333333335], [959.0, 7030.333333333334], [945.0, 4982.21052631579], [944.0, 4889.0], [947.0, 3518.0], [946.0, 9508.0], [949.0, 6758.25], [948.0, 7189.571428571428], [958.0, 3890.0], [957.0, 3788.166666666667], [955.0, 9404.0], [954.0, 5119.75], [953.0, 3863.0], [952.0, 7774.0], [943.0, 3675.0], [929.0, 3913.25], [928.0, 5294.916666666666], [931.0, 6734.714285714285], [930.0, 6468.5], [933.0, 7286.6], [932.0, 9709.666666666666], [935.0, 9643.0], [934.0, 6972.75], [942.0, 6871.5], [940.0, 4997.9], [939.0, 3933.6666666666665], [938.0, 3867.0], [937.0, 6205.875], [936.0, 3815.5], [951.0, 8005.75], [950.0, 4941.6], [988.0, 4268.0], [991.0, 4856.999999999999], [976.0, 5827.566037735848], [978.0, 5258.7692307692305], [977.0, 5417.19298245614], [980.0, 3557.8888888888887], [979.0, 3746.0], [990.0, 6020.0], [989.0, 3571.75], [987.0, 5942.5], [986.0, 3575.3333333333335], [985.0, 5459.166666666667], [984.0, 4866.2941176470595], [975.0, 5713.743589743588], [963.0, 9244.0], [962.0, 5920.799999999999], [965.0, 7325.266666666666], [964.0, 7280.8], [967.0, 6828.5], [966.0, 8068.904761904762], [974.0, 8218.733333333335], [973.0, 8504.4], [972.0, 7969.457711442786], [971.0, 8795.0], [970.0, 9104.42857142857], [969.0, 7634.916666666666], [968.0, 9084.5], [983.0, 4401.236842105263], [981.0, 3490.8], [996.0, 4171.26923076923], [1000.0, 9198.522035180638], [999.0, 3841.1724137931037], [998.0, 3724.9999999999995], [997.0, 6219.0], [995.0, 4403.318181818181], [994.0, 4268.555555555557], [993.0, 6977.45803357314], [992.0, 5979.727272727274], [1.0, 434.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[879.3443000000002, 8049.698700000005]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7716.2, "minX": 1.61787228E12, "maxY": 27688.233333333334, "series": [{"data": [[1.61787228E12, 17024.166666666668], [1.61787234E12, 27688.233333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61787228E12, 7716.2], [1.61787234E12, 12783.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787234E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7047.849903784474, "minX": 1.61787228E12, "maxY": 9709.509829968129, "series": [{"data": [[1.61787228E12, 9709.509829968129], [1.61787234E12, 7047.849903784474]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787234E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7036.904586273254, "minX": 1.61787228E12, "maxY": 9689.081562167892, "series": [{"data": [[1.61787228E12, 9689.081562167892], [1.61787234E12, 7036.904586273254]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787234E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.14977549711353466, "minX": 1.61787228E12, "maxY": 2.3347502656748254, "series": [{"data": [[1.61787228E12, 2.3347502656748254], [1.61787234E12, 0.14977549711353466]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787234E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.61787228E12, "maxY": 22350.0, "series": [{"data": [[1.61787228E12, 22350.0], [1.61787234E12, 17233.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61787228E12, 18210.0], [1.61787234E12, 14243.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61787228E12, 20066.34], [1.61787234E12, 15928.4]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61787228E12, 19241.7], [1.61787234E12, 14839.449999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61787228E12, 1444.0], [1.61787234E12, 18.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61787228E12, 14413.0], [1.61787234E12, 10088.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787234E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 477.0, "minX": 5.0, "maxY": 19567.0, "series": [{"data": [[5.0, 7171.0], [6.0, 1663.5], [7.0, 2510.0], [8.0, 3023.5], [27.0, 10742.0], [45.0, 11244.5], [51.0, 15268.0], [53.0, 17349.0], [52.0, 12326.0], [54.0, 9680.5], [56.0, 16797.5], [59.0, 6014.0], [58.0, 14309.0], [61.0, 8205.0], [66.0, 9928.0], [65.0, 12645.5], [70.0, 12525.0], [73.0, 10974.0], [77.0, 14587.0], [80.0, 14239.0], [82.0, 15368.0], [86.0, 14818.0], [84.0, 11764.0], [90.0, 13894.0], [92.0, 8862.0], [94.0, 14721.0], [99.0, 12436.0], [100.0, 8723.0], [103.0, 12640.5], [104.0, 19567.0], [105.0, 16358.0], [106.0, 14524.0], [115.0, 15784.0], [113.0, 15147.0], [112.0, 15503.0], [117.0, 17504.0], [116.0, 12433.0], [120.0, 15274.5], [123.0, 11297.5], [121.0, 10513.0], [124.0, 14009.0], [127.0, 13028.5], [126.0, 13373.0], [132.0, 12871.0], [128.0, 12606.0], [135.0, 9500.0], [136.0, 12563.5], [140.0, 9603.0], [145.0, 14314.0], [147.0, 14792.0], [149.0, 13376.5], [151.0, 14286.0], [148.0, 6204.0], [157.0, 11909.0], [155.0, 8804.0], [152.0, 9710.0], [160.0, 16207.0], [163.0, 11755.0], [173.0, 10218.0], [174.0, 5786.0], [183.0, 12728.0], [177.0, 13444.0], [181.0, 1942.0], [191.0, 12006.5], [212.0, 3558.5], [220.0, 8601.0], [235.0, 8217.5], [241.0, 10366.0], [245.0, 7604.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[22.0, 3703.0], [27.0, 5712.0], [45.0, 4544.5], [53.0, 7785.5], [52.0, 2939.0], [54.0, 7231.5], [56.0, 7356.5], [59.0, 3987.5], [58.0, 5040.0], [66.0, 4403.0], [65.0, 7211.0], [70.0, 9503.0], [73.0, 6584.0], [77.0, 5160.0], [80.0, 6857.0], [82.0, 3814.0], [84.0, 7232.5], [90.0, 8247.0], [92.0, 3690.5], [94.0, 3985.0], [99.0, 3336.5], [100.0, 6684.0], [103.0, 7711.0], [104.0, 7735.0], [106.0, 5428.5], [105.0, 3838.5], [115.0, 4692.0], [113.0, 3640.0], [112.0, 5495.0], [117.0, 5889.0], [116.0, 4489.0], [120.0, 5689.5], [123.0, 4501.0], [121.0, 4816.0], [124.0, 5524.0], [127.0, 4731.0], [126.0, 7253.0], [132.0, 4682.0], [128.0, 4692.5], [135.0, 3576.0], [136.0, 5147.5], [140.0, 3597.0], [145.0, 4285.5], [147.0, 6461.0], [149.0, 3947.0], [151.0, 4079.0], [148.0, 547.0], [155.0, 3822.0], [152.0, 4178.0], [160.0, 5498.0], [163.0, 3615.0], [173.0, 3911.0], [174.0, 477.0], [183.0, 4210.0], [177.0, 4107.5], [191.0, 5265.0], [220.0, 3941.0], [235.0, 3904.0], [241.0, 2780.0], [245.0, 934.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 245.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 477.0, "minX": 5.0, "maxY": 19503.0, "series": [{"data": [[5.0, 7163.0], [6.0, 1540.5], [7.0, 2330.0], [8.0, 3021.5], [27.0, 10741.5], [45.0, 11208.0], [51.0, 15240.0], [53.0, 17348.0], [52.0, 12247.0], [54.0, 9655.5], [56.0, 16772.0], [59.0, 6013.0], [58.0, 14302.5], [61.0, 8186.0], [66.0, 9900.0], [65.0, 12643.0], [70.0, 12520.0], [73.0, 10921.0], [77.0, 14587.0], [80.0, 14239.0], [82.0, 15368.0], [86.0, 14797.5], [84.0, 11682.0], [90.0, 13887.0], [92.0, 8862.0], [94.0, 14721.0], [99.0, 12430.0], [100.0, 8696.0], [103.0, 12637.5], [104.0, 19503.0], [105.0, 16306.0], [106.0, 14522.5], [115.0, 15778.0], [113.0, 15139.5], [112.0, 15487.0], [117.0, 17504.0], [116.0, 12433.0], [120.0, 15274.5], [123.0, 11296.5], [121.0, 10488.5], [124.0, 13994.0], [127.0, 12993.5], [126.0, 13296.0], [132.0, 12858.0], [128.0, 12586.5], [135.0, 9499.0], [136.0, 12543.0], [140.0, 9593.0], [145.0, 14293.5], [147.0, 14762.0], [149.0, 13356.0], [151.0, 14277.0], [148.0, 6194.0], [157.0, 11908.0], [155.0, 8800.0], [152.0, 9710.0], [160.0, 16207.0], [163.0, 11750.0], [173.0, 10199.5], [174.0, 5785.0], [183.0, 12723.0], [177.0, 13431.0], [181.0, 1942.0], [191.0, 11999.0], [212.0, 3550.5], [220.0, 8601.0], [235.0, 8201.5], [241.0, 10357.5], [245.0, 7604.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[22.0, 3590.5], [27.0, 5606.0], [45.0, 4544.5], [53.0, 7770.5], [52.0, 2911.0], [54.0, 7167.5], [56.0, 7353.5], [59.0, 3955.0], [58.0, 5040.0], [66.0, 4403.0], [65.0, 7184.0], [70.0, 9480.0], [73.0, 6577.0], [77.0, 5140.0], [80.0, 6811.0], [82.0, 3803.0], [84.0, 7215.0], [90.0, 8217.0], [92.0, 3688.0], [94.0, 3962.0], [99.0, 3321.0], [100.0, 6660.0], [103.0, 7702.0], [104.0, 7733.0], [106.0, 5417.5], [105.0, 3822.0], [115.0, 4686.0], [113.0, 3619.0], [112.0, 5491.0], [117.0, 5882.0], [116.0, 4479.0], [120.0, 5685.0], [123.0, 4493.0], [121.0, 4802.0], [124.0, 5517.0], [127.0, 4710.0], [126.0, 7242.0], [132.0, 4656.0], [128.0, 4686.5], [135.0, 3566.0], [136.0, 5147.0], [140.0, 3587.0], [145.0, 4285.5], [147.0, 6452.0], [149.0, 3947.0], [151.0, 4079.0], [148.0, 546.0], [155.0, 3814.0], [152.0, 4153.0], [160.0, 5474.0], [163.0, 3607.0], [173.0, 3907.0], [174.0, 477.0], [183.0, 4206.5], [177.0, 4107.0], [191.0, 5261.0], [220.0, 3941.0], [235.0, 3881.0], [241.0, 2773.0], [245.0, 922.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 245.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 79.4, "minX": 1.61787228E12, "maxY": 87.26666666666667, "series": [{"data": [[1.61787228E12, 79.4], [1.61787234E12, 87.26666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787234E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 27.883333333333333, "minX": 1.61787228E12, "maxY": 57.86666666666667, "series": [{"data": [[1.61787228E12, 27.883333333333333], [1.61787234E12, 57.86666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61787228E12, 34.85], [1.61787234E12, 46.06666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787234E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 27.883333333333333, "minX": 1.61787228E12, "maxY": 57.86666666666667, "series": [{"data": [[1.61787228E12, 27.883333333333333], [1.61787234E12, 57.86666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.61787228E12, 34.85], [1.61787234E12, 46.06666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787234E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 27.883333333333333, "minX": 1.61787228E12, "maxY": 57.86666666666667, "series": [{"data": [[1.61787228E12, 27.883333333333333], [1.61787234E12, 57.86666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61787228E12, 34.85], [1.61787234E12, 46.06666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787234E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

