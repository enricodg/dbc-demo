/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1676.0, "minX": 0.0, "maxY": 9681.0, "series": [{"data": [[0.0, 1676.0], [0.1, 2034.0], [0.2, 2187.0], [0.3, 2364.0], [0.4, 2566.0], [0.5, 3017.0], [0.6, 3078.0], [0.7, 3165.0], [0.8, 3210.0], [0.9, 3249.0], [1.0, 3298.0], [1.1, 3340.0], [1.2, 3359.0], [1.3, 3376.0], [1.4, 3390.0], [1.5, 3403.0], [1.6, 3427.0], [1.7, 3445.0], [1.8, 3465.0], [1.9, 3488.0], [2.0, 3507.0], [2.1, 3535.0], [2.2, 3550.0], [2.3, 3582.0], [2.4, 3607.0], [2.5, 3633.0], [2.6, 3669.0], [2.7, 3682.0], [2.8, 3688.0], [2.9, 3696.0], [3.0, 3700.0], [3.1, 3704.0], [3.2, 3708.0], [3.3, 3711.0], [3.4, 3715.0], [3.5, 3717.0], [3.6, 3721.0], [3.7, 3724.0], [3.8, 3730.0], [3.9, 3735.0], [4.0, 3737.0], [4.1, 3743.0], [4.2, 3750.0], [4.3, 3754.0], [4.4, 3759.0], [4.5, 3762.0], [4.6, 3766.0], [4.7, 3768.0], [4.8, 3772.0], [4.9, 3775.0], [5.0, 3777.0], [5.1, 3780.0], [5.2, 3784.0], [5.3, 3786.0], [5.4, 3789.0], [5.5, 3792.0], [5.6, 3796.0], [5.7, 3800.0], [5.8, 3801.0], [5.9, 3804.0], [6.0, 3809.0], [6.1, 3815.0], [6.2, 3823.0], [6.3, 3826.0], [6.4, 3831.0], [6.5, 3834.0], [6.6, 3837.0], [6.7, 3840.0], [6.8, 3843.0], [6.9, 3850.0], [7.0, 3856.0], [7.1, 3859.0], [7.2, 3863.0], [7.3, 3868.0], [7.4, 3873.0], [7.5, 3874.0], [7.6, 3881.0], [7.7, 3886.0], [7.8, 3891.0], [7.9, 3894.0], [8.0, 3898.0], [8.1, 3901.0], [8.2, 3904.0], [8.3, 3905.0], [8.4, 3908.0], [8.5, 3911.0], [8.6, 3913.0], [8.7, 3916.0], [8.8, 3919.0], [8.9, 3922.0], [9.0, 3928.0], [9.1, 3930.0], [9.2, 3933.0], [9.3, 3936.0], [9.4, 3939.0], [9.5, 3942.0], [9.6, 3943.0], [9.7, 3945.0], [9.8, 3947.0], [9.9, 3950.0], [10.0, 3952.0], [10.1, 3955.0], [10.2, 3958.0], [10.3, 3961.0], [10.4, 3965.0], [10.5, 3966.0], [10.6, 3969.0], [10.7, 3971.0], [10.8, 3974.0], [10.9, 3975.0], [11.0, 3977.0], [11.1, 3979.0], [11.2, 3981.0], [11.3, 3984.0], [11.4, 3985.0], [11.5, 3986.0], [11.6, 3988.0], [11.7, 3989.0], [11.8, 3991.0], [11.9, 3992.0], [12.0, 3995.0], [12.1, 3997.0], [12.2, 3998.0], [12.3, 4001.0], [12.4, 4002.0], [12.5, 4003.0], [12.6, 4004.0], [12.7, 4006.0], [12.8, 4007.0], [12.9, 4008.0], [13.0, 4010.0], [13.1, 4011.0], [13.2, 4012.0], [13.3, 4014.0], [13.4, 4015.0], [13.5, 4018.0], [13.6, 4020.0], [13.7, 4022.0], [13.8, 4024.0], [13.9, 4025.0], [14.0, 4026.0], [14.1, 4030.0], [14.2, 4031.0], [14.3, 4032.0], [14.4, 4034.0], [14.5, 4036.0], [14.6, 4038.0], [14.7, 4040.0], [14.8, 4042.0], [14.9, 4043.0], [15.0, 4045.0], [15.1, 4046.0], [15.2, 4048.0], [15.3, 4050.0], [15.4, 4051.0], [15.5, 4052.0], [15.6, 4054.0], [15.7, 4057.0], [15.8, 4058.0], [15.9, 4059.0], [16.0, 4061.0], [16.1, 4063.0], [16.2, 4065.0], [16.3, 4068.0], [16.4, 4069.0], [16.5, 4072.0], [16.6, 4073.0], [16.7, 4075.0], [16.8, 4076.0], [16.9, 4079.0], [17.0, 4080.0], [17.1, 4082.0], [17.2, 4083.0], [17.3, 4085.0], [17.4, 4088.0], [17.5, 4090.0], [17.6, 4092.0], [17.7, 4094.0], [17.8, 4096.0], [17.9, 4097.0], [18.0, 4099.0], [18.1, 4100.0], [18.2, 4102.0], [18.3, 4103.0], [18.4, 4106.0], [18.5, 4107.0], [18.6, 4109.0], [18.7, 4112.0], [18.8, 4113.0], [18.9, 4114.0], [19.0, 4116.0], [19.1, 4117.0], [19.2, 4120.0], [19.3, 4121.0], [19.4, 4122.0], [19.5, 4124.0], [19.6, 4125.0], [19.7, 4127.0], [19.8, 4129.0], [19.9, 4132.0], [20.0, 4134.0], [20.1, 4136.0], [20.2, 4138.0], [20.3, 4141.0], [20.4, 4143.0], [20.5, 4144.0], [20.6, 4146.0], [20.7, 4147.0], [20.8, 4149.0], [20.9, 4151.0], [21.0, 4152.0], [21.1, 4153.0], [21.2, 4155.0], [21.3, 4156.0], [21.4, 4156.0], [21.5, 4158.0], [21.6, 4159.0], [21.7, 4160.0], [21.8, 4161.0], [21.9, 4164.0], [22.0, 4165.0], [22.1, 4166.0], [22.2, 4167.0], [22.3, 4169.0], [22.4, 4171.0], [22.5, 4173.0], [22.6, 4174.0], [22.7, 4176.0], [22.8, 4177.0], [22.9, 4179.0], [23.0, 4180.0], [23.1, 4182.0], [23.2, 4183.0], [23.3, 4185.0], [23.4, 4186.0], [23.5, 4187.0], [23.6, 4189.0], [23.7, 4190.0], [23.8, 4191.0], [23.9, 4192.0], [24.0, 4193.0], [24.1, 4195.0], [24.2, 4196.0], [24.3, 4197.0], [24.4, 4199.0], [24.5, 4200.0], [24.6, 4202.0], [24.7, 4203.0], [24.8, 4204.0], [24.9, 4205.0], [25.0, 4206.0], [25.1, 4208.0], [25.2, 4210.0], [25.3, 4212.0], [25.4, 4213.0], [25.5, 4215.0], [25.6, 4217.0], [25.7, 4219.0], [25.8, 4221.0], [25.9, 4223.0], [26.0, 4225.0], [26.1, 4227.0], [26.2, 4229.0], [26.3, 4230.0], [26.4, 4232.0], [26.5, 4235.0], [26.6, 4236.0], [26.7, 4237.0], [26.8, 4238.0], [26.9, 4240.0], [27.0, 4243.0], [27.1, 4244.0], [27.2, 4246.0], [27.3, 4247.0], [27.4, 4248.0], [27.5, 4250.0], [27.6, 4252.0], [27.7, 4254.0], [27.8, 4256.0], [27.9, 4258.0], [28.0, 4259.0], [28.1, 4260.0], [28.2, 4261.0], [28.3, 4262.0], [28.4, 4263.0], [28.5, 4266.0], [28.6, 4267.0], [28.7, 4270.0], [28.8, 4271.0], [28.9, 4274.0], [29.0, 4276.0], [29.1, 4277.0], [29.2, 4278.0], [29.3, 4279.0], [29.4, 4282.0], [29.5, 4283.0], [29.6, 4285.0], [29.7, 4287.0], [29.8, 4288.0], [29.9, 4289.0], [30.0, 4291.0], [30.1, 4292.0], [30.2, 4294.0], [30.3, 4296.0], [30.4, 4297.0], [30.5, 4300.0], [30.6, 4302.0], [30.7, 4303.0], [30.8, 4304.0], [30.9, 4306.0], [31.0, 4309.0], [31.1, 4311.0], [31.2, 4313.0], [31.3, 4314.0], [31.4, 4315.0], [31.5, 4318.0], [31.6, 4319.0], [31.7, 4321.0], [31.8, 4322.0], [31.9, 4324.0], [32.0, 4326.0], [32.1, 4328.0], [32.2, 4330.0], [32.3, 4332.0], [32.4, 4333.0], [32.5, 4335.0], [32.6, 4337.0], [32.7, 4338.0], [32.8, 4340.0], [32.9, 4343.0], [33.0, 4344.0], [33.1, 4346.0], [33.2, 4347.0], [33.3, 4349.0], [33.4, 4353.0], [33.5, 4355.0], [33.6, 4356.0], [33.7, 4359.0], [33.8, 4360.0], [33.9, 4363.0], [34.0, 4365.0], [34.1, 4367.0], [34.2, 4370.0], [34.3, 4371.0], [34.4, 4374.0], [34.5, 4375.0], [34.6, 4378.0], [34.7, 4380.0], [34.8, 4382.0], [34.9, 4384.0], [35.0, 4385.0], [35.1, 4387.0], [35.2, 4389.0], [35.3, 4392.0], [35.4, 4395.0], [35.5, 4397.0], [35.6, 4400.0], [35.7, 4402.0], [35.8, 4405.0], [35.9, 4407.0], [36.0, 4410.0], [36.1, 4413.0], [36.2, 4417.0], [36.3, 4420.0], [36.4, 4422.0], [36.5, 4423.0], [36.6, 4428.0], [36.7, 4432.0], [36.8, 4434.0], [36.9, 4437.0], [37.0, 4440.0], [37.1, 4444.0], [37.2, 4446.0], [37.3, 4449.0], [37.4, 4450.0], [37.5, 4453.0], [37.6, 4454.0], [37.7, 4455.0], [37.8, 4458.0], [37.9, 4460.0], [38.0, 4463.0], [38.1, 4467.0], [38.2, 4469.0], [38.3, 4474.0], [38.4, 4476.0], [38.5, 4479.0], [38.6, 4480.0], [38.7, 4483.0], [38.8, 4487.0], [38.9, 4490.0], [39.0, 4492.0], [39.1, 4494.0], [39.2, 4497.0], [39.3, 4500.0], [39.4, 4502.0], [39.5, 4504.0], [39.6, 4506.0], [39.7, 4507.0], [39.8, 4510.0], [39.9, 4512.0], [40.0, 4515.0], [40.1, 4516.0], [40.2, 4519.0], [40.3, 4521.0], [40.4, 4524.0], [40.5, 4528.0], [40.6, 4530.0], [40.7, 4531.0], [40.8, 4536.0], [40.9, 4538.0], [41.0, 4541.0], [41.1, 4543.0], [41.2, 4546.0], [41.3, 4550.0], [41.4, 4552.0], [41.5, 4556.0], [41.6, 4559.0], [41.7, 4562.0], [41.8, 4565.0], [41.9, 4569.0], [42.0, 4573.0], [42.1, 4576.0], [42.2, 4580.0], [42.3, 4582.0], [42.4, 4583.0], [42.5, 4586.0], [42.6, 4588.0], [42.7, 4591.0], [42.8, 4594.0], [42.9, 4595.0], [43.0, 4597.0], [43.1, 4599.0], [43.2, 4601.0], [43.3, 4603.0], [43.4, 4606.0], [43.5, 4608.0], [43.6, 4611.0], [43.7, 4614.0], [43.8, 4616.0], [43.9, 4619.0], [44.0, 4620.0], [44.1, 4623.0], [44.2, 4627.0], [44.3, 4630.0], [44.4, 4634.0], [44.5, 4637.0], [44.6, 4639.0], [44.7, 4642.0], [44.8, 4644.0], [44.9, 4647.0], [45.0, 4650.0], [45.1, 4653.0], [45.2, 4656.0], [45.3, 4660.0], [45.4, 4662.0], [45.5, 4665.0], [45.6, 4666.0], [45.7, 4670.0], [45.8, 4671.0], [45.9, 4673.0], [46.0, 4676.0], [46.1, 4680.0], [46.2, 4682.0], [46.3, 4684.0], [46.4, 4685.0], [46.5, 4688.0], [46.6, 4690.0], [46.7, 4692.0], [46.8, 4694.0], [46.9, 4695.0], [47.0, 4697.0], [47.1, 4701.0], [47.2, 4704.0], [47.3, 4707.0], [47.4, 4709.0], [47.5, 4712.0], [47.6, 4715.0], [47.7, 4718.0], [47.8, 4721.0], [47.9, 4724.0], [48.0, 4729.0], [48.1, 4732.0], [48.2, 4734.0], [48.3, 4737.0], [48.4, 4742.0], [48.5, 4749.0], [48.6, 4754.0], [48.7, 4761.0], [48.8, 4764.0], [48.9, 4769.0], [49.0, 4775.0], [49.1, 4782.0], [49.2, 4787.0], [49.3, 4793.0], [49.4, 4800.0], [49.5, 4803.0], [49.6, 4807.0], [49.7, 4812.0], [49.8, 4818.0], [49.9, 4822.0], [50.0, 4828.0], [50.1, 4835.0], [50.2, 4839.0], [50.3, 4843.0], [50.4, 4844.0], [50.5, 4849.0], [50.6, 4853.0], [50.7, 4859.0], [50.8, 4864.0], [50.9, 4870.0], [51.0, 4873.0], [51.1, 4877.0], [51.2, 4880.0], [51.3, 4885.0], [51.4, 4886.0], [51.5, 4887.0], [51.6, 4890.0], [51.7, 4891.0], [51.8, 4896.0], [51.9, 4900.0], [52.0, 4902.0], [52.1, 4906.0], [52.2, 4909.0], [52.3, 4914.0], [52.4, 4919.0], [52.5, 4922.0], [52.6, 4926.0], [52.7, 4931.0], [52.8, 4940.0], [52.9, 4945.0], [53.0, 4951.0], [53.1, 4957.0], [53.2, 4961.0], [53.3, 4966.0], [53.4, 4975.0], [53.5, 4982.0], [53.6, 4990.0], [53.7, 4998.0], [53.8, 5001.0], [53.9, 5006.0], [54.0, 5014.0], [54.1, 5018.0], [54.2, 5025.0], [54.3, 5032.0], [54.4, 5035.0], [54.5, 5042.0], [54.6, 5051.0], [54.7, 5058.0], [54.8, 5064.0], [54.9, 5075.0], [55.0, 5084.0], [55.1, 5088.0], [55.2, 5098.0], [55.3, 5108.0], [55.4, 5117.0], [55.5, 5127.0], [55.6, 5146.0], [55.7, 5162.0], [55.8, 5170.0], [55.9, 5185.0], [56.0, 5204.0], [56.1, 5224.0], [56.2, 5256.0], [56.3, 5276.0], [56.4, 5293.0], [56.5, 5308.0], [56.6, 5324.0], [56.7, 5335.0], [56.8, 5350.0], [56.9, 5396.0], [57.0, 5422.0], [57.1, 5441.0], [57.2, 5456.0], [57.3, 5482.0], [57.4, 5496.0], [57.5, 5515.0], [57.6, 5521.0], [57.7, 5529.0], [57.8, 5535.0], [57.9, 5546.0], [58.0, 5563.0], [58.1, 5572.0], [58.2, 5583.0], [58.3, 5588.0], [58.4, 5596.0], [58.5, 5604.0], [58.6, 5612.0], [58.7, 5618.0], [58.8, 5624.0], [58.9, 5634.0], [59.0, 5644.0], [59.1, 5652.0], [59.2, 5661.0], [59.3, 5674.0], [59.4, 5683.0], [59.5, 5692.0], [59.6, 5699.0], [59.7, 5705.0], [59.8, 5711.0], [59.9, 5718.0], [60.0, 5721.0], [60.1, 5728.0], [60.2, 5737.0], [60.3, 5745.0], [60.4, 5749.0], [60.5, 5758.0], [60.6, 5767.0], [60.7, 5773.0], [60.8, 5778.0], [60.9, 5784.0], [61.0, 5790.0], [61.1, 5793.0], [61.2, 5797.0], [61.3, 5802.0], [61.4, 5806.0], [61.5, 5810.0], [61.6, 5813.0], [61.7, 5818.0], [61.8, 5822.0], [61.9, 5826.0], [62.0, 5830.0], [62.1, 5834.0], [62.2, 5840.0], [62.3, 5845.0], [62.4, 5852.0], [62.5, 5856.0], [62.6, 5862.0], [62.7, 5865.0], [62.8, 5870.0], [62.9, 5872.0], [63.0, 5873.0], [63.1, 5875.0], [63.2, 5878.0], [63.3, 5880.0], [63.4, 5883.0], [63.5, 5888.0], [63.6, 5889.0], [63.7, 5892.0], [63.8, 5894.0], [63.9, 5898.0], [64.0, 5901.0], [64.1, 5906.0], [64.2, 5910.0], [64.3, 5919.0], [64.4, 5926.0], [64.5, 5931.0], [64.6, 5938.0], [64.7, 5945.0], [64.8, 5952.0], [64.9, 5956.0], [65.0, 5959.0], [65.1, 5969.0], [65.2, 5976.0], [65.3, 5980.0], [65.4, 5984.0], [65.5, 5988.0], [65.6, 5991.0], [65.7, 5992.0], [65.8, 5997.0], [65.9, 6001.0], [66.0, 6003.0], [66.1, 6008.0], [66.2, 6011.0], [66.3, 6016.0], [66.4, 6020.0], [66.5, 6027.0], [66.6, 6032.0], [66.7, 6037.0], [66.8, 6040.0], [66.9, 6044.0], [67.0, 6048.0], [67.1, 6053.0], [67.2, 6058.0], [67.3, 6065.0], [67.4, 6071.0], [67.5, 6074.0], [67.6, 6076.0], [67.7, 6078.0], [67.8, 6081.0], [67.9, 6084.0], [68.0, 6087.0], [68.1, 6091.0], [68.2, 6094.0], [68.3, 6096.0], [68.4, 6099.0], [68.5, 6101.0], [68.6, 6107.0], [68.7, 6110.0], [68.8, 6112.0], [68.9, 6115.0], [69.0, 6117.0], [69.1, 6120.0], [69.2, 6123.0], [69.3, 6128.0], [69.4, 6132.0], [69.5, 6136.0], [69.6, 6139.0], [69.7, 6143.0], [69.8, 6147.0], [69.9, 6151.0], [70.0, 6155.0], [70.1, 6158.0], [70.2, 6162.0], [70.3, 6166.0], [70.4, 6168.0], [70.5, 6169.0], [70.6, 6172.0], [70.7, 6177.0], [70.8, 6181.0], [70.9, 6185.0], [71.0, 6187.0], [71.1, 6189.0], [71.2, 6191.0], [71.3, 6192.0], [71.4, 6195.0], [71.5, 6197.0], [71.6, 6200.0], [71.7, 6203.0], [71.8, 6205.0], [71.9, 6207.0], [72.0, 6210.0], [72.1, 6213.0], [72.2, 6215.0], [72.3, 6217.0], [72.4, 6219.0], [72.5, 6222.0], [72.6, 6228.0], [72.7, 6229.0], [72.8, 6234.0], [72.9, 6237.0], [73.0, 6241.0], [73.1, 6245.0], [73.2, 6248.0], [73.3, 6251.0], [73.4, 6256.0], [73.5, 6260.0], [73.6, 6262.0], [73.7, 6266.0], [73.8, 6269.0], [73.9, 6273.0], [74.0, 6275.0], [74.1, 6277.0], [74.2, 6279.0], [74.3, 6282.0], [74.4, 6283.0], [74.5, 6286.0], [74.6, 6289.0], [74.7, 6291.0], [74.8, 6293.0], [74.9, 6295.0], [75.0, 6298.0], [75.1, 6300.0], [75.2, 6302.0], [75.3, 6303.0], [75.4, 6306.0], [75.5, 6308.0], [75.6, 6309.0], [75.7, 6313.0], [75.8, 6314.0], [75.9, 6318.0], [76.0, 6322.0], [76.1, 6324.0], [76.2, 6328.0], [76.3, 6332.0], [76.4, 6337.0], [76.5, 6340.0], [76.6, 6344.0], [76.7, 6348.0], [76.8, 6353.0], [76.9, 6357.0], [77.0, 6360.0], [77.1, 6364.0], [77.2, 6367.0], [77.3, 6370.0], [77.4, 6372.0], [77.5, 6377.0], [77.6, 6379.0], [77.7, 6382.0], [77.8, 6383.0], [77.9, 6385.0], [78.0, 6389.0], [78.1, 6391.0], [78.2, 6394.0], [78.3, 6396.0], [78.4, 6399.0], [78.5, 6401.0], [78.6, 6405.0], [78.7, 6407.0], [78.8, 6409.0], [78.9, 6414.0], [79.0, 6417.0], [79.1, 6421.0], [79.2, 6427.0], [79.3, 6432.0], [79.4, 6436.0], [79.5, 6439.0], [79.6, 6444.0], [79.7, 6447.0], [79.8, 6453.0], [79.9, 6459.0], [80.0, 6462.0], [80.1, 6465.0], [80.2, 6472.0], [80.3, 6476.0], [80.4, 6480.0], [80.5, 6484.0], [80.6, 6488.0], [80.7, 6491.0], [80.8, 6494.0], [80.9, 6495.0], [81.0, 6497.0], [81.1, 6501.0], [81.2, 6504.0], [81.3, 6507.0], [81.4, 6509.0], [81.5, 6513.0], [81.6, 6516.0], [81.7, 6518.0], [81.8, 6522.0], [81.9, 6527.0], [82.0, 6531.0], [82.1, 6537.0], [82.2, 6545.0], [82.3, 6549.0], [82.4, 6556.0], [82.5, 6561.0], [82.6, 6564.0], [82.7, 6568.0], [82.8, 6573.0], [82.9, 6577.0], [83.0, 6580.0], [83.1, 6582.0], [83.2, 6586.0], [83.3, 6588.0], [83.4, 6590.0], [83.5, 6593.0], [83.6, 6595.0], [83.7, 6597.0], [83.8, 6598.0], [83.9, 6602.0], [84.0, 6605.0], [84.1, 6607.0], [84.2, 6608.0], [84.3, 6612.0], [84.4, 6615.0], [84.5, 6617.0], [84.6, 6620.0], [84.7, 6624.0], [84.8, 6630.0], [84.9, 6636.0], [85.0, 6643.0], [85.1, 6647.0], [85.2, 6651.0], [85.3, 6655.0], [85.4, 6658.0], [85.5, 6663.0], [85.6, 6666.0], [85.7, 6671.0], [85.8, 6675.0], [85.9, 6678.0], [86.0, 6683.0], [86.1, 6688.0], [86.2, 6691.0], [86.3, 6694.0], [86.4, 6698.0], [86.5, 6701.0], [86.6, 6706.0], [86.7, 6713.0], [86.8, 6719.0], [86.9, 6729.0], [87.0, 6738.0], [87.1, 6747.0], [87.2, 6755.0], [87.3, 6761.0], [87.4, 6767.0], [87.5, 6777.0], [87.6, 6783.0], [87.7, 6797.0], [87.8, 6804.0], [87.9, 6810.0], [88.0, 6816.0], [88.1, 6821.0], [88.2, 6829.0], [88.3, 6842.0], [88.4, 6861.0], [88.5, 6871.0], [88.6, 6879.0], [88.7, 6890.0], [88.8, 6900.0], [88.9, 6907.0], [89.0, 6917.0], [89.1, 6926.0], [89.2, 6935.0], [89.3, 6948.0], [89.4, 6962.0], [89.5, 6973.0], [89.6, 6980.0], [89.7, 6994.0], [89.8, 7000.0], [89.9, 7014.0], [90.0, 7021.0], [90.1, 7033.0], [90.2, 7045.0], [90.3, 7057.0], [90.4, 7066.0], [90.5, 7079.0], [90.6, 7097.0], [90.7, 7113.0], [90.8, 7128.0], [90.9, 7145.0], [91.0, 7158.0], [91.1, 7176.0], [91.2, 7197.0], [91.3, 7215.0], [91.4, 7251.0], [91.5, 7276.0], [91.6, 7299.0], [91.7, 7313.0], [91.8, 7336.0], [91.9, 7350.0], [92.0, 7375.0], [92.1, 7387.0], [92.2, 7401.0], [92.3, 7417.0], [92.4, 7441.0], [92.5, 7466.0], [92.6, 7481.0], [92.7, 7496.0], [92.8, 7505.0], [92.9, 7518.0], [93.0, 7534.0], [93.1, 7549.0], [93.2, 7564.0], [93.3, 7574.0], [93.4, 7587.0], [93.5, 7597.0], [93.6, 7609.0], [93.7, 7621.0], [93.8, 7634.0], [93.9, 7658.0], [94.0, 7667.0], [94.1, 7677.0], [94.2, 7695.0], [94.3, 7705.0], [94.4, 7717.0], [94.5, 7730.0], [94.6, 7743.0], [94.7, 7752.0], [94.8, 7765.0], [94.9, 7773.0], [95.0, 7786.0], [95.1, 7797.0], [95.2, 7812.0], [95.3, 7822.0], [95.4, 7839.0], [95.5, 7854.0], [95.6, 7876.0], [95.7, 7888.0], [95.8, 7898.0], [95.9, 7923.0], [96.0, 7937.0], [96.1, 7949.0], [96.2, 7961.0], [96.3, 7969.0], [96.4, 7978.0], [96.5, 7989.0], [96.6, 8000.0], [96.7, 8014.0], [96.8, 8021.0], [96.9, 8030.0], [97.0, 8039.0], [97.1, 8049.0], [97.2, 8059.0], [97.3, 8064.0], [97.4, 8073.0], [97.5, 8086.0], [97.6, 8096.0], [97.7, 8108.0], [97.8, 8120.0], [97.9, 8147.0], [98.0, 8169.0], [98.1, 8182.0], [98.2, 8199.0], [98.3, 8217.0], [98.4, 8244.0], [98.5, 8274.0], [98.6, 8293.0], [98.7, 8324.0], [98.8, 8347.0], [98.9, 8382.0], [99.0, 8404.0], [99.1, 8429.0], [99.2, 8464.0], [99.3, 8498.0], [99.4, 8566.0], [99.5, 8746.0], [99.6, 8885.0], [99.7, 9006.0], [99.8, 9225.0], [99.9, 9487.0], [100.0, 9681.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1600.0, "maxY": 637.0, "series": [{"data": [[1600.0, 3.0], [1900.0, 3.0], [2000.0, 12.0], [2100.0, 2.0], [2200.0, 6.0], [2300.0, 6.0], [2400.0, 4.0], [2500.0, 4.0], [2600.0, 2.0], [2800.0, 1.0], [2900.0, 3.0], [3000.0, 14.0], [3100.0, 19.0], [3300.0, 45.0], [3200.0, 21.0], [3400.0, 51.0], [3500.0, 42.0], [3600.0, 62.0], [3700.0, 270.0], [3800.0, 235.0], [3900.0, 422.0], [4000.0, 580.0], [4100.0, 637.0], [4200.0, 605.0], [4300.0, 510.0], [4400.0, 370.0], [4500.0, 384.0], [4600.0, 393.0], [4700.0, 233.0], [4800.0, 249.0], [4900.0, 186.0], [5000.0, 147.0], [5100.0, 77.0], [5200.0, 47.0], [5300.0, 46.0], [5400.0, 50.0], [5500.0, 103.0], [5600.0, 117.0], [5800.0, 271.0], [5700.0, 164.0], [6000.0, 257.0], [5900.0, 190.0], [6100.0, 313.0], [6300.0, 334.0], [6200.0, 353.0], [6500.0, 276.0], [6400.0, 263.0], [6600.0, 262.0], [6700.0, 130.0], [6800.0, 104.0], [6900.0, 101.0], [7000.0, 84.0], [7100.0, 59.0], [7300.0, 58.0], [7400.0, 55.0], [7200.0, 38.0], [7500.0, 78.0], [7600.0, 73.0], [7700.0, 88.0], [7800.0, 68.0], [7900.0, 79.0], [8000.0, 106.0], [8100.0, 56.0], [8200.0, 40.0], [8300.0, 38.0], [8400.0, 31.0], [8500.0, 11.0], [8700.0, 5.0], [8600.0, 7.0], [8800.0, 9.0], [8900.0, 6.0], [9000.0, 8.0], [9100.0, 2.0], [9200.0, 4.0], [9400.0, 4.0], [9500.0, 7.0], [9600.0, 3.0], [9300.0, 4.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4216.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5784.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5784.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4216.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 943.7280999999996, "minX": 1.61785788E12, "maxY": 943.7280999999996, "series": [{"data": [[1.61785788E12, 943.7280999999996]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61785788E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1928.0, "minX": 1.0, "maxY": 5542.227027027053, "series": [{"data": [[2.0, 3468.0], [3.0, 3411.0], [6.0, 3420.0], [7.0, 3307.0], [8.0, 3165.0], [10.0, 3165.0], [11.0, 3166.0], [12.0, 3340.0], [14.0, 3225.5], [15.0, 3273.0], [16.0, 3035.0], [17.0, 3062.0], [18.0, 3051.0], [19.0, 3131.0], [20.0, 3464.0], [23.0, 3297.3333333333335], [24.0, 3029.0], [25.0, 3946.0], [26.0, 2990.0], [28.0, 3163.0], [29.0, 3862.0], [30.0, 3199.0], [31.0, 3429.0], [33.0, 3011.0], [32.0, 3864.0], [35.0, 3918.0], [34.0, 3014.0], [36.0, 3210.0], [39.0, 3072.6666666666665], [41.0, 3023.0], [40.0, 3078.0], [45.0, 3196.0], [44.0, 3146.0], [46.0, 3482.0], [49.0, 3112.0], [48.0, 3377.0], [51.0, 3222.0], [50.0, 3196.0], [53.0, 3214.0], [52.0, 3445.0], [55.0, 3194.0], [54.0, 3030.0], [57.0, 3432.0], [56.0, 3360.0], [59.0, 3199.0], [58.0, 3363.0], [61.0, 3850.0], [60.0, 3507.0], [63.0, 3128.0], [62.0, 3863.0], [67.0, 3111.0], [65.0, 3069.0], [64.0, 3223.0], [71.0, 3392.0], [70.0, 3163.0], [69.0, 3194.0], [68.0, 3378.5], [75.0, 3470.0], [74.0, 3644.0], [73.0, 3243.0], [72.0, 3197.0], [79.0, 3636.5], [77.0, 3694.0], [76.0, 3893.0], [83.0, 3281.0], [82.0, 3614.0], [81.0, 3249.0], [80.0, 3228.0], [87.0, 3859.0], [86.0, 3695.0], [84.0, 3329.0], [91.0, 3243.0], [90.0, 3239.0], [89.0, 3477.5], [95.0, 3303.0], [94.0, 3376.0], [93.0, 3245.0], [92.0, 3895.0], [99.0, 3764.0], [98.0, 3766.0], [97.0, 3443.0], [96.0, 3367.0], [103.0, 3766.0], [102.0, 3356.0], [101.0, 3295.5], [107.0, 3356.0], [106.0, 3362.0], [105.0, 3337.0], [104.0, 3659.0], [109.0, 3366.0], [108.0, 3896.0], [115.0, 3582.0], [114.0, 3522.0], [119.0, 3450.0], [118.0, 3327.0], [116.0, 3315.0], [123.0, 3367.0], [122.0, 3382.0], [121.0, 3559.0], [120.0, 3276.0], [125.0, 3465.0], [124.0, 3534.0], [133.0, 3436.0], [132.0, 3459.0], [131.0, 3469.0], [129.0, 3737.0], [128.0, 3398.0], [143.0, 3397.0], [142.0, 3407.0], [141.0, 3493.0], [140.0, 3600.0], [138.0, 3596.0], [137.0, 3425.0], [136.0, 3349.0], [151.0, 3550.0], [150.0, 3465.5], [148.0, 3573.0], [147.0, 3384.0], [145.0, 3524.0], [144.0, 3402.0], [159.0, 3492.6666666666665], [156.0, 3430.0], [154.0, 3531.0], [153.0, 3451.0], [152.0, 3497.0], [163.0, 3506.0], [162.0, 3431.0], [161.0, 3450.0], [160.0, 3472.0], [175.0, 3427.0], [174.0, 3692.5], [172.0, 3741.0], [171.0, 3401.0], [170.0, 3581.5714285714284], [183.0, 3700.0], [182.0, 3794.0], [181.0, 3615.0], [180.0, 3474.0], [179.0, 3803.0], [178.0, 3722.0], [177.0, 3488.0], [176.0, 3486.0], [190.0, 3646.6666666666665], [187.0, 3782.5], [185.0, 3754.0], [184.0, 3721.0], [199.0, 3667.0], [198.0, 3694.0], [197.0, 3688.0], [196.0, 3761.0], [195.0, 3771.0], [193.0, 3677.3333333333335], [207.0, 3738.0], [206.0, 3697.3333333333335], [203.0, 3784.0], [202.0, 3732.0], [201.0, 3729.0], [200.0, 3832.0], [214.0, 3749.0], [213.0, 3696.0], [212.0, 3732.0], [211.0, 3722.0], [210.0, 3763.0], [209.0, 3739.5], [223.0, 3711.0], [221.0, 3737.0], [220.0, 3718.0], [219.0, 3717.0], [218.0, 3700.0], [217.0, 3715.0], [216.0, 3744.5], [231.0, 3715.0], [230.0, 3720.0], [228.0, 3711.0], [227.0, 3711.0], [226.0, 3829.0], [224.0, 3724.0], [239.0, 3688.0], [238.0, 3691.0], [237.0, 3675.0], [236.0, 3683.0], [235.0, 3695.0], [234.0, 3757.0], [233.0, 3698.0], [232.0, 3701.0], [247.0, 3872.0], [246.0, 3735.0], [245.0, 3679.0], [244.0, 3725.0], [243.0, 3669.0], [242.0, 3754.0], [241.0, 3682.0], [240.0, 3673.0], [254.0, 3717.0], [253.0, 3714.0], [252.0, 3689.6666666666665], [249.0, 3725.0], [248.0, 3720.0], [270.0, 3704.0], [271.0, 3716.0], [269.0, 3698.0], [268.0, 3773.0], [267.0, 3718.0], [266.0, 3708.0], [265.0, 3717.0], [264.0, 3704.0], [263.0, 3784.0], [257.0, 3695.0], [256.0, 3705.0], [259.0, 3697.0], [258.0, 3682.0], [262.0, 3715.0], [261.0, 3773.0], [260.0, 3705.0], [287.0, 3701.0], [286.0, 3719.5], [285.0, 3871.75], [281.0, 4380.0], [280.0, 3747.0], [279.0, 3728.0], [276.0, 3734.0], [291.0, 3705.0], [302.0, 4005.6666666666665], [303.0, 3730.0], [300.0, 3749.0], [298.0, 3836.0], [297.0, 3703.0], [295.0, 3707.5], [293.0, 3717.0], [292.0, 3826.5], [290.0, 3771.0], [289.0, 3797.0], [288.0, 3720.0], [317.0, 3787.0], [318.0, 3781.0], [316.0, 3723.0], [306.0, 3764.0], [305.0, 3722.0], [304.0, 3732.0], [315.0, 3786.0], [314.0, 3806.0], [312.0, 3743.0], [311.0, 4341.0], [310.0, 3707.0], [309.0, 3798.0], [308.0, 3862.0], [334.0, 3716.0], [335.0, 4355.0], [333.0, 3933.0], [332.0, 4302.0], [331.0, 3766.0], [330.0, 4545.0], [329.0, 4477.0], [328.0, 4315.0], [326.0, 3769.0], [323.0, 3826.0], [322.0, 4273.0], [321.0, 3720.0], [320.0, 4115.0], [325.0, 3907.5], [350.0, 4078.0], [343.0, 4374.0], [342.0, 3687.0], [341.0, 4086.0], [340.0, 3754.0], [339.0, 3805.0], [338.0, 3815.0], [337.0, 4210.0], [366.0, 3766.0], [367.0, 3770.0], [365.0, 3773.0], [364.0, 3838.0], [363.0, 4359.0], [362.0, 3770.0], [361.0, 4251.0], [360.0, 3858.0], [359.0, 4069.0], [352.0, 3736.0], [355.0, 4167.0], [353.0, 4036.0], [357.0, 3808.0], [356.0, 4057.0], [371.0, 4004.0], [381.0, 3835.0], [383.0, 3741.0], [380.0, 3727.0], [370.0, 3980.0], [368.0, 4259.0], [379.0, 4201.5], [377.0, 3809.5], [375.0, 4178.0], [374.0, 3801.0], [373.0, 4197.0], [372.0, 4524.0], [387.0, 2719.0], [388.0, 2796.0], [384.0, 4483.0], [399.0, 2747.0], [398.0, 3889.0], [397.0, 3792.0], [396.0, 3851.5], [394.0, 3891.0], [393.0, 3890.8], [386.0, 3924.0], [385.0, 3759.0], [414.0, 4001.0], [415.0, 4009.0], [413.0, 4207.0], [412.0, 3870.0], [411.0, 3923.3333333333335], [409.0, 3782.0], [408.0, 3798.0], [405.0, 3775.0], [403.0, 3873.0], [402.0, 3787.0], [401.0, 3816.0], [400.0, 3868.0], [404.0, 3877.0], [429.0, 4337.0], [431.0, 3969.0], [428.0, 3993.0], [419.0, 4004.0], [418.0, 3828.0], [417.0, 3802.0], [416.0, 4101.0], [427.0, 3942.0], [426.0, 4271.0], [425.0, 4273.0], [424.0, 3778.0], [423.0, 4232.0], [422.0, 3947.0], [421.0, 3792.0], [420.0, 3989.0], [446.0, 4094.0], [445.0, 3452.6666666666665], [447.0, 4160.0], [443.0, 4151.0], [442.0, 4182.0], [441.0, 3973.0], [439.0, 4071.3333333333335], [437.0, 3982.0], [435.0, 4119.5], [433.0, 4272.0], [432.0, 4270.0], [460.0, 3114.0], [456.0, 2033.5], [448.0, 1928.0], [451.0, 4209.0], [450.0, 4337.0], [449.0, 4123.5], [457.0, 2024.5], [459.0, 3893.75], [463.0, 3043.0], [462.0, 4186.0], [461.0, 4199.0], [452.0, 4219.0], [477.0, 4193.0], [464.0, 2637.25], [468.0, 2750.6666666666665], [471.0, 4107.333333333333], [479.0, 3445.3333333333335], [476.0, 4173.0], [467.0, 4153.0], [466.0, 4115.5], [475.0, 4282.0], [474.0, 4153.0], [473.0, 4072.0], [472.0, 4074.0], [493.0, 2217.0], [495.0, 2172.0], [492.0, 4187.0], [483.0, 4142.0], [482.0, 4181.666666666667], [491.0, 4193.0], [490.0, 4637.0], [489.0, 4247.0], [488.0, 4261.0], [487.0, 4152.0], [485.0, 4204.0], [484.0, 4184.0], [510.0, 4181.0], [497.0, 3243.0], [500.0, 3203.5], [501.0, 4160.0], [509.0, 4191.5], [499.0, 4223.0], [498.0, 4160.0], [507.0, 4075.0], [506.0, 4192.0], [505.0, 4205.0], [504.0, 4206.0], [503.0, 4209.0], [496.0, 4190.0], [502.0, 4213.0], [540.0, 2301.0], [517.0, 2863.0], [523.0, 2895.6666666666665], [522.0, 4136.0], [521.0, 4135.0], [520.0, 4149.0], [525.0, 4121.0], [527.0, 4113.0], [512.0, 4178.5], [514.0, 4153.0], [513.0, 4169.0], [516.0, 4160.0], [515.0, 4156.0], [526.0, 4524.0], [528.0, 3240.0], [535.0, 4457.0], [534.0, 4494.0], [533.0, 4079.0], [532.0, 4290.0], [530.0, 4537.0], [529.0, 4103.0], [542.0, 3452.0], [543.0, 4489.0], [541.0, 4444.0], [539.0, 4459.0], [538.0, 4451.0], [537.0, 4456.0], [536.0, 4476.0], [519.0, 4138.0], [518.0, 4146.0], [574.0, 4338.0], [548.0, 2388.0], [546.0, 3475.5], [545.0, 4433.0], [544.0, 4474.0], [550.0, 2364.0], [568.0, 4395.0], [551.0, 4430.8], [571.0, 4374.0], [570.0, 4373.0], [573.0, 4386.0], [572.0, 4382.0], [557.0, 3107.6666666666665], [556.0, 4407.4], [558.0, 4407.0], [559.0, 3469.5], [561.0, 3499.5], [563.0, 2502.5], [562.0, 4358.0], [564.0, 4482.5], [567.0, 4427.0], [565.0, 4372.0], [575.0, 4366.0], [560.0, 4419.0], [600.0, 4614.0], [604.0, 4341.0], [585.0, 2681.0], [584.0, 4440.0], [586.0, 4468.0], [587.0, 3579.5], [607.0, 4281.0], [596.0, 4423.333333333334], [606.0, 4663.0], [605.0, 4332.0], [603.0, 4613.0], [602.0, 4355.0], [601.0, 4522.0], [590.0, 4415.0], [577.0, 4361.0], [576.0, 4477.0], [579.0, 4372.0], [578.0, 4471.0], [581.0, 4390.0], [580.0, 4352.0], [583.0, 4355.0], [582.0, 4382.0], [589.0, 4320.0], [588.0, 4323.0], [638.0, 4605.0], [639.0, 4164.0], [625.0, 4599.333333333333], [627.0, 4270.0], [626.0, 4288.0], [637.0, 4746.0], [636.0, 4505.5], [634.0, 4982.0], [633.0, 4245.0], [623.0, 4296.0], [610.0, 4543.5], [608.0, 4565.0], [612.0, 4301.0], [611.0, 4683.0], [614.0, 4704.0], [613.0, 4569.0], [621.0, 4236.0], [620.0, 4294.0], [619.0, 4233.666666666667], [616.0, 4290.0], [631.0, 4234.0], [630.0, 4182.0], [629.0, 4254.0], [628.0, 4258.0], [654.0, 4169.0], [665.0, 4316.0], [664.0, 4164.0], [647.0, 4284.0], [646.0, 4122.0], [645.0, 4611.0], [643.0, 4155.0], [642.0, 4162.5], [640.0, 4511.0], [663.0, 4258.0], [657.0, 4149.0], [656.0, 4738.5], [653.0, 4538.0], [652.0, 4201.0], [651.0, 4136.0], [650.0, 4288.0], [649.0, 4118.0], [648.0, 4221.0], [703.0, 4196.8], [700.0, 3989.0], [696.0, 4359.0], [690.0, 4024.0], [689.0, 4214.499999999999], [683.0, 4299.0], [680.0, 4116.0], [675.0, 4381.0], [729.0, 4030.0], [733.0, 3547.6], [735.0, 4193.0], [721.0, 4200.0], [720.0, 4212.0], [723.0, 4031.0], [722.0, 4349.0], [725.0, 4211.0], [724.0, 4039.0], [732.0, 4086.0], [731.0, 4137.0], [730.0, 4031.0], [728.0, 4216.0], [711.0, 4121.0], [710.0, 4053.0], [709.0, 4298.0], [708.0, 4226.0], [706.0, 4326.0], [705.0, 4101.0], [704.0, 4003.0], [719.0, 4192.0], [718.0, 4117.0], [717.0, 4047.0], [716.0, 4134.0], [715.0, 4167.0], [714.0, 4050.0], [713.0, 4199.0], [712.0, 4157.0], [727.0, 4100.0], [726.0, 4211.0], [742.0, 4189.0], [763.0, 3772.0], [736.0, 3559.6666666666665], [743.0, 3617.5], [741.0, 4102.0], [740.0, 4113.0], [738.0, 4063.0], [737.0, 4261.0], [762.0, 4244.0], [761.0, 4102.666666666667], [745.0, 3784.0], [744.0, 4031.0], [747.0, 4212.0], [746.0, 4088.0], [748.0, 3691.5], [751.0, 4098.0], [750.0, 4224.0], [749.0, 4062.0], [754.0, 3737.5], [759.0, 3546.0], [758.0, 4091.0], [757.0, 3972.0], [756.0, 4052.0], [755.0, 4121.0], [765.0, 3866.0], [764.0, 4390.0], [767.0, 4058.0], [753.0, 3978.0], [752.0, 4014.0], [766.0, 4050.0], [796.0, 4109.5], [773.0, 3623.0], [771.0, 4016.0], [770.0, 4206.0], [769.0, 4057.0], [768.0, 4106.0], [774.0, 4070.6666666666665], [783.0, 4108.0], [782.0, 4157.0], [780.0, 4042.0], [779.0, 4095.0], [778.0, 4213.0], [777.0, 4274.0], [775.0, 3767.0], [784.0, 3679.0], [789.0, 3920.0], [788.0, 3985.0], [787.0, 4152.0], [786.0, 4192.0], [785.0, 4156.0], [791.0, 4070.0], [790.0, 4208.0], [798.0, 4208.0], [794.0, 4141.0], [793.0, 4180.0], [792.0, 4143.0], [826.0, 4169.5], [830.0, 4145.0], [829.0, 3927.6666666666665], [831.0, 4045.5], [816.0, 4199.0], [819.0, 4022.0], [818.0, 4202.0], [821.0, 4199.0], [820.0, 4056.0], [828.0, 4204.0], [827.0, 4199.0], [824.0, 4086.0], [807.0, 4141.5], [806.0, 4006.0], [804.0, 4216.0], [803.0, 4216.0], [802.0, 4255.0], [801.0, 4003.0], [800.0, 4185.0], [815.0, 4221.5], [812.0, 4229.0], [811.0, 4090.0], [810.0, 4130.0], [808.0, 4081.0], [823.0, 4046.0], [822.0, 4177.0], [861.0, 4203.0], [832.0, 4070.0], [833.0, 4177.0], [835.0, 4132.0], [834.0, 4313.0], [837.0, 4179.0], [836.0, 4155.5], [839.0, 4180.0], [838.0, 4121.0], [847.0, 4042.0], [846.0, 4305.0], [858.0, 4310.8], [856.0, 4293.0], [843.0, 4045.5], [841.0, 4112.5], [840.0, 4265.0], [844.0, 4340.0], [845.0, 4089.0], [854.0, 4355.666666666667], [853.0, 4333.0], [852.0, 4048.0], [851.0, 4194.0], [850.0, 4340.666666666667], [849.0, 4281.5], [848.0, 4070.0], [855.0, 4135.0], [863.0, 4006.5], [862.0, 4067.0], [860.0, 4346.0], [859.0, 4008.0], [868.0, 4055.5], [864.0, 4043.0], [865.0, 4089.0], [870.0, 4043.5], [869.0, 3951.0], [871.0, 4025.5], [875.0, 4093.0], [874.0, 3979.0], [873.0, 3980.0], [872.0, 4097.0], [876.0, 4248.2], [878.0, 4009.5], [877.0, 4220.0], [879.0, 4046.6666666666665], [881.0, 4089.5], [887.0, 4102.0], [886.0, 4384.0], [885.0, 4366.2], [884.0, 4102.666666666666], [883.0, 4085.3333333333335], [895.0, 4072.3333333333335], [880.0, 4275.666666666667], [892.0, 4118.0], [891.0, 4125.25], [889.0, 4136.666666666667], [888.0, 3975.0], [893.0, 4031.5], [894.0, 4154.0], [921.0, 3891.0], [925.0, 4101.733333333334], [897.0, 4070.0], [911.0, 3970.3333333333335], [896.0, 4081.0], [910.0, 4066.0], [909.0, 4310.0], [908.0, 4131.333333333333], [907.0, 4010.0], [906.0, 4062.3333333333335], [905.0, 4103.333333333333], [904.0, 4177.333333333333], [920.0, 3948.5], [903.0, 4209.5], [902.0, 4018.5], [900.0, 4104.4], [899.0, 4220.0], [898.0, 4082.0], [916.0, 4097.5], [915.0, 4160.833333333333], [914.0, 3993.6666666666665], [913.0, 4016.5], [912.0, 4065.6666666666665], [919.0, 3941.5], [917.0, 4030.1666666666665], [927.0, 4146.666666666667], [926.0, 4016.0], [924.0, 4173.923076923076], [923.0, 3948.0], [922.0, 3942.0], [956.0, 4559.25], [959.0, 4553.5], [944.0, 4487.0], [946.0, 4455.0], [945.0, 4675.444444444444], [949.0, 4594.666666666667], [948.0, 4568.1875], [958.0, 4733.333333333333], [957.0, 4566.882352941176], [955.0, 5032.0], [954.0, 4606.857142857143], [953.0, 5120.0], [952.0, 4764.5], [943.0, 4630.666666666666], [929.0, 4150.222222222223], [928.0, 3979.0], [931.0, 4078.8], [930.0, 4039.3333333333335], [933.0, 4001.0], [932.0, 4024.25], [935.0, 4403.714285714285], [934.0, 4122.675000000001], [942.0, 4649.0], [941.0, 4580.400000000001], [940.0, 4642.4], [939.0, 4687.794871794872], [938.0, 4569.411764705881], [937.0, 4502.627906976745], [936.0, 4388.0], [951.0, 4814.5], [950.0, 4761.749999999999], [985.0, 4674.5], [989.0, 4790.249999999999], [963.0, 4494.166666666666], [975.0, 5035.0], [960.0, 4615.0], [962.0, 4411.0], [961.0, 4595.0], [974.0, 5054.0], [973.0, 5049.666666666667], [972.0, 4904.214285714285], [971.0, 4896.0], [970.0, 4913.0], [969.0, 4897.0], [968.0, 4912.888888888889], [984.0, 4643.857142857142], [967.0, 4878.280000000001], [966.0, 4967.0], [965.0, 4861.0], [964.0, 4781.0], [976.0, 4966.727272727273], [977.0, 5051.0], [980.0, 4931.75], [979.0, 4961.2], [983.0, 4831.181818181819], [981.0, 4919.333333333333], [991.0, 4769.416666666666], [990.0, 4910.0], [988.0, 4699.0], [987.0, 4686.694444444443], [986.0, 4675.444444444444], [996.0, 4628.416666666666], [1000.0, 5542.227027027053], [999.0, 4601.166666666666], [998.0, 4681.374999999999], [997.0, 4699.9047619047615], [995.0, 4656.733333333332], [994.0, 4719.25], [993.0, 4638.555555555556], [992.0, 4852.1], [1.0, 3467.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[943.7280999999996, 5290.816499999998]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20500.0, "minX": 1.61785788E12, "maxY": 44238.86666666667, "series": [{"data": [[1.61785788E12, 44238.86666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61785788E12, 20500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61785788E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5290.816499999998, "minX": 1.61785788E12, "maxY": 5290.816499999998, "series": [{"data": [[1.61785788E12, 5290.816499999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61785788E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5278.099800000015, "minX": 1.61785788E12, "maxY": 5278.099800000015, "series": [{"data": [[1.61785788E12, 5278.099800000015]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61785788E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.581800000000005, "minX": 1.61785788E12, "maxY": 0.581800000000005, "series": [{"data": [[1.61785788E12, 0.581800000000005]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61785788E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2858.0, "minX": 1.61785788E12, "maxY": 9681.0, "series": [{"data": [[1.61785788E12, 9681.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61785788E12, 7446.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61785788E12, 8524.15]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61785788E12, 8019.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61785788E12, 2858.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61785788E12, 4989.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61785788E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1689.0, "minX": 3.0, "maxY": 8244.0, "series": [{"data": [[59.0, 5088.0], [65.0, 3333.0], [87.0, 7493.0], [89.0, 5847.0], [93.0, 6594.0], [109.0, 7623.0], [123.0, 8244.0], [121.0, 6914.0], [130.0, 7867.0], [132.0, 6360.0], [142.0, 6923.0], [136.0, 6421.0], [151.0, 8053.5], [150.0, 7214.5], [148.0, 6301.5], [147.0, 6386.0], [145.0, 6009.0], [167.0, 6610.5], [163.0, 6101.5], [175.0, 7589.5], [168.0, 8067.5], [171.0, 6331.5], [174.0, 6087.0], [179.0, 6512.0], [182.0, 6397.0], [188.0, 6777.0], [187.0, 4971.5], [203.0, 4043.0], [212.0, 6572.5], [215.0, 5678.0], [221.0, 5823.0], [229.0, 4026.0], [225.0, 4180.0], [226.0, 4854.0], [227.0, 4203.5], [247.0, 4516.0], [245.0, 4236.0], [240.0, 4878.0], [243.0, 4287.0], [249.0, 4286.0], [253.0, 4449.0], [271.0, 5261.0], [262.0, 4529.0], [279.0, 4298.0], [299.0, 3787.5], [363.0, 3729.0], [29.0, 4138.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 1689.0], [18.0, 3452.5], [29.0, 3968.0], [39.0, 2217.0], [59.0, 4784.0], [65.0, 3133.5], [87.0, 6620.5], [89.0, 5386.0], [93.0, 5923.5], [109.0, 7046.0], [123.0, 7613.5], [121.0, 6404.0], [130.0, 7833.5], [132.0, 6169.0], [142.0, 4376.0], [136.0, 6123.0], [151.0, 4641.0], [150.0, 6914.5], [148.0, 6166.5], [147.0, 6233.0], [145.0, 5805.5], [167.0, 6385.0], [163.0, 5950.5], [175.0, 7550.0], [168.0, 8030.0], [171.0, 6275.0], [174.0, 5810.0], [179.0, 6372.5], [182.0, 6168.5], [188.0, 6638.0], [187.0, 4692.0], [203.0, 4030.5], [212.0, 4025.0], [215.0, 5642.0], [221.0, 4480.0], [229.0, 3953.0], [225.0, 4035.0], [226.0, 4641.0], [227.0, 4095.0], [247.0, 4401.0], [245.0, 4150.0], [240.0, 4625.0], [243.0, 4254.0], [249.0, 4173.0], [253.0, 4532.0], [271.0, 4920.0], [262.0, 4514.0], [279.0, 4225.0], [299.0, 3780.0], [363.0, 3725.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 363.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1685.0, "minX": 3.0, "maxY": 8231.0, "series": [{"data": [[59.0, 5087.0], [65.0, 3325.0], [87.0, 7418.0], [89.0, 5846.5], [93.0, 6593.0], [109.0, 7604.5], [123.0, 8231.0], [121.0, 6896.0], [130.0, 7841.5], [132.0, 6330.5], [142.0, 6916.0], [136.0, 6402.0], [151.0, 8035.5], [150.0, 7192.5], [148.0, 6290.0], [147.0, 6350.0], [145.0, 5991.0], [167.0, 6601.0], [163.0, 6086.0], [175.0, 7563.0], [168.0, 8048.5], [171.0, 6315.0], [174.0, 6073.0], [179.0, 6507.0], [182.0, 6386.5], [188.0, 6768.0], [187.0, 4964.0], [203.0, 4027.0], [212.0, 6542.5], [215.0, 5666.0], [221.0, 5816.0], [229.0, 4021.0], [225.0, 4167.0], [226.0, 4852.0], [227.0, 4189.5], [247.0, 4510.0], [245.0, 4227.0], [240.0, 4872.0], [243.0, 4270.0], [249.0, 4274.0], [253.0, 4446.5], [271.0, 5258.0], [262.0, 4514.0], [279.0, 4287.0], [299.0, 3779.5], [363.0, 3719.0], [29.0, 4124.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 1685.0], [18.0, 3440.5], [29.0, 3884.0], [39.0, 2202.0], [59.0, 4759.5], [65.0, 3131.5], [87.0, 6594.5], [89.0, 5378.0], [93.0, 5888.0], [109.0, 7033.0], [123.0, 7597.5], [121.0, 6390.5], [130.0, 7806.0], [132.0, 6123.5], [142.0, 4369.0], [136.0, 6122.0], [151.0, 4638.5], [150.0, 6908.0], [148.0, 6114.5], [147.0, 6219.5], [145.0, 5796.5], [167.0, 6381.0], [163.0, 5928.5], [175.0, 7520.0], [168.0, 8012.0], [171.0, 6268.0], [174.0, 5765.0], [179.0, 6357.5], [182.0, 6161.5], [188.0, 6608.0], [187.0, 4691.0], [203.0, 4025.0], [212.0, 4017.0], [215.0, 5619.5], [221.0, 4465.0], [229.0, 3944.5], [225.0, 4023.0], [226.0, 4620.0], [227.0, 4090.0], [247.0, 4397.0], [245.0, 4135.0], [240.0, 4625.0], [243.0, 4237.0], [249.0, 4172.5], [253.0, 4532.0], [271.0, 4917.5], [262.0, 4506.0], [279.0, 4214.0], [299.0, 3774.0], [363.0, 3719.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 363.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.61785788E12, "maxY": 166.66666666666666, "series": [{"data": [[1.61785788E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61785788E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 70.26666666666667, "minX": 1.61785788E12, "maxY": 96.4, "series": [{"data": [[1.61785788E12, 96.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61785788E12, 70.26666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61785788E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 70.26666666666667, "minX": 1.61785788E12, "maxY": 96.4, "series": [{"data": [[1.61785788E12, 70.26666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.61785788E12, 96.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61785788E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 70.26666666666667, "minX": 1.61785788E12, "maxY": 96.4, "series": [{"data": [[1.61785788E12, 96.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61785788E12, 70.26666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61785788E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

