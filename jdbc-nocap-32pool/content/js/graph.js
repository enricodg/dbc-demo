/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1700.0, "minX": 0.0, "maxY": 16799.0, "series": [{"data": [[0.0, 1700.0], [0.1, 3894.0], [0.2, 3978.0], [0.3, 4000.0], [0.4, 4035.0], [0.5, 4076.0], [0.6, 4091.0], [0.7, 4103.0], [0.8, 4127.0], [0.9, 4145.0], [1.0, 4192.0], [1.1, 4211.0], [1.2, 4234.0], [1.3, 4253.0], [1.4, 4267.0], [1.5, 4283.0], [1.6, 4299.0], [1.7, 4333.0], [1.8, 4379.0], [1.9, 4410.0], [2.0, 4449.0], [2.1, 4484.0], [2.2, 4576.0], [2.3, 4624.0], [2.4, 4656.0], [2.5, 4662.0], [2.6, 4677.0], [2.7, 4685.0], [2.8, 4690.0], [2.9, 4697.0], [3.0, 4700.0], [3.1, 4704.0], [3.2, 4711.0], [3.3, 4721.0], [3.4, 4729.0], [3.5, 4731.0], [3.6, 4741.0], [3.7, 4745.0], [3.8, 4747.0], [3.9, 4750.0], [4.0, 4754.0], [4.1, 4758.0], [4.2, 4763.0], [4.3, 4765.0], [4.4, 4770.0], [4.5, 4772.0], [4.6, 4775.0], [4.7, 4785.0], [4.8, 4790.0], [4.9, 4793.0], [5.0, 4795.0], [5.1, 4799.0], [5.2, 4805.0], [5.3, 4808.0], [5.4, 4810.0], [5.5, 4817.0], [5.6, 4826.0], [5.7, 4829.0], [5.8, 4831.0], [5.9, 4841.0], [6.0, 4851.0], [6.1, 4859.0], [6.2, 4864.0], [6.3, 4882.0], [6.4, 4887.0], [6.5, 4891.0], [6.6, 4904.0], [6.7, 4912.0], [6.8, 4918.0], [6.9, 4924.0], [7.0, 4937.0], [7.1, 4943.0], [7.2, 4949.0], [7.3, 4955.0], [7.4, 4960.0], [7.5, 4979.0], [7.6, 4992.0], [7.7, 4999.0], [7.8, 5007.0], [7.9, 5016.0], [8.0, 5021.0], [8.1, 5034.0], [8.2, 5041.0], [8.3, 5053.0], [8.4, 5058.0], [8.5, 5070.0], [8.6, 5079.0], [8.7, 5088.0], [8.8, 5093.0], [8.9, 5104.0], [9.0, 5111.0], [9.1, 5119.0], [9.2, 5128.0], [9.3, 5134.0], [9.4, 5139.0], [9.5, 5142.0], [9.6, 5147.0], [9.7, 5158.0], [9.8, 5165.0], [9.9, 5170.0], [10.0, 5173.0], [10.1, 5178.0], [10.2, 5183.0], [10.3, 5188.0], [10.4, 5193.0], [10.5, 5197.0], [10.6, 5201.0], [10.7, 5206.0], [10.8, 5211.0], [10.9, 5218.0], [11.0, 5220.0], [11.1, 5226.0], [11.2, 5230.0], [11.3, 5234.0], [11.4, 5237.0], [11.5, 5239.0], [11.6, 5242.0], [11.7, 5245.0], [11.8, 5249.0], [11.9, 5253.0], [12.0, 5256.0], [12.1, 5260.0], [12.2, 5263.0], [12.3, 5266.0], [12.4, 5272.0], [12.5, 5275.0], [12.6, 5278.0], [12.7, 5281.0], [12.8, 5287.0], [12.9, 5291.0], [13.0, 5297.0], [13.1, 5301.0], [13.2, 5305.0], [13.3, 5308.0], [13.4, 5313.0], [13.5, 5315.0], [13.6, 5319.0], [13.7, 5323.0], [13.8, 5327.0], [13.9, 5329.0], [14.0, 5334.0], [14.1, 5335.0], [14.2, 5340.0], [14.3, 5342.0], [14.4, 5344.0], [14.5, 5348.0], [14.6, 5352.0], [14.7, 5353.0], [14.8, 5354.0], [14.9, 5356.0], [15.0, 5358.0], [15.1, 5360.0], [15.2, 5362.0], [15.3, 5364.0], [15.4, 5366.0], [15.5, 5369.0], [15.6, 5371.0], [15.7, 5372.0], [15.8, 5374.0], [15.9, 5376.0], [16.0, 5379.0], [16.1, 5382.0], [16.2, 5384.0], [16.3, 5386.0], [16.4, 5388.0], [16.5, 5390.0], [16.6, 5392.0], [16.7, 5394.0], [16.8, 5395.0], [16.9, 5396.0], [17.0, 5397.0], [17.1, 5399.0], [17.2, 5400.0], [17.3, 5402.0], [17.4, 5405.0], [17.5, 5406.0], [17.6, 5408.0], [17.7, 5409.0], [17.8, 5411.0], [17.9, 5412.0], [18.0, 5414.0], [18.1, 5415.0], [18.2, 5418.0], [18.3, 5420.0], [18.4, 5421.0], [18.5, 5422.0], [18.6, 5424.0], [18.7, 5425.0], [18.8, 5426.0], [18.9, 5429.0], [19.0, 5430.0], [19.1, 5433.0], [19.2, 5434.0], [19.3, 5437.0], [19.4, 5438.0], [19.5, 5440.0], [19.6, 5441.0], [19.7, 5443.0], [19.8, 5445.0], [19.9, 5448.0], [20.0, 5449.0], [20.1, 5451.0], [20.2, 5453.0], [20.3, 5455.0], [20.4, 5458.0], [20.5, 5460.0], [20.6, 5462.0], [20.7, 5463.0], [20.8, 5464.0], [20.9, 5466.0], [21.0, 5468.0], [21.1, 5469.0], [21.2, 5473.0], [21.3, 5474.0], [21.4, 5475.0], [21.5, 5477.0], [21.6, 5479.0], [21.7, 5480.0], [21.8, 5482.0], [21.9, 5484.0], [22.0, 5485.0], [22.1, 5487.0], [22.2, 5492.0], [22.3, 5493.0], [22.4, 5494.0], [22.5, 5495.0], [22.6, 5497.0], [22.7, 5499.0], [22.8, 5500.0], [22.9, 5501.0], [23.0, 5503.0], [23.1, 5503.0], [23.2, 5505.0], [23.3, 5506.0], [23.4, 5508.0], [23.5, 5509.0], [23.6, 5511.0], [23.7, 5513.0], [23.8, 5514.0], [23.9, 5516.0], [24.0, 5516.0], [24.1, 5517.0], [24.2, 5519.0], [24.3, 5520.0], [24.4, 5522.0], [24.5, 5524.0], [24.6, 5525.0], [24.7, 5526.0], [24.8, 5529.0], [24.9, 5531.0], [25.0, 5533.0], [25.1, 5534.0], [25.2, 5535.0], [25.3, 5536.0], [25.4, 5538.0], [25.5, 5540.0], [25.6, 5542.0], [25.7, 5543.0], [25.8, 5544.0], [25.9, 5546.0], [26.0, 5548.0], [26.1, 5549.0], [26.2, 5551.0], [26.3, 5552.0], [26.4, 5554.0], [26.5, 5557.0], [26.6, 5558.0], [26.7, 5560.0], [26.8, 5562.0], [26.9, 5564.0], [27.0, 5565.0], [27.1, 5567.0], [27.2, 5570.0], [27.3, 5572.0], [27.4, 5575.0], [27.5, 5578.0], [27.6, 5580.0], [27.7, 5582.0], [27.8, 5583.0], [27.9, 5585.0], [28.0, 5587.0], [28.1, 5590.0], [28.2, 5591.0], [28.3, 5594.0], [28.4, 5595.0], [28.5, 5597.0], [28.6, 5598.0], [28.7, 5600.0], [28.8, 5602.0], [28.9, 5604.0], [29.0, 5605.0], [29.1, 5607.0], [29.2, 5608.0], [29.3, 5610.0], [29.4, 5611.0], [29.5, 5612.0], [29.6, 5613.0], [29.7, 5615.0], [29.8, 5617.0], [29.9, 5620.0], [30.0, 5621.0], [30.1, 5623.0], [30.2, 5625.0], [30.3, 5628.0], [30.4, 5632.0], [30.5, 5635.0], [30.6, 5638.0], [30.7, 5642.0], [30.8, 5644.0], [30.9, 5646.0], [31.0, 5648.0], [31.1, 5652.0], [31.2, 5654.0], [31.3, 5655.0], [31.4, 5658.0], [31.5, 5661.0], [31.6, 5664.0], [31.7, 5666.0], [31.8, 5669.0], [31.9, 5672.0], [32.0, 5674.0], [32.1, 5678.0], [32.2, 5680.0], [32.3, 5683.0], [32.4, 5685.0], [32.5, 5687.0], [32.6, 5690.0], [32.7, 5691.0], [32.8, 5693.0], [32.9, 5696.0], [33.0, 5697.0], [33.1, 5700.0], [33.2, 5704.0], [33.3, 5708.0], [33.4, 5711.0], [33.5, 5718.0], [33.6, 5722.0], [33.7, 5729.0], [33.8, 5734.0], [33.9, 5739.0], [34.0, 5742.0], [34.1, 5746.0], [34.2, 5749.0], [34.3, 5752.0], [34.4, 5756.0], [34.5, 5759.0], [34.6, 5761.0], [34.7, 5766.0], [34.8, 5769.0], [34.9, 5774.0], [35.0, 5778.0], [35.1, 5783.0], [35.2, 5786.0], [35.3, 5790.0], [35.4, 5792.0], [35.5, 5796.0], [35.6, 5796.0], [35.7, 5800.0], [35.8, 5802.0], [35.9, 5804.0], [36.0, 5806.0], [36.1, 5809.0], [36.2, 5813.0], [36.3, 5817.0], [36.4, 5821.0], [36.5, 5824.0], [36.6, 5828.0], [36.7, 5829.0], [36.8, 5832.0], [36.9, 5837.0], [37.0, 5841.0], [37.1, 5845.0], [37.2, 5853.0], [37.3, 5855.0], [37.4, 5857.0], [37.5, 5861.0], [37.6, 5868.0], [37.7, 5873.0], [37.8, 5877.0], [37.9, 5879.0], [38.0, 5882.0], [38.1, 5886.0], [38.2, 5888.0], [38.3, 5890.0], [38.4, 5893.0], [38.5, 5896.0], [38.6, 5899.0], [38.7, 5901.0], [38.8, 5906.0], [38.9, 5908.0], [39.0, 5910.0], [39.1, 5915.0], [39.2, 5919.0], [39.3, 5922.0], [39.4, 5927.0], [39.5, 5930.0], [39.6, 5933.0], [39.7, 5936.0], [39.8, 5939.0], [39.9, 5942.0], [40.0, 5946.0], [40.1, 5950.0], [40.2, 5952.0], [40.3, 5955.0], [40.4, 5958.0], [40.5, 5961.0], [40.6, 5964.0], [40.7, 5968.0], [40.8, 5971.0], [40.9, 5975.0], [41.0, 5977.0], [41.1, 5983.0], [41.2, 5987.0], [41.3, 5989.0], [41.4, 5992.0], [41.5, 5995.0], [41.6, 5999.0], [41.7, 6000.0], [41.8, 6003.0], [41.9, 6006.0], [42.0, 6010.0], [42.1, 6013.0], [42.2, 6017.0], [42.3, 6023.0], [42.4, 6029.0], [42.5, 6034.0], [42.6, 6037.0], [42.7, 6042.0], [42.8, 6045.0], [42.9, 6051.0], [43.0, 6056.0], [43.1, 6060.0], [43.2, 6063.0], [43.3, 6065.0], [43.4, 6069.0], [43.5, 6072.0], [43.6, 6077.0], [43.7, 6080.0], [43.8, 6082.0], [43.9, 6084.0], [44.0, 6089.0], [44.1, 6092.0], [44.2, 6094.0], [44.3, 6097.0], [44.4, 6100.0], [44.5, 6103.0], [44.6, 6105.0], [44.7, 6107.0], [44.8, 6110.0], [44.9, 6112.0], [45.0, 6116.0], [45.1, 6119.0], [45.2, 6123.0], [45.3, 6130.0], [45.4, 6134.0], [45.5, 6139.0], [45.6, 6142.0], [45.7, 6146.0], [45.8, 6150.0], [45.9, 6153.0], [46.0, 6156.0], [46.1, 6159.0], [46.2, 6163.0], [46.3, 6165.0], [46.4, 6169.0], [46.5, 6173.0], [46.6, 6176.0], [46.7, 6179.0], [46.8, 6183.0], [46.9, 6185.0], [47.0, 6188.0], [47.1, 6190.0], [47.2, 6193.0], [47.3, 6196.0], [47.4, 6197.0], [47.5, 6198.0], [47.6, 6200.0], [47.7, 6202.0], [47.8, 6204.0], [47.9, 6207.0], [48.0, 6209.0], [48.1, 6211.0], [48.2, 6212.0], [48.3, 6215.0], [48.4, 6216.0], [48.5, 6218.0], [48.6, 6219.0], [48.7, 6221.0], [48.8, 6225.0], [48.9, 6227.0], [49.0, 6230.0], [49.1, 6231.0], [49.2, 6232.0], [49.3, 6234.0], [49.4, 6236.0], [49.5, 6239.0], [49.6, 6244.0], [49.7, 6246.0], [49.8, 6248.0], [49.9, 6250.0], [50.0, 6253.0], [50.1, 6255.0], [50.2, 6258.0], [50.3, 6261.0], [50.4, 6263.0], [50.5, 6265.0], [50.6, 6268.0], [50.7, 6269.0], [50.8, 6271.0], [50.9, 6272.0], [51.0, 6274.0], [51.1, 6276.0], [51.2, 6278.0], [51.3, 6279.0], [51.4, 6281.0], [51.5, 6283.0], [51.6, 6285.0], [51.7, 6286.0], [51.8, 6288.0], [51.9, 6290.0], [52.0, 6291.0], [52.1, 6293.0], [52.2, 6294.0], [52.3, 6295.0], [52.4, 6297.0], [52.5, 6298.0], [52.6, 6300.0], [52.7, 6302.0], [52.8, 6304.0], [52.9, 6305.0], [53.0, 6307.0], [53.1, 6307.0], [53.2, 6309.0], [53.3, 6310.0], [53.4, 6312.0], [53.5, 6314.0], [53.6, 6317.0], [53.7, 6319.0], [53.8, 6321.0], [53.9, 6323.0], [54.0, 6325.0], [54.1, 6329.0], [54.2, 6330.0], [54.3, 6332.0], [54.4, 6334.0], [54.5, 6337.0], [54.6, 6342.0], [54.7, 6346.0], [54.8, 6348.0], [54.9, 6350.0], [55.0, 6353.0], [55.1, 6355.0], [55.2, 6357.0], [55.3, 6360.0], [55.4, 6361.0], [55.5, 6364.0], [55.6, 6367.0], [55.7, 6368.0], [55.8, 6370.0], [55.9, 6372.0], [56.0, 6374.0], [56.1, 6376.0], [56.2, 6378.0], [56.3, 6380.0], [56.4, 6383.0], [56.5, 6385.0], [56.6, 6388.0], [56.7, 6390.0], [56.8, 6393.0], [56.9, 6394.0], [57.0, 6397.0], [57.1, 6400.0], [57.2, 6404.0], [57.3, 6407.0], [57.4, 6410.0], [57.5, 6412.0], [57.6, 6414.0], [57.7, 6416.0], [57.8, 6419.0], [57.9, 6421.0], [58.0, 6423.0], [58.1, 6426.0], [58.2, 6429.0], [58.3, 6431.0], [58.4, 6432.0], [58.5, 6437.0], [58.6, 6439.0], [58.7, 6441.0], [58.8, 6442.0], [58.9, 6444.0], [59.0, 6446.0], [59.1, 6449.0], [59.2, 6452.0], [59.3, 6455.0], [59.4, 6457.0], [59.5, 6459.0], [59.6, 6462.0], [59.7, 6464.0], [59.8, 6467.0], [59.9, 6469.0], [60.0, 6471.0], [60.1, 6474.0], [60.2, 6476.0], [60.3, 6478.0], [60.4, 6480.0], [60.5, 6481.0], [60.6, 6482.0], [60.7, 6484.0], [60.8, 6484.0], [60.9, 6486.0], [61.0, 6489.0], [61.1, 6490.0], [61.2, 6492.0], [61.3, 6494.0], [61.4, 6497.0], [61.5, 6499.0], [61.6, 6502.0], [61.7, 6504.0], [61.8, 6505.0], [61.9, 6507.0], [62.0, 6510.0], [62.1, 6512.0], [62.2, 6514.0], [62.3, 6516.0], [62.4, 6519.0], [62.5, 6522.0], [62.6, 6525.0], [62.7, 6528.0], [62.8, 6530.0], [62.9, 6531.0], [63.0, 6533.0], [63.1, 6537.0], [63.2, 6539.0], [63.3, 6541.0], [63.4, 6545.0], [63.5, 6549.0], [63.6, 6549.0], [63.7, 6550.0], [63.8, 6554.0], [63.9, 6559.0], [64.0, 6562.0], [64.1, 6565.0], [64.2, 6568.0], [64.3, 6574.0], [64.4, 6577.0], [64.5, 6580.0], [64.6, 6582.0], [64.7, 6584.0], [64.8, 6586.0], [64.9, 6589.0], [65.0, 6591.0], [65.1, 6593.0], [65.2, 6595.0], [65.3, 6597.0], [65.4, 6598.0], [65.5, 6603.0], [65.6, 6605.0], [65.7, 6608.0], [65.8, 6609.0], [65.9, 6613.0], [66.0, 6615.0], [66.1, 6617.0], [66.2, 6619.0], [66.3, 6623.0], [66.4, 6625.0], [66.5, 6628.0], [66.6, 6630.0], [66.7, 6631.0], [66.8, 6634.0], [66.9, 6637.0], [67.0, 6641.0], [67.1, 6644.0], [67.2, 6648.0], [67.3, 6656.0], [67.4, 6660.0], [67.5, 6665.0], [67.6, 6668.0], [67.7, 6670.0], [67.8, 6673.0], [67.9, 6677.0], [68.0, 6679.0], [68.1, 6681.0], [68.2, 6685.0], [68.3, 6688.0], [68.4, 6690.0], [68.5, 6692.0], [68.6, 6694.0], [68.7, 6696.0], [68.8, 6699.0], [68.9, 6700.0], [69.0, 6701.0], [69.1, 6703.0], [69.2, 6706.0], [69.3, 6707.0], [69.4, 6710.0], [69.5, 6711.0], [69.6, 6714.0], [69.7, 6717.0], [69.8, 6720.0], [69.9, 6724.0], [70.0, 6728.0], [70.1, 6730.0], [70.2, 6732.0], [70.3, 6735.0], [70.4, 6739.0], [70.5, 6742.0], [70.6, 6747.0], [70.7, 6751.0], [70.8, 6754.0], [70.9, 6760.0], [71.0, 6764.0], [71.1, 6768.0], [71.2, 6772.0], [71.3, 6774.0], [71.4, 6778.0], [71.5, 6783.0], [71.6, 6787.0], [71.7, 6789.0], [71.8, 6793.0], [71.9, 6796.0], [72.0, 6798.0], [72.1, 6800.0], [72.2, 6803.0], [72.3, 6805.0], [72.4, 6810.0], [72.5, 6814.0], [72.6, 6821.0], [72.7, 6828.0], [72.8, 6836.0], [72.9, 6842.0], [73.0, 6848.0], [73.1, 6854.0], [73.2, 6862.0], [73.3, 6865.0], [73.4, 6870.0], [73.5, 6877.0], [73.6, 6881.0], [73.7, 6887.0], [73.8, 6892.0], [73.9, 6898.0], [74.0, 6902.0], [74.1, 6913.0], [74.2, 6917.0], [74.3, 6927.0], [74.4, 6931.0], [74.5, 6935.0], [74.6, 6941.0], [74.7, 6945.0], [74.8, 6951.0], [74.9, 6962.0], [75.0, 6971.0], [75.1, 6975.0], [75.2, 6983.0], [75.3, 6990.0], [75.4, 7002.0], [75.5, 7012.0], [75.6, 7015.0], [75.7, 7025.0], [75.8, 7031.0], [75.9, 7035.0], [76.0, 7039.0], [76.1, 7041.0], [76.2, 7045.0], [76.3, 7050.0], [76.4, 7056.0], [76.5, 7060.0], [76.6, 7068.0], [76.7, 7076.0], [76.8, 7084.0], [76.9, 7092.0], [77.0, 7103.0], [77.1, 7112.0], [77.2, 7116.0], [77.3, 7124.0], [77.4, 7138.0], [77.5, 7153.0], [77.6, 7165.0], [77.7, 7176.0], [77.8, 7201.0], [77.9, 7228.0], [78.0, 7248.0], [78.1, 7273.0], [78.2, 7296.0], [78.3, 7320.0], [78.4, 7330.0], [78.5, 7340.0], [78.6, 7349.0], [78.7, 7359.0], [78.8, 7368.0], [78.9, 7379.0], [79.0, 7387.0], [79.1, 7400.0], [79.2, 7427.0], [79.3, 7452.0], [79.4, 7530.0], [79.5, 7562.0], [79.6, 7599.0], [79.7, 7684.0], [79.8, 7768.0], [79.9, 7847.0], [80.0, 7896.0], [80.1, 7918.0], [80.2, 7957.0], [80.3, 8007.0], [80.4, 8043.0], [80.5, 8078.0], [80.6, 8107.0], [80.7, 8124.0], [80.8, 8176.0], [80.9, 8195.0], [81.0, 8345.0], [81.1, 8686.0], [81.2, 8911.0], [81.3, 8992.0], [81.4, 9210.0], [81.5, 9304.0], [81.6, 9398.0], [81.7, 9435.0], [81.8, 9487.0], [81.9, 9521.0], [82.0, 9584.0], [82.1, 9643.0], [82.2, 9689.0], [82.3, 9715.0], [82.4, 9781.0], [82.5, 9810.0], [82.6, 9848.0], [82.7, 9878.0], [82.8, 9900.0], [82.9, 9930.0], [83.0, 9989.0], [83.1, 10003.0], [83.2, 10014.0], [83.3, 10026.0], [83.4, 10039.0], [83.5, 10054.0], [83.6, 10089.0], [83.7, 10101.0], [83.8, 10105.0], [83.9, 10113.0], [84.0, 10129.0], [84.1, 10145.0], [84.2, 10173.0], [84.3, 10184.0], [84.4, 10192.0], [84.5, 10201.0], [84.6, 10234.0], [84.7, 10255.0], [84.8, 10288.0], [84.9, 10303.0], [85.0, 10323.0], [85.1, 10347.0], [85.2, 10372.0], [85.3, 10393.0], [85.4, 10400.0], [85.5, 10421.0], [85.6, 10435.0], [85.7, 10464.0], [85.8, 10485.0], [85.9, 10493.0], [86.0, 10515.0], [86.1, 10559.0], [86.2, 10605.0], [86.3, 10618.0], [86.4, 10641.0], [86.5, 10662.0], [86.6, 10683.0], [86.7, 10696.0], [86.8, 10705.0], [86.9, 10714.0], [87.0, 10719.0], [87.1, 10726.0], [87.2, 10734.0], [87.3, 10741.0], [87.4, 10753.0], [87.5, 10761.0], [87.6, 10768.0], [87.7, 10777.0], [87.8, 10785.0], [87.9, 10795.0], [88.0, 10802.0], [88.1, 10809.0], [88.2, 10815.0], [88.3, 10821.0], [88.4, 10834.0], [88.5, 10851.0], [88.6, 10875.0], [88.7, 10899.0], [88.8, 10920.0], [88.9, 10965.0], [89.0, 11054.0], [89.1, 11111.0], [89.2, 11173.0], [89.3, 11229.0], [89.4, 11286.0], [89.5, 11361.0], [89.6, 11399.0], [89.7, 11420.0], [89.8, 11470.0], [89.9, 11493.0], [90.0, 11551.0], [90.1, 11596.0], [90.2, 11616.0], [90.3, 11650.0], [90.4, 11686.0], [90.5, 11730.0], [90.6, 11756.0], [90.7, 11797.0], [90.8, 11811.0], [90.9, 11840.0], [91.0, 11870.0], [91.1, 11889.0], [91.2, 11915.0], [91.3, 11945.0], [91.4, 11988.0], [91.5, 12005.0], [91.6, 12020.0], [91.7, 12047.0], [91.8, 12072.0], [91.9, 12083.0], [92.0, 12099.0], [92.1, 12109.0], [92.2, 12120.0], [92.3, 12125.0], [92.4, 12133.0], [92.5, 12156.0], [92.6, 12167.0], [92.7, 12179.0], [92.8, 12185.0], [92.9, 12190.0], [93.0, 12203.0], [93.1, 12212.0], [93.2, 12220.0], [93.3, 12225.0], [93.4, 12232.0], [93.5, 12241.0], [93.6, 12249.0], [93.7, 12258.0], [93.8, 12264.0], [93.9, 12276.0], [94.0, 12287.0], [94.1, 12297.0], [94.2, 12306.0], [94.3, 12314.0], [94.4, 12319.0], [94.5, 12328.0], [94.6, 12335.0], [94.7, 12348.0], [94.8, 12356.0], [94.9, 12362.0], [95.0, 12376.0], [95.1, 12383.0], [95.2, 12398.0], [95.3, 12411.0], [95.4, 12424.0], [95.5, 12437.0], [95.6, 12447.0], [95.7, 12455.0], [95.8, 12467.0], [95.9, 12475.0], [96.0, 12482.0], [96.1, 12494.0], [96.2, 12504.0], [96.3, 12512.0], [96.4, 12527.0], [96.5, 12544.0], [96.6, 12553.0], [96.7, 12560.0], [96.8, 12572.0], [96.9, 12577.0], [97.0, 12584.0], [97.1, 12601.0], [97.2, 12608.0], [97.3, 12615.0], [97.4, 12625.0], [97.5, 12638.0], [97.6, 12646.0], [97.7, 12655.0], [97.8, 12670.0], [97.9, 12681.0], [98.0, 12694.0], [98.1, 12713.0], [98.2, 12730.0], [98.3, 12739.0], [98.4, 12769.0], [98.5, 12796.0], [98.6, 12828.0], [98.7, 12881.0], [98.8, 12925.0], [98.9, 13021.0], [99.0, 13303.0], [99.1, 13360.0], [99.2, 13483.0], [99.3, 13600.0], [99.4, 13632.0], [99.5, 13684.0], [99.6, 13739.0], [99.7, 13824.0], [99.8, 14081.0], [99.9, 15862.0], [100.0, 16799.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1700.0, "maxY": 590.0, "series": [{"data": [[1700.0, 1.0], [1800.0, 2.0], [2000.0, 1.0], [2300.0, 2.0], [3600.0, 1.0], [3800.0, 4.0], [3900.0, 18.0], [4000.0, 37.0], [4200.0, 57.0], [4300.0, 26.0], [4100.0, 37.0], [4400.0, 29.0], [4500.0, 12.0], [4600.0, 73.0], [4800.0, 146.0], [4700.0, 211.0], [4900.0, 114.0], [5100.0, 171.0], [5000.0, 114.0], [5300.0, 404.0], [5200.0, 252.0], [5500.0, 590.0], [5600.0, 441.0], [5400.0, 566.0], [5800.0, 294.0], [5700.0, 260.0], [6000.0, 273.0], [6100.0, 320.0], [5900.0, 302.0], [6200.0, 500.0], [6300.0, 449.0], [6400.0, 444.0], [6600.0, 338.0], [6500.0, 392.0], [6800.0, 189.0], [6700.0, 326.0], [6900.0, 142.0], [7000.0, 158.0], [7100.0, 83.0], [7200.0, 41.0], [7400.0, 30.0], [7300.0, 88.0], [7500.0, 22.0], [7600.0, 10.0], [7700.0, 12.0], [7900.0, 26.0], [7800.0, 19.0], [8100.0, 36.0], [8000.0, 29.0], [8200.0, 4.0], [8300.0, 5.0], [8500.0, 4.0], [8400.0, 2.0], [8600.0, 3.0], [8700.0, 4.0], [8800.0, 4.0], [8900.0, 12.0], [9000.0, 6.0], [9100.0, 2.0], [9200.0, 11.0], [9300.0, 11.0], [9400.0, 22.0], [9500.0, 18.0], [9600.0, 23.0], [9700.0, 23.0], [9800.0, 31.0], [9900.0, 30.0], [10000.0, 61.0], [10200.0, 42.0], [10100.0, 77.0], [10300.0, 52.0], [10400.0, 53.0], [10500.0, 26.0], [10700.0, 123.0], [10600.0, 55.0], [10900.0, 23.0], [10800.0, 74.0], [11000.0, 14.0], [11100.0, 18.0], [11200.0, 17.0], [11300.0, 18.0], [11400.0, 32.0], [11500.0, 20.0], [11700.0, 31.0], [11600.0, 30.0], [11800.0, 45.0], [12000.0, 54.0], [11900.0, 28.0], [12100.0, 97.0], [12200.0, 116.0], [12400.0, 98.0], [12500.0, 90.0], [12600.0, 96.0], [12300.0, 107.0], [12700.0, 46.0], [12900.0, 12.0], [12800.0, 25.0], [13000.0, 7.0], [13200.0, 5.0], [13300.0, 14.0], [13400.0, 8.0], [13600.0, 23.0], [13700.0, 16.0], [13800.0, 9.0], [13500.0, 8.0], [13900.0, 2.0], [14000.0, 2.0], [15200.0, 3.0], [15300.0, 3.0], [15600.0, 1.0], [15800.0, 2.0], [16100.0, 4.0], [16300.0, 1.0], [16400.0, 3.0], [16500.0, 1.0], [16700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 893.8851564140252, "minX": 1.61787612E12, "maxY": 999.1878938323467, "series": [{"data": [[1.61787612E12, 999.1878938323467], [1.61787618E12, 893.8851564140252]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787618E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2029.0, "minX": 1.0, "maxY": 7346.0, "series": [{"data": [[3.0, 5888.5], [6.0, 5819.0], [7.0, 5690.0], [8.0, 6167.0], [11.0, 6347.666666666667], [12.0, 6153.0], [14.0, 6051.0], [15.0, 5235.0], [16.0, 6056.0], [17.0, 5640.0], [18.0, 6477.0], [19.0, 6340.0], [20.0, 6092.0], [22.0, 6147.0], [23.0, 6323.0], [24.0, 6372.0], [25.0, 6150.0], [26.0, 6130.0], [27.0, 6307.0], [28.0, 6346.0], [29.0, 6650.0], [30.0, 6327.0], [31.0, 6156.0], [33.0, 6122.0], [32.0, 6060.0], [35.0, 6396.0], [34.0, 6400.0], [37.0, 6588.0], [36.0, 6606.0], [39.0, 6496.5], [41.0, 6444.0], [40.0, 6353.0], [43.0, 6518.0], [42.0, 6502.0], [44.0, 6597.0], [49.0, 6574.8], [61.0, 6518.5], [63.0, 6372.5], [62.0, 6572.5], [64.0, 6349.285714285714], [71.0, 5548.0], [70.0, 6589.0], [69.0, 6453.4], [72.0, 6613.0], [79.0, 6254.0], [78.0, 6456.666666666667], [83.0, 5549.0], [82.0, 6588.0], [81.0, 5986.5], [87.0, 5492.0], [86.0, 5495.0], [85.0, 6333.0], [84.0, 5815.0], [91.0, 5485.0], [90.0, 5486.0], [89.0, 5504.0], [88.0, 6188.0], [94.0, 5478.0], [93.0, 5505.0], [92.0, 5483.0], [99.0, 6168.0], [98.0, 6289.0], [97.0, 5998.333333333333], [103.0, 5495.0], [102.0, 5835.0], [107.0, 6283.0], [106.0, 6314.0], [105.0, 5959.0], [104.0, 5705.0], [111.0, 5814.0], [110.0, 6276.0], [109.0, 6508.0], [108.0, 6010.0], [115.0, 6293.0], [114.0, 6194.0], [113.0, 6286.5], [119.0, 6375.0], [118.0, 6346.0], [117.0, 6253.0], [116.0, 6266.0], [123.0, 6261.0], [122.0, 6211.0], [121.0, 6183.0], [120.0, 6480.0], [127.0, 6236.0], [126.0, 6434.0], [125.0, 6211.0], [124.0, 6220.0], [135.0, 6253.0], [134.0, 6231.0], [133.0, 6140.0], [132.0, 6263.0], [131.0, 6219.0], [130.0, 6367.0], [129.0, 6371.0], [128.0, 6190.0], [143.0, 6176.0], [142.0, 6441.0], [141.0, 6238.0], [138.0, 6257.0], [136.0, 6224.0], [151.0, 6366.0], [150.0, 6349.0], [149.0, 6188.0], [148.0, 6286.0], [147.0, 6317.0], [146.0, 6363.0], [145.0, 6368.0], [144.0, 6248.0], [159.0, 6441.0], [158.0, 6292.0], [157.0, 6312.0], [156.0, 6337.0], [155.0, 6300.0], [153.0, 6352.0], [152.0, 6278.0], [167.0, 6303.0], [166.0, 6269.0], [165.0, 6581.0], [164.0, 6267.0], [163.0, 6323.0], [162.0, 6365.0], [161.0, 6290.0], [160.0, 6322.0], [175.0, 6361.0], [174.0, 6350.0], [173.0, 6306.0], [172.0, 6287.0], [171.0, 6311.0], [170.0, 6267.0], [169.0, 6304.0], [168.0, 6331.0], [183.0, 6339.0], [182.0, 6367.0], [181.0, 6445.0], [180.0, 6279.0], [179.0, 6282.0], [178.0, 6334.0], [177.0, 6301.0], [176.0, 6320.0], [191.0, 6331.0], [190.0, 6362.0], [189.0, 6329.0], [188.0, 6284.0], [187.0, 6315.0], [186.0, 6323.5], [184.0, 6332.0], [199.0, 6258.0], [198.0, 6347.0], [197.0, 6259.0], [196.0, 6585.0], [195.0, 6286.0], [194.0, 6267.0], [193.0, 6348.0], [192.0, 6380.0], [207.0, 6369.0], [206.0, 6245.0], [205.0, 6344.0], [204.0, 6326.0], [203.0, 6278.0], [202.0, 6332.0], [201.0, 6381.0], [200.0, 6276.0], [215.0, 6333.0], [214.0, 6353.0], [213.0, 6253.0], [212.0, 6416.0], [211.0, 6456.0], [210.0, 6268.0], [209.0, 6426.0], [208.0, 6453.0], [223.0, 6543.0], [222.0, 6492.0], [221.0, 6511.0], [220.0, 6350.0], [219.0, 6405.0], [218.0, 6314.0], [217.0, 6505.0], [216.0, 6354.0], [231.0, 6386.0], [230.0, 6368.0], [229.0, 6377.0], [227.0, 6409.666666666667], [224.0, 6300.0], [239.0, 6384.0], [237.0, 6357.0], [236.0, 6426.5], [234.0, 6373.0], [233.0, 6385.0], [232.0, 6406.0], [247.0, 6458.0], [246.0, 6393.5], [244.0, 6315.5], [242.0, 6171.0], [241.0, 6304.0], [240.0, 6366.0], [255.0, 6153.0], [254.0, 6376.0], [253.0, 6432.0], [251.0, 6462.0], [250.0, 6414.0], [249.0, 6403.0], [248.0, 6190.0], [264.0, 6268.75], [260.0, 6326.0], [259.0, 6349.0], [258.0, 6157.0], [257.0, 6270.0], [287.0, 6242.5], [286.0, 6211.0], [285.0, 6143.0], [284.0, 6264.333333333333], [283.0, 6326.0], [282.0, 6371.0], [281.0, 6094.0], [291.0, 6366.0], [301.0, 6245.0], [300.0, 6436.0], [299.0, 6285.666666666667], [298.0, 6261.333333333333], [296.0, 6246.8], [292.0, 6164.5], [288.0, 6232.0], [290.0, 6185.0], [289.0, 6130.0], [316.0, 6390.0], [318.0, 6537.0], [319.0, 6390.0], [317.0, 6481.0], [313.0, 6445.666666666667], [311.0, 6410.0], [304.0, 6439.5], [307.0, 6310.666666666667], [306.0, 6284.0], [312.0, 6410.0], [309.0, 6383.0], [308.0, 6458.0], [334.0, 6258.0], [335.0, 6224.0], [333.0, 6348.0], [332.0, 6457.0], [331.0, 6462.0], [330.0, 6438.5], [328.0, 6469.0], [327.0, 6483.0], [321.0, 6387.0], [320.0, 6459.0], [323.0, 6409.0], [322.0, 6582.0], [326.0, 6525.0], [325.0, 6394.0], [324.0, 6534.0], [339.0, 6297.0], [351.0, 6105.5], [350.0, 6422.0], [345.0, 6303.0], [344.0, 6232.0], [343.0, 6209.0], [342.0, 6470.0], [341.0, 6132.0], [340.0, 6143.0], [338.0, 6314.0], [337.0, 6382.0], [336.0, 6398.0], [367.0, 6144.5], [366.0, 6272.0], [365.0, 6124.5], [363.0, 6293.0], [352.0, 6110.75], [381.0, 6138.333333333333], [379.0, 5977.0], [377.0, 6137.333333333333], [375.0, 5965.0], [373.0, 5963.0], [369.0, 6018.0], [398.0, 6374.5], [390.0, 4760.666666666667], [399.0, 6542.0], [397.0, 6467.5], [395.0, 6334.0], [393.0, 6260.333333333333], [392.0, 6504.0], [389.0, 6405.0], [387.0, 6138.5], [386.0, 6307.0], [415.0, 5968.0], [412.0, 6216.0], [403.0, 6322.333333333333], [401.0, 6334.5], [400.0, 6494.0], [411.0, 6362.0], [410.0, 6241.0], [409.0, 6238.0], [408.0, 6272.0], [407.0, 6352.0], [405.0, 6432.0], [404.0, 6377.0], [428.0, 6016.75], [419.0, 3947.5], [417.0, 6211.75], [431.0, 6033.0], [430.0, 6031.0], [429.0, 6035.0], [426.0, 6037.0], [423.0, 6144.0], [422.0, 5907.0], [421.0, 6265.0], [420.0, 5981.5], [445.0, 5946.0], [437.0, 3973.0], [436.0, 5964.0], [446.0, 6053.0], [444.0, 5946.0], [435.0, 5958.0], [434.0, 6139.0], [433.0, 5982.0], [432.0, 6681.0], [443.0, 6157.0], [442.0, 5951.0], [441.0, 6273.0], [440.0, 6113.0], [439.0, 5960.0], [462.0, 6073.0], [455.0, 2029.0], [449.0, 6074.0], [448.0, 6144.5], [451.0, 6074.0], [450.0, 6084.0], [463.0, 6054.0], [461.0, 6094.0], [460.0, 6157.0], [459.0, 6623.0], [458.0, 6141.0], [457.0, 6059.0], [454.0, 6183.0], [453.0, 6027.0], [452.0, 6158.0], [478.0, 6254.0], [479.0, 6323.0], [477.0, 6130.0], [476.0, 6133.0], [475.0, 6150.0], [474.0, 6012.0], [473.0, 6161.5], [471.0, 6298.5], [467.0, 6201.0], [466.0, 6593.0], [465.0, 6286.0], [469.0, 6111.5], [495.0, 6076.0], [492.0, 6051.0], [490.0, 6260.0], [488.0, 6221.666666666667], [482.0, 6110.0], [481.0, 6159.0], [480.0, 6011.0], [510.0, 6358.0], [511.0, 6318.0], [509.0, 6275.0], [508.0, 6443.0], [507.0, 6442.0], [506.0, 6265.0], [505.0, 6451.0], [504.0, 6278.0], [503.0, 6300.0], [499.0, 6218.666666666667], [497.0, 6219.333333333333], [496.0, 6090.0], [501.0, 6381.0], [542.0, 6175.0], [530.0, 5346.875], [540.0, 6217.0], [538.0, 6272.0], [536.0, 6375.0], [526.0, 6422.0], [512.0, 6308.0], [514.0, 6315.0], [513.0, 6311.0], [516.0, 6321.0], [515.0, 6364.0], [518.0, 6298.0], [517.0, 6454.0], [519.0, 6408.0], [535.0, 6419.0], [533.0, 6586.0], [532.0, 6345.2], [528.0, 6612.0], [572.0, 6531.0], [575.0, 6434.666666666667], [571.0, 6552.0], [569.0, 6368.0], [568.0, 6277.0], [551.0, 6279.0], [549.0, 6196.0], [548.0, 6481.666666666667], [546.0, 6263.333333333333], [544.0, 6264.5], [558.0, 6320.0], [557.0, 6395.0], [556.0, 6209.0], [555.0, 6323.0], [554.0, 6194.0], [553.0, 6234.0], [552.0, 6609.0], [567.0, 6574.0], [566.0, 6230.0], [563.0, 6312.333333333333], [560.0, 6396.0], [594.0, 7224.0], [607.0, 6436.0], [606.0, 6419.0], [583.0, 6383.0], [582.0, 6378.0], [581.0, 6480.0], [580.0, 6304.5], [576.0, 6331.0], [597.0, 6464.0], [596.0, 6648.0], [595.0, 6496.0], [593.0, 6558.0], [592.0, 6648.0], [591.0, 6456.0], [590.0, 6480.0], [589.0, 7256.0], [588.0, 6594.0], [587.0, 6488.0], [586.0, 6489.0], [585.0, 6314.0], [584.0, 6497.0], [627.0, 6670.25], [638.0, 6423.0], [639.0, 6423.0], [626.0, 6496.75], [624.0, 6428.0], [637.0, 6496.0], [636.0, 6887.0], [634.0, 6500.333333333333], [615.0, 6449.0], [609.0, 6588.0], [623.0, 7345.0], [622.0, 6475.333333333333], [621.0, 6802.0], [618.0, 6644.0], [617.0, 6747.333333333333], [631.0, 6554.75], [629.0, 7155.0], [628.0, 6517.0], [665.0, 7042.0], [670.0, 7063.0], [671.0, 7050.0], [656.0, 6797.0], [658.0, 6794.0], [657.0, 7058.0], [660.0, 7078.0], [659.0, 6589.0], [669.0, 7057.0], [668.0, 7060.5], [666.0, 6776.0], [664.0, 6881.5], [647.0, 6693.0], [645.0, 7169.0], [644.0, 6726.0], [643.0, 6432.0], [642.0, 6887.0], [641.0, 7346.0], [640.0, 6443.0], [655.0, 6651.0], [654.0, 6851.0], [653.0, 7113.0], [652.0, 7141.0], [651.0, 6853.0], [650.0, 6646.0], [649.0, 6754.666666666667], [648.0, 6668.0], [662.0, 7077.0], [661.0, 7054.0], [696.0, 6004.0], [700.0, 6163.0], [703.0, 6161.333333333333], [699.0, 5928.0], [698.0, 6440.0], [697.0, 6405.0], [686.0, 6530.0], [672.0, 7057.0], [675.0, 7052.0], [674.0, 7055.0], [677.0, 7040.0], [676.0, 7011.0], [679.0, 6951.0], [678.0, 6998.0], [685.0, 6054.0], [684.0, 6263.0], [683.0, 6532.0], [682.0, 6632.0], [681.0, 6624.0], [680.0, 6631.0], [695.0, 6407.5], [694.0, 6585.0], [693.0, 6483.0], [692.0, 6253.0], [734.0, 6327.0], [735.0, 5960.0], [733.0, 6165.666666666667], [730.0, 6350.0], [728.0, 6212.0], [711.0, 6033.666666666667], [708.0, 6099.0], [707.0, 5939.0], [706.0, 5919.0], [705.0, 5975.0], [704.0, 5960.0], [725.0, 6334.0], [724.0, 6078.0], [722.0, 6171.666666666667], [719.0, 6116.666666666667], [716.0, 6361.0], [715.0, 6379.0], [714.0, 6357.0], [713.0, 6096.5], [762.0, 6250.0], [764.0, 6449.0], [767.0, 6285.833333333333], [763.0, 6348.333333333333], [761.0, 6268.0], [743.0, 6384.333333333333], [740.0, 6325.0], [739.0, 6508.0], [738.0, 6317.0], [737.0, 6337.0], [736.0, 6349.0], [759.0, 6360.5], [753.0, 6384.0], [749.0, 6302.0], [748.0, 6313.0], [747.0, 6289.0], [746.0, 6317.0], [745.0, 6422.0], [796.0, 6222.0], [778.0, 3651.0], [777.0, 6435.0], [776.0, 6432.0], [781.0, 6362.75], [783.0, 6274.0], [769.0, 6284.0], [768.0, 6282.0], [775.0, 6442.0], [774.0, 6418.2], [782.0, 6277.0], [799.0, 6212.0], [787.0, 6268.0], [786.0, 6263.0], [789.0, 6267.0], [788.0, 6042.0], [791.0, 6262.0], [790.0, 6062.0], [798.0, 6066.0], [797.0, 6044.0], [795.0, 5989.0], [794.0, 6232.0], [793.0, 6058.0], [792.0, 6059.0], [826.0, 6065.0], [830.0, 6364.0], [831.0, 6292.0], [817.0, 6079.0], [816.0, 6077.0], [819.0, 6071.0], [818.0, 6061.0], [821.0, 6064.0], [820.0, 6064.0], [829.0, 6855.0], [828.0, 6052.0], [827.0, 6042.0], [825.0, 6061.0], [807.0, 6134.0], [806.0, 6106.0], [805.0, 6138.0], [804.0, 5897.0], [803.0, 6231.0], [802.0, 6020.0], [800.0, 6036.0], [815.0, 6081.0], [814.0, 6069.0], [813.0, 6093.0], [812.0, 6106.5], [810.0, 6131.0], [809.0, 6127.5], [823.0, 6063.0], [822.0, 6060.0], [857.0, 6150.0], [862.0, 6023.5], [863.0, 5888.0], [849.0, 5889.0], [851.0, 6092.0], [850.0, 6036.0], [853.0, 6063.0], [852.0, 6002.0], [860.0, 5759.0], [859.0, 5983.0], [858.0, 6006.0], [856.0, 6039.0], [839.0, 5711.0], [838.0, 5994.0], [837.0, 5683.0], [836.0, 5963.0], [835.0, 6102.0], [834.0, 6215.0], [833.0, 6198.0], [832.0, 5808.0], [847.0, 6041.0], [846.0, 6068.0], [845.0, 5977.0], [844.0, 5922.0], [843.0, 5692.0], [842.0, 5608.0], [841.0, 5604.0], [840.0, 6277.0], [855.0, 6172.0], [854.0, 6067.0], [870.0, 5863.0], [893.0, 5561.0], [895.0, 4799.0], [891.0, 5461.0], [888.0, 5592.0], [887.0, 5545.0], [882.0, 5755.0], [881.0, 5699.0], [880.0, 5544.0], [879.0, 5788.0], [865.0, 5812.0], [864.0, 5857.0], [867.0, 5874.0], [866.0, 5907.0], [869.0, 5887.0], [868.0, 5970.0], [871.0, 5663.0], [878.0, 5447.0], [877.0, 5807.0], [876.0, 5937.0], [875.0, 5806.0], [874.0, 5644.0], [873.0, 5822.0], [872.0, 5947.0], [902.0, 5932.0], [927.0, 5525.25], [903.0, 4932.0], [901.0, 5699.0], [900.0, 5649.0], [899.0, 5808.5], [898.0, 5530.0], [897.0, 5540.0], [896.0, 5527.75], [911.0, 5532.0], [910.0, 5500.0], [909.0, 5538.0], [908.0, 5540.0], [907.0, 5549.0], [906.0, 5574.0], [905.0, 5505.0], [904.0, 5495.0], [917.0, 4214.0], [920.0, 4286.0], [925.0, 5152.5], [923.0, 5694.2], [914.0, 5474.0], [913.0, 5873.0], [912.0, 5479.0], [957.0, 5383.5], [942.0, 5513.75], [940.0, 5658.0], [939.0, 5690.0], [938.0, 5540.0], [937.0, 5689.6], [936.0, 5704.545454545454], [943.0, 5938.0], [934.0, 5761.0], [933.0, 5705.5], [946.0, 5449.666666666667], [945.0, 5853.0], [944.0, 5921.666666666667], [947.0, 5938.0], [949.0, 5913.2], [948.0, 5901.0], [951.0, 5579.5], [950.0, 5745.6], [954.0, 5125.0], [959.0, 5281.0], [958.0, 5226.0], [956.0, 5355.5], [955.0, 5378.0], [953.0, 5377.5], [952.0, 5472.5], [988.0, 5371.037037037037], [961.0, 5175.0], [960.0, 5446.0], [962.0, 5382.75], [965.0, 5407.5], [963.0, 5414.0], [967.0, 5369.666666666667], [966.0, 5402.0], [973.0, 5310.0], [971.0, 5397.0], [970.0, 5393.0], [969.0, 5360.333333333333], [991.0, 5427.91891891892], [976.0, 5185.0], [981.0, 5397.0], [977.0, 5345.25], [983.0, 5157.905263157895], [982.0, 5325.4], [990.0, 5400.333333333333], [989.0, 5401.055555555556], [987.0, 5400.333333333333], [986.0, 5367.000000000001], [985.0, 5415.8], [984.0, 5352.857142857142], [1000.0, 7270.759360232625], [999.0, 5081.6785714285725], [998.0, 5106.636363636364], [997.0, 5046.714285714285], [996.0, 5188.820754716982], [995.0, 5275.0], [994.0, 5241.545454545454], [993.0, 5236.346938775511], [992.0, 5359.704918032786], [1.0, 5908.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[949.0322000000031, 7010.495199999979]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9764.15, "minX": 1.61787612E12, "maxY": 21541.316666666666, "series": [{"data": [[1.61787612E12, 21541.316666666666], [1.61787618E12, 19592.916666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61787612E12, 10735.85], [1.61787618E12, 9764.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787618E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5706.504933865205, "minX": 1.61787612E12, "maxY": 8196.46152377312, "series": [{"data": [[1.61787612E12, 8196.46152377312], [1.61787618E12, 5706.504933865205]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787618E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5695.067814402683, "minX": 1.61787612E12, "maxY": 8181.713958373157, "series": [{"data": [[1.61787612E12, 8181.713958373157], [1.61787618E12, 5695.067814402683]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787618E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5242494226327952, "minX": 1.61787612E12, "maxY": 1.832155814397557, "series": [{"data": [[1.61787612E12, 1.832155814397557], [1.61787618E12, 0.5242494226327952]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787618E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1700.0, "minX": 1.61787612E12, "maxY": 16799.0, "series": [{"data": [[1.61787612E12, 16799.0], [1.61787618E12, 7346.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61787612E12, 12355.2], [1.61787618E12, 6531.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61787612E12, 13666.48], [1.61787618E12, 7057.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61787612E12, 12625.0], [1.61787618E12, 6710.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61787612E12, 1700.0], [1.61787618E12, 3813.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61787612E12, 6804.0], [1.61787618E12, 5598.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787618E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1844.5, "minX": 2.0, "maxY": 15326.0, "series": [{"data": [[2.0, 3001.5], [4.0, 1844.5], [8.0, 6061.0], [10.0, 15326.0], [20.0, 8362.0], [23.0, 8192.0], [29.0, 7546.0], [37.0, 9626.5], [40.0, 4435.0], [44.0, 10643.0], [46.0, 6882.0], [49.0, 12189.0], [48.0, 6456.5], [53.0, 12304.0], [56.0, 6185.5], [61.0, 12971.0], [62.0, 5058.5], [64.0, 5347.5], [67.0, 5335.0], [69.0, 11875.0], [74.0, 13546.5], [77.0, 7802.0], [78.0, 6036.0], [80.0, 11666.5], [81.0, 5474.0], [86.0, 5758.5], [91.0, 5565.0], [88.0, 6108.0], [97.0, 6353.0], [100.0, 6675.0], [104.0, 6697.5], [108.0, 12227.5], [109.0, 8194.0], [110.0, 6898.0], [113.0, 6681.0], [122.0, 5584.0], [132.0, 12378.0], [137.0, 5698.0], [142.0, 6271.0], [146.0, 6986.5], [149.0, 6407.0], [162.0, 6472.5], [172.0, 6973.5], [174.0, 6569.0], [179.0, 12330.0], [176.0, 6731.0], [183.0, 6691.0], [180.0, 4207.0], [190.0, 12608.0], [191.0, 6572.0], [194.0, 10851.5], [198.0, 5032.5], [208.0, 5459.5], [241.0, 10622.0], [240.0, 6329.0], [269.0, 10093.0], [280.0, 5472.0], [272.0, 4781.5], [275.0, 5436.0], [293.0, 5804.0], [303.0, 6134.0], [296.0, 5370.0], [329.0, 5534.0], [350.0, 6077.0], [347.0, 6295.0], [342.0, 6319.5], [374.0, 5271.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 374.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1749.5, "minX": 2.0, "maxY": 15315.5, "series": [{"data": [[2.0, 3001.5], [4.0, 1749.5], [8.0, 6056.5], [10.0, 15315.5], [20.0, 8345.0], [23.0, 8181.0], [29.0, 7534.0], [37.0, 9585.0], [40.0, 4430.5], [44.0, 10621.0], [46.0, 6874.5], [49.0, 12131.0], [48.0, 6413.0], [53.0, 12304.0], [56.0, 6170.0], [61.0, 12944.0], [62.0, 5054.0], [64.0, 5330.0], [67.0, 5335.0], [69.0, 11849.0], [74.0, 13531.5], [77.0, 7769.0], [78.0, 6004.0], [80.0, 11629.0], [81.0, 5474.0], [86.0, 5751.0], [91.0, 5563.0], [88.0, 6104.5], [97.0, 6348.0], [100.0, 6673.0], [104.0, 6667.0], [108.0, 12205.5], [109.0, 8185.0], [110.0, 6898.0], [113.0, 6680.0], [122.0, 5568.0], [132.0, 12364.0], [137.0, 5696.0], [142.0, 6266.0], [146.0, 6966.5], [149.0, 6393.0], [162.0, 6438.0], [172.0, 6967.5], [174.0, 6566.0], [179.0, 12309.0], [176.0, 6729.0], [183.0, 6681.0], [180.0, 4200.0], [190.0, 12599.0], [191.0, 6546.0], [194.0, 10823.0], [198.0, 5023.5], [208.0, 5448.0], [241.0, 10615.0], [240.0, 6309.5], [269.0, 10070.0], [280.0, 5462.0], [272.0, 4771.0], [275.0, 5432.0], [293.0, 5798.0], [303.0, 6129.0], [296.0, 5359.0], [329.0, 5530.0], [350.0, 6060.0], [347.0, 6292.0], [342.0, 6310.0], [374.0, 5262.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 374.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 62.71666666666667, "minX": 1.61787612E12, "maxY": 103.95, "series": [{"data": [[1.61787612E12, 103.95], [1.61787618E12, 62.71666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787618E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 79.38333333333334, "minX": 1.61787612E12, "maxY": 87.28333333333333, "series": [{"data": [[1.61787612E12, 87.28333333333333], [1.61787618E12, 79.38333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787618E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 79.38333333333334, "minX": 1.61787612E12, "maxY": 87.28333333333333, "series": [{"data": [[1.61787612E12, 87.28333333333333], [1.61787618E12, 79.38333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787618E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 79.38333333333334, "minX": 1.61787612E12, "maxY": 87.28333333333333, "series": [{"data": [[1.61787612E12, 87.28333333333333], [1.61787618E12, 79.38333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787618E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

