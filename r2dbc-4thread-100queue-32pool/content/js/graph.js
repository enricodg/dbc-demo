/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 379.0, "minX": 0.0, "maxY": 17046.0, "series": [{"data": [[0.0, 379.0], [0.1, 3390.0], [0.2, 3781.0], [0.3, 3840.0], [0.4, 3899.0], [0.5, 3908.0], [0.6, 3913.0], [0.7, 3922.0], [0.8, 3936.0], [0.9, 3979.0], [1.0, 3994.0], [1.1, 4003.0], [1.2, 4018.0], [1.3, 4032.0], [1.4, 4063.0], [1.5, 4085.0], [1.6, 4107.0], [1.7, 4125.0], [1.8, 4145.0], [1.9, 4173.0], [2.0, 4181.0], [2.1, 4187.0], [2.2, 4198.0], [2.3, 4215.0], [2.4, 4223.0], [2.5, 4236.0], [2.6, 4248.0], [2.7, 4254.0], [2.8, 4263.0], [2.9, 4280.0], [3.0, 4292.0], [3.1, 4314.0], [3.2, 4321.0], [3.3, 4328.0], [3.4, 4338.0], [3.5, 4345.0], [3.6, 4350.0], [3.7, 4355.0], [3.8, 4370.0], [3.9, 4377.0], [4.0, 4384.0], [4.1, 4388.0], [4.2, 4391.0], [4.3, 4397.0], [4.4, 4401.0], [4.5, 4405.0], [4.6, 4407.0], [4.7, 4410.0], [4.8, 4414.0], [4.9, 4417.0], [5.0, 4422.0], [5.1, 4427.0], [5.2, 4432.0], [5.3, 4441.0], [5.4, 4450.0], [5.5, 4454.0], [5.6, 4458.0], [5.7, 4461.0], [5.8, 4464.0], [5.9, 4467.0], [6.0, 4472.0], [6.1, 4475.0], [6.2, 4481.0], [6.3, 4484.0], [6.4, 4488.0], [6.5, 4492.0], [6.6, 4494.0], [6.7, 4497.0], [6.8, 4500.0], [6.9, 4504.0], [7.0, 4507.0], [7.1, 4510.0], [7.2, 4516.0], [7.3, 4519.0], [7.4, 4523.0], [7.5, 4528.0], [7.6, 4530.0], [7.7, 4539.0], [7.8, 4547.0], [7.9, 4552.0], [8.0, 4556.0], [8.1, 4560.0], [8.2, 4563.0], [8.3, 4566.0], [8.4, 4570.0], [8.5, 4573.0], [8.6, 4577.0], [8.7, 4581.0], [8.8, 4584.0], [8.9, 4585.0], [9.0, 4590.0], [9.1, 4596.0], [9.2, 4603.0], [9.3, 4606.0], [9.4, 4611.0], [9.5, 4616.0], [9.6, 4620.0], [9.7, 4623.0], [9.8, 4627.0], [9.9, 4631.0], [10.0, 4637.0], [10.1, 4644.0], [10.2, 4648.0], [10.3, 4653.0], [10.4, 4657.0], [10.5, 4663.0], [10.6, 4669.0], [10.7, 4672.0], [10.8, 4680.0], [10.9, 4684.0], [11.0, 4691.0], [11.1, 4697.0], [11.2, 4698.0], [11.3, 4703.0], [11.4, 4707.0], [11.5, 4714.0], [11.6, 4721.0], [11.7, 4725.0], [11.8, 4728.0], [11.9, 4732.0], [12.0, 4737.0], [12.1, 4743.0], [12.2, 4751.0], [12.3, 4757.0], [12.4, 4763.0], [12.5, 4768.0], [12.6, 4773.0], [12.7, 4776.0], [12.8, 4783.0], [12.9, 4785.0], [13.0, 4789.0], [13.1, 4792.0], [13.2, 4797.0], [13.3, 4801.0], [13.4, 4807.0], [13.5, 4815.0], [13.6, 4822.0], [13.7, 4826.0], [13.8, 4829.0], [13.9, 4833.0], [14.0, 4840.0], [14.1, 4848.0], [14.2, 4858.0], [14.3, 4868.0], [14.4, 4879.0], [14.5, 4887.0], [14.6, 4890.0], [14.7, 4894.0], [14.8, 4900.0], [14.9, 4905.0], [15.0, 4911.0], [15.1, 4916.0], [15.2, 4922.0], [15.3, 4927.0], [15.4, 4935.0], [15.5, 4940.0], [15.6, 4945.0], [15.7, 4947.0], [15.8, 4954.0], [15.9, 4964.0], [16.0, 4974.0], [16.1, 4988.0], [16.2, 4998.0], [16.3, 5004.0], [16.4, 5008.0], [16.5, 5010.0], [16.6, 5013.0], [16.7, 5016.0], [16.8, 5021.0], [16.9, 5025.0], [17.0, 5029.0], [17.1, 5035.0], [17.2, 5042.0], [17.3, 5051.0], [17.4, 5058.0], [17.5, 5061.0], [17.6, 5063.0], [17.7, 5066.0], [17.8, 5071.0], [17.9, 5077.0], [18.0, 5084.0], [18.1, 5089.0], [18.2, 5095.0], [18.3, 5102.0], [18.4, 5110.0], [18.5, 5113.0], [18.6, 5118.0], [18.7, 5119.0], [18.8, 5121.0], [18.9, 5124.0], [19.0, 5126.0], [19.1, 5132.0], [19.2, 5134.0], [19.3, 5139.0], [19.4, 5144.0], [19.5, 5147.0], [19.6, 5153.0], [19.7, 5161.0], [19.8, 5168.0], [19.9, 5173.0], [20.0, 5178.0], [20.1, 5183.0], [20.2, 5189.0], [20.3, 5192.0], [20.4, 5195.0], [20.5, 5197.0], [20.6, 5200.0], [20.7, 5204.0], [20.8, 5206.0], [20.9, 5208.0], [21.0, 5212.0], [21.1, 5216.0], [21.2, 5219.0], [21.3, 5222.0], [21.4, 5226.0], [21.5, 5230.0], [21.6, 5247.0], [21.7, 5253.0], [21.8, 5259.0], [21.9, 5266.0], [22.0, 5271.0], [22.1, 5276.0], [22.2, 5284.0], [22.3, 5289.0], [22.4, 5297.0], [22.5, 5306.0], [22.6, 5313.0], [22.7, 5316.0], [22.8, 5322.0], [22.9, 5324.0], [23.0, 5331.0], [23.1, 5338.0], [23.2, 5345.0], [23.3, 5352.0], [23.4, 5359.0], [23.5, 5363.0], [23.6, 5367.0], [23.7, 5380.0], [23.8, 5386.0], [23.9, 5392.0], [24.0, 5394.0], [24.1, 5398.0], [24.2, 5400.0], [24.3, 5402.0], [24.4, 5405.0], [24.5, 5408.0], [24.6, 5410.0], [24.7, 5414.0], [24.8, 5419.0], [24.9, 5421.0], [25.0, 5426.0], [25.1, 5430.0], [25.2, 5433.0], [25.3, 5434.0], [25.4, 5441.0], [25.5, 5446.0], [25.6, 5454.0], [25.7, 5460.0], [25.8, 5467.0], [25.9, 5471.0], [26.0, 5474.0], [26.1, 5476.0], [26.2, 5480.0], [26.3, 5485.0], [26.4, 5487.0], [26.5, 5491.0], [26.6, 5494.0], [26.7, 5499.0], [26.8, 5506.0], [26.9, 5514.0], [27.0, 5519.0], [27.1, 5522.0], [27.2, 5528.0], [27.3, 5545.0], [27.4, 5548.0], [27.5, 5560.0], [27.6, 5568.0], [27.7, 5572.0], [27.8, 5576.0], [27.9, 5579.0], [28.0, 5582.0], [28.1, 5586.0], [28.2, 5596.0], [28.3, 5605.0], [28.4, 5609.0], [28.5, 5612.0], [28.6, 5619.0], [28.7, 5626.0], [28.8, 5631.0], [28.9, 5637.0], [29.0, 5646.0], [29.1, 5661.0], [29.2, 5668.0], [29.3, 5677.0], [29.4, 5684.0], [29.5, 5692.0], [29.6, 5697.0], [29.7, 5703.0], [29.8, 5707.0], [29.9, 5711.0], [30.0, 5714.0], [30.1, 5719.0], [30.2, 5723.0], [30.3, 5726.0], [30.4, 5729.0], [30.5, 5735.0], [30.6, 5745.0], [30.7, 5762.0], [30.8, 5768.0], [30.9, 5773.0], [31.0, 5776.0], [31.1, 5780.0], [31.2, 5787.0], [31.3, 5792.0], [31.4, 5797.0], [31.5, 5800.0], [31.6, 5805.0], [31.7, 5809.0], [31.8, 5811.0], [31.9, 5813.0], [32.0, 5815.0], [32.1, 5816.0], [32.2, 5819.0], [32.3, 5821.0], [32.4, 5823.0], [32.5, 5824.0], [32.6, 5826.0], [32.7, 5829.0], [32.8, 5833.0], [32.9, 5836.0], [33.0, 5847.0], [33.1, 5853.0], [33.2, 5858.0], [33.3, 5865.0], [33.4, 5868.0], [33.5, 5874.0], [33.6, 5878.0], [33.7, 5882.0], [33.8, 5888.0], [33.9, 5892.0], [34.0, 5897.0], [34.1, 5902.0], [34.2, 5904.0], [34.3, 5907.0], [34.4, 5909.0], [34.5, 5915.0], [34.6, 5919.0], [34.7, 5925.0], [34.8, 5930.0], [34.9, 5936.0], [35.0, 5939.0], [35.1, 5945.0], [35.2, 5952.0], [35.3, 5958.0], [35.4, 5962.0], [35.5, 5965.0], [35.6, 5968.0], [35.7, 5972.0], [35.8, 5978.0], [35.9, 5982.0], [36.0, 5987.0], [36.1, 5989.0], [36.2, 5992.0], [36.3, 5994.0], [36.4, 5999.0], [36.5, 6002.0], [36.6, 6005.0], [36.7, 6008.0], [36.8, 6010.0], [36.9, 6014.0], [37.0, 6015.0], [37.1, 6017.0], [37.2, 6019.0], [37.3, 6021.0], [37.4, 6023.0], [37.5, 6023.0], [37.6, 6025.0], [37.7, 6027.0], [37.8, 6028.0], [37.9, 6031.0], [38.0, 6032.0], [38.1, 6034.0], [38.2, 6038.0], [38.3, 6040.0], [38.4, 6042.0], [38.5, 6047.0], [38.6, 6052.0], [38.7, 6056.0], [38.8, 6058.0], [38.9, 6061.0], [39.0, 6064.0], [39.1, 6066.0], [39.2, 6069.0], [39.3, 6071.0], [39.4, 6072.0], [39.5, 6073.0], [39.6, 6076.0], [39.7, 6078.0], [39.8, 6080.0], [39.9, 6081.0], [40.0, 6083.0], [40.1, 6084.0], [40.2, 6086.0], [40.3, 6087.0], [40.4, 6088.0], [40.5, 6089.0], [40.6, 6091.0], [40.7, 6092.0], [40.8, 6093.0], [40.9, 6093.0], [41.0, 6096.0], [41.1, 6097.0], [41.2, 6098.0], [41.3, 6100.0], [41.4, 6101.0], [41.5, 6102.0], [41.6, 6103.0], [41.7, 6103.0], [41.8, 6104.0], [41.9, 6105.0], [42.0, 6107.0], [42.1, 6109.0], [42.2, 6112.0], [42.3, 6113.0], [42.4, 6114.0], [42.5, 6115.0], [42.6, 6116.0], [42.7, 6118.0], [42.8, 6118.0], [42.9, 6120.0], [43.0, 6121.0], [43.1, 6123.0], [43.2, 6124.0], [43.3, 6126.0], [43.4, 6127.0], [43.5, 6129.0], [43.6, 6131.0], [43.7, 6133.0], [43.8, 6135.0], [43.9, 6137.0], [44.0, 6139.0], [44.1, 6140.0], [44.2, 6143.0], [44.3, 6147.0], [44.4, 6149.0], [44.5, 6152.0], [44.6, 6155.0], [44.7, 6158.0], [44.8, 6160.0], [44.9, 6164.0], [45.0, 6165.0], [45.1, 6168.0], [45.2, 6171.0], [45.3, 6177.0], [45.4, 6181.0], [45.5, 6182.0], [45.6, 6185.0], [45.7, 6188.0], [45.8, 6189.0], [45.9, 6191.0], [46.0, 6194.0], [46.1, 6196.0], [46.2, 6198.0], [46.3, 6201.0], [46.4, 6204.0], [46.5, 6208.0], [46.6, 6210.0], [46.7, 6211.0], [46.8, 6217.0], [46.9, 6221.0], [47.0, 6229.0], [47.1, 6241.0], [47.2, 6250.0], [47.3, 6260.0], [47.4, 6270.0], [47.5, 6273.0], [47.6, 6283.0], [47.7, 6286.0], [47.8, 6294.0], [47.9, 6301.0], [48.0, 6304.0], [48.1, 6307.0], [48.2, 6313.0], [48.3, 6319.0], [48.4, 6324.0], [48.5, 6334.0], [48.6, 6347.0], [48.7, 6362.0], [48.8, 6374.0], [48.9, 6379.0], [49.0, 6383.0], [49.1, 6390.0], [49.2, 6395.0], [49.3, 6400.0], [49.4, 6405.0], [49.5, 6409.0], [49.6, 6415.0], [49.7, 6418.0], [49.8, 6424.0], [49.9, 6429.0], [50.0, 6437.0], [50.1, 6442.0], [50.2, 6450.0], [50.3, 6459.0], [50.4, 6464.0], [50.5, 6469.0], [50.6, 6472.0], [50.7, 6480.0], [50.8, 6484.0], [50.9, 6488.0], [51.0, 6492.0], [51.1, 6495.0], [51.2, 6499.0], [51.3, 6502.0], [51.4, 6504.0], [51.5, 6507.0], [51.6, 6511.0], [51.7, 6512.0], [51.8, 6515.0], [51.9, 6516.0], [52.0, 6518.0], [52.1, 6520.0], [52.2, 6522.0], [52.3, 6524.0], [52.4, 6527.0], [52.5, 6532.0], [52.6, 6535.0], [52.7, 6540.0], [52.8, 6545.0], [52.9, 6548.0], [53.0, 6550.0], [53.1, 6553.0], [53.2, 6561.0], [53.3, 6566.0], [53.4, 6571.0], [53.5, 6575.0], [53.6, 6578.0], [53.7, 6581.0], [53.8, 6584.0], [53.9, 6587.0], [54.0, 6590.0], [54.1, 6594.0], [54.2, 6596.0], [54.3, 6598.0], [54.4, 6599.0], [54.5, 6601.0], [54.6, 6603.0], [54.7, 6605.0], [54.8, 6607.0], [54.9, 6610.0], [55.0, 6614.0], [55.1, 6619.0], [55.2, 6625.0], [55.3, 6634.0], [55.4, 6644.0], [55.5, 6652.0], [55.6, 6659.0], [55.7, 6663.0], [55.8, 6679.0], [55.9, 6688.0], [56.0, 6693.0], [56.1, 6695.0], [56.2, 6698.0], [56.3, 6700.0], [56.4, 6703.0], [56.5, 6706.0], [56.6, 6711.0], [56.7, 6714.0], [56.8, 6718.0], [56.9, 6724.0], [57.0, 6729.0], [57.1, 6740.0], [57.2, 6748.0], [57.3, 6754.0], [57.4, 6759.0], [57.5, 6761.0], [57.6, 6765.0], [57.7, 6768.0], [57.8, 6770.0], [57.9, 6775.0], [58.0, 6781.0], [58.1, 6785.0], [58.2, 6786.0], [58.3, 6790.0], [58.4, 6791.0], [58.5, 6794.0], [58.6, 6798.0], [58.7, 6801.0], [58.8, 6803.0], [58.9, 6805.0], [59.0, 6810.0], [59.1, 6814.0], [59.2, 6823.0], [59.3, 6835.0], [59.4, 6850.0], [59.5, 6861.0], [59.6, 6871.0], [59.7, 6878.0], [59.8, 6885.0], [59.9, 6891.0], [60.0, 6902.0], [60.1, 6907.0], [60.2, 6912.0], [60.3, 6916.0], [60.4, 6923.0], [60.5, 6929.0], [60.6, 6938.0], [60.7, 6947.0], [60.8, 6953.0], [60.9, 6960.0], [61.0, 6965.0], [61.1, 6972.0], [61.2, 6976.0], [61.3, 6980.0], [61.4, 6983.0], [61.5, 6986.0], [61.6, 6988.0], [61.7, 6990.0], [61.8, 6992.0], [61.9, 6995.0], [62.0, 6999.0], [62.1, 7002.0], [62.2, 7007.0], [62.3, 7013.0], [62.4, 7017.0], [62.5, 7021.0], [62.6, 7027.0], [62.7, 7030.0], [62.8, 7034.0], [62.9, 7040.0], [63.0, 7045.0], [63.1, 7052.0], [63.2, 7062.0], [63.3, 7069.0], [63.4, 7073.0], [63.5, 7077.0], [63.6, 7081.0], [63.7, 7084.0], [63.8, 7090.0], [63.9, 7094.0], [64.0, 7098.0], [64.1, 7102.0], [64.2, 7106.0], [64.3, 7109.0], [64.4, 7111.0], [64.5, 7119.0], [64.6, 7127.0], [64.7, 7130.0], [64.8, 7133.0], [64.9, 7138.0], [65.0, 7142.0], [65.1, 7151.0], [65.2, 7158.0], [65.3, 7161.0], [65.4, 7168.0], [65.5, 7176.0], [65.6, 7188.0], [65.7, 7192.0], [65.8, 7198.0], [65.9, 7202.0], [66.0, 7206.0], [66.1, 7208.0], [66.2, 7213.0], [66.3, 7220.0], [66.4, 7227.0], [66.5, 7233.0], [66.6, 7242.0], [66.7, 7253.0], [66.8, 7260.0], [66.9, 7273.0], [67.0, 7279.0], [67.1, 7285.0], [67.2, 7292.0], [67.3, 7298.0], [67.4, 7302.0], [67.5, 7306.0], [67.6, 7310.0], [67.7, 7312.0], [67.8, 7316.0], [67.9, 7320.0], [68.0, 7321.0], [68.1, 7324.0], [68.2, 7332.0], [68.3, 7337.0], [68.4, 7344.0], [68.5, 7351.0], [68.6, 7356.0], [68.7, 7362.0], [68.8, 7373.0], [68.9, 7380.0], [69.0, 7386.0], [69.1, 7388.0], [69.2, 7393.0], [69.3, 7396.0], [69.4, 7399.0], [69.5, 7401.0], [69.6, 7405.0], [69.7, 7408.0], [69.8, 7412.0], [69.9, 7415.0], [70.0, 7417.0], [70.1, 7421.0], [70.2, 7423.0], [70.3, 7425.0], [70.4, 7427.0], [70.5, 7429.0], [70.6, 7433.0], [70.7, 7436.0], [70.8, 7442.0], [70.9, 7447.0], [71.0, 7452.0], [71.1, 7455.0], [71.2, 7458.0], [71.3, 7462.0], [71.4, 7465.0], [71.5, 7469.0], [71.6, 7471.0], [71.7, 7475.0], [71.8, 7477.0], [71.9, 7479.0], [72.0, 7481.0], [72.1, 7482.0], [72.2, 7487.0], [72.3, 7488.0], [72.4, 7490.0], [72.5, 7493.0], [72.6, 7496.0], [72.7, 7497.0], [72.8, 7499.0], [72.9, 7500.0], [73.0, 7503.0], [73.1, 7506.0], [73.2, 7507.0], [73.3, 7510.0], [73.4, 7512.0], [73.5, 7515.0], [73.6, 7518.0], [73.7, 7522.0], [73.8, 7527.0], [73.9, 7530.0], [74.0, 7534.0], [74.1, 7540.0], [74.2, 7550.0], [74.3, 7562.0], [74.4, 7569.0], [74.5, 7576.0], [74.6, 7581.0], [74.7, 7587.0], [74.8, 7593.0], [74.9, 7597.0], [75.0, 7611.0], [75.1, 7617.0], [75.2, 7620.0], [75.3, 7628.0], [75.4, 7637.0], [75.5, 7646.0], [75.6, 7653.0], [75.7, 7664.0], [75.8, 7674.0], [75.9, 7683.0], [76.0, 7686.0], [76.1, 7691.0], [76.2, 7697.0], [76.3, 7703.0], [76.4, 7713.0], [76.5, 7740.0], [76.6, 7789.0], [76.7, 7852.0], [76.8, 7901.0], [76.9, 7931.0], [77.0, 7946.0], [77.1, 7956.0], [77.2, 7974.0], [77.3, 7985.0], [77.4, 7988.0], [77.5, 7995.0], [77.6, 8000.0], [77.7, 8003.0], [77.8, 8008.0], [77.9, 8012.0], [78.0, 8018.0], [78.1, 8025.0], [78.2, 8031.0], [78.3, 8044.0], [78.4, 8054.0], [78.5, 8067.0], [78.6, 8074.0], [78.7, 8083.0], [78.8, 8090.0], [78.9, 8092.0], [79.0, 8123.0], [79.1, 8187.0], [79.2, 8200.0], [79.3, 8205.0], [79.4, 8218.0], [79.5, 8240.0], [79.6, 8265.0], [79.7, 8368.0], [79.8, 8380.0], [79.9, 8384.0], [80.0, 8496.0], [80.1, 8624.0], [80.2, 8661.0], [80.3, 8773.0], [80.4, 8915.0], [80.5, 9063.0], [80.6, 9120.0], [80.7, 9220.0], [80.8, 9236.0], [80.9, 9267.0], [81.0, 9276.0], [81.1, 9286.0], [81.2, 9296.0], [81.3, 9303.0], [81.4, 9307.0], [81.5, 9314.0], [81.6, 9329.0], [81.7, 9346.0], [81.8, 9366.0], [81.9, 9382.0], [82.0, 9386.0], [82.1, 9392.0], [82.2, 9395.0], [82.3, 9406.0], [82.4, 9416.0], [82.5, 9451.0], [82.6, 9488.0], [82.7, 9501.0], [82.8, 9519.0], [82.9, 9536.0], [83.0, 9576.0], [83.1, 9598.0], [83.2, 9614.0], [83.3, 9618.0], [83.4, 9624.0], [83.5, 9629.0], [83.6, 9635.0], [83.7, 9647.0], [83.8, 9662.0], [83.9, 9671.0], [84.0, 9680.0], [84.1, 9687.0], [84.2, 9691.0], [84.3, 9697.0], [84.4, 9703.0], [84.5, 9708.0], [84.6, 9712.0], [84.7, 9718.0], [84.8, 9723.0], [84.9, 9728.0], [85.0, 9739.0], [85.1, 9760.0], [85.2, 9783.0], [85.3, 9790.0], [85.4, 9796.0], [85.5, 9812.0], [85.6, 9835.0], [85.7, 9857.0], [85.8, 9878.0], [85.9, 9887.0], [86.0, 9894.0], [86.1, 9908.0], [86.2, 9927.0], [86.3, 9944.0], [86.4, 9970.0], [86.5, 9985.0], [86.6, 9997.0], [86.7, 10003.0], [86.8, 10010.0], [86.9, 10023.0], [87.0, 10030.0], [87.1, 10041.0], [87.2, 10058.0], [87.3, 10070.0], [87.4, 10079.0], [87.5, 10085.0], [87.6, 10094.0], [87.7, 10101.0], [87.8, 10108.0], [87.9, 10117.0], [88.0, 10121.0], [88.1, 10138.0], [88.2, 10156.0], [88.3, 10180.0], [88.4, 10195.0], [88.5, 10199.0], [88.6, 10204.0], [88.7, 10217.0], [88.8, 10232.0], [88.9, 10246.0], [89.0, 10270.0], [89.1, 10285.0], [89.2, 10297.0], [89.3, 10314.0], [89.4, 10328.0], [89.5, 10354.0], [89.6, 10375.0], [89.7, 10388.0], [89.8, 10408.0], [89.9, 10416.0], [90.0, 10434.0], [90.1, 10466.0], [90.2, 10486.0], [90.3, 10513.0], [90.4, 10559.0], [90.5, 10594.0], [90.6, 10677.0], [90.7, 10699.0], [90.8, 10759.0], [90.9, 10787.0], [91.0, 10845.0], [91.1, 10891.0], [91.2, 10911.0], [91.3, 10954.0], [91.4, 10992.0], [91.5, 11008.0], [91.6, 11034.0], [91.7, 11056.0], [91.8, 11087.0], [91.9, 11111.0], [92.0, 11134.0], [92.1, 11162.0], [92.2, 11197.0], [92.3, 11218.0], [92.4, 11247.0], [92.5, 11301.0], [92.6, 11336.0], [92.7, 11378.0], [92.8, 11431.0], [92.9, 11483.0], [93.0, 11515.0], [93.1, 11624.0], [93.2, 11686.0], [93.3, 11716.0], [93.4, 11732.0], [93.5, 11773.0], [93.6, 11806.0], [93.7, 11834.0], [93.8, 11927.0], [93.9, 11954.0], [94.0, 12017.0], [94.1, 12059.0], [94.2, 12114.0], [94.3, 12139.0], [94.4, 12160.0], [94.5, 12176.0], [94.6, 12213.0], [94.7, 12241.0], [94.8, 12316.0], [94.9, 12383.0], [95.0, 12413.0], [95.1, 12459.0], [95.2, 12500.0], [95.3, 12522.0], [95.4, 12568.0], [95.5, 12613.0], [95.6, 12633.0], [95.7, 12671.0], [95.8, 12727.0], [95.9, 12788.0], [96.0, 12962.0], [96.1, 12996.0], [96.2, 13021.0], [96.3, 13034.0], [96.4, 13051.0], [96.5, 13200.0], [96.6, 13317.0], [96.7, 13399.0], [96.8, 13449.0], [96.9, 13496.0], [97.0, 13518.0], [97.1, 13550.0], [97.2, 13583.0], [97.3, 13620.0], [97.4, 13655.0], [97.5, 13697.0], [97.6, 13733.0], [97.7, 13756.0], [97.8, 13777.0], [97.9, 13802.0], [98.0, 13827.0], [98.1, 13854.0], [98.2, 13885.0], [98.3, 13938.0], [98.4, 13970.0], [98.5, 14008.0], [98.6, 14028.0], [98.7, 14052.0], [98.8, 14083.0], [98.9, 14116.0], [99.0, 14171.0], [99.1, 14224.0], [99.2, 14763.0], [99.3, 14830.0], [99.4, 14955.0], [99.5, 15684.0], [99.6, 16015.0], [99.7, 16084.0], [99.8, 16406.0], [99.9, 16846.0], [100.0, 17046.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 496.0, "series": [{"data": [[300.0, 1.0], [1500.0, 2.0], [2300.0, 1.0], [2600.0, 1.0], [3200.0, 1.0], [3300.0, 5.0], [3700.0, 11.0], [3600.0, 1.0], [3800.0, 17.0], [3900.0, 64.0], [4000.0, 54.0], [4300.0, 135.0], [4200.0, 80.0], [4100.0, 64.0], [4400.0, 243.0], [4500.0, 236.0], [4600.0, 206.0], [4800.0, 153.0], [4700.0, 205.0], [5100.0, 235.0], [5000.0, 204.0], [4900.0, 141.0], [5200.0, 181.0], [5300.0, 174.0], [5400.0, 255.0], [5600.0, 140.0], [5500.0, 152.0], [5800.0, 255.0], [5700.0, 185.0], [6100.0, 496.0], [5900.0, 241.0], [6000.0, 485.0], [6200.0, 163.0], [6300.0, 141.0], [6400.0, 194.0], [6600.0, 185.0], [6500.0, 321.0], [6800.0, 129.0], [6900.0, 205.0], [6700.0, 239.0], [7100.0, 177.0], [7000.0, 202.0], [7300.0, 209.0], [7400.0, 339.0], [7200.0, 154.0], [7500.0, 209.0], [7600.0, 133.0], [7700.0, 38.0], [7800.0, 17.0], [7900.0, 79.0], [8000.0, 136.0], [8100.0, 24.0], [8300.0, 29.0], [8400.0, 8.0], [8500.0, 7.0], [8600.0, 17.0], [8700.0, 7.0], [8200.0, 45.0], [9000.0, 10.0], [9100.0, 11.0], [9200.0, 59.0], [8800.0, 6.0], [8900.0, 8.0], [9400.0, 44.0], [9300.0, 99.0], [9500.0, 42.0], [9600.0, 122.0], [9700.0, 110.0], [9800.0, 61.0], [9900.0, 59.0], [10100.0, 87.0], [10000.0, 103.0], [10200.0, 70.0], [10300.0, 55.0], [10400.0, 47.0], [10500.0, 26.0], [10600.0, 20.0], [10700.0, 21.0], [10900.0, 31.0], [11000.0, 40.0], [11200.0, 28.0], [10800.0, 22.0], [11100.0, 37.0], [11300.0, 24.0], [11400.0, 22.0], [11500.0, 11.0], [11600.0, 18.0], [11700.0, 32.0], [11800.0, 22.0], [11900.0, 17.0], [12000.0, 23.0], [12100.0, 38.0], [12200.0, 21.0], [12300.0, 18.0], [12400.0, 24.0], [12500.0, 26.0], [12600.0, 30.0], [12700.0, 17.0], [13200.0, 10.0], [13300.0, 11.0], [13100.0, 3.0], [13000.0, 35.0], [12900.0, 19.0], [13800.0, 34.0], [13400.0, 22.0], [13700.0, 39.0], [13500.0, 32.0], [13600.0, 26.0], [13900.0, 21.0], [14000.0, 41.0], [14100.0, 19.0], [14200.0, 8.0], [14500.0, 1.0], [14400.0, 5.0], [14700.0, 6.0], [14800.0, 10.0], [15000.0, 7.0], [15100.0, 1.0], [14900.0, 7.0], [15600.0, 1.0], [15700.0, 2.0], [15800.0, 6.0], [16000.0, 12.0], [16100.0, 4.0], [16200.0, 1.0], [16300.0, 4.0], [16900.0, 6.0], [16800.0, 6.0], [16700.0, 2.0], [16400.0, 4.0], [16500.0, 2.0], [17000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9999.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9999.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 868.3611398963731, "minX": 1.61787438E12, "maxY": 999.3138436482071, "series": [{"data": [[1.61787438E12, 999.3138436482071], [1.61787444E12, 868.3611398963731]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787444E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 379.0, "minX": 1.0, "maxY": 7638.052168525357, "series": [{"data": [[6.0, 3668.0], [7.0, 3781.0], [8.0, 3790.0], [9.0, 3793.0], [10.0, 3745.0], [12.0, 3748.0], [13.0, 3840.0], [15.0, 3794.5], [17.0, 3825.0], [21.0, 3848.0], [24.0, 3862.8333333333335], [25.0, 3856.0], [26.0, 3928.0], [27.0, 3836.0], [29.0, 3884.0], [30.0, 3843.0], [31.0, 3914.0], [33.0, 3904.0], [32.0, 3847.0], [35.0, 3904.0], [34.0, 3910.0], [37.0, 3904.0], [36.0, 3918.0], [38.0, 3904.0], [41.0, 3786.0], [40.0, 3905.5], [43.0, 3908.0], [42.0, 3910.0], [45.0, 3913.0], [44.0, 3903.0], [49.0, 3910.25], [51.0, 3899.0], [50.0, 3911.0], [53.0, 3915.0], [52.0, 3897.0], [57.0, 3920.5], [58.0, 3938.0], [61.0, 3907.0], [60.0, 3913.0], [71.0, 3976.3333333333335], [68.0, 3930.0], [75.0, 4028.0], [74.0, 3922.0], [73.0, 3939.0], [72.0, 3981.1666666666665], [79.0, 3991.6666666666665], [76.0, 3985.0], [80.0, 4004.0], [85.0, 4070.2], [90.0, 4011.0], [89.0, 3964.0], [95.0, 3988.0], [94.0, 4098.5], [92.0, 4092.0], [99.0, 3991.0], [97.0, 4003.0], [96.0, 4006.0], [103.0, 4181.0], [102.0, 3996.0], [101.0, 4187.0], [100.0, 4001.0], [107.0, 4175.0], [106.0, 3993.0], [105.0, 3994.0], [104.0, 3995.0], [111.0, 4146.0], [110.0, 3986.0], [109.0, 3989.0], [108.0, 4156.0], [115.0, 4092.0], [114.0, 4181.0], [113.0, 4174.0], [112.0, 4174.0], [119.0, 4137.0], [118.0, 4099.0], [117.0, 4115.5], [123.0, 4063.0], [122.0, 4125.5], [120.0, 4170.0], [125.0, 379.0], [124.0, 4054.0], [135.0, 4132.0], [134.0, 4243.0], [133.0, 4110.0], [132.0, 4132.0], [131.0, 4124.0], [130.0, 4087.0], [129.0, 4101.0], [143.0, 4185.0], [142.0, 4122.0], [141.0, 4130.0], [140.0, 4204.0], [139.0, 4230.0], [138.0, 4215.0], [137.0, 4133.0], [136.0, 4125.0], [151.0, 4109.0], [150.0, 4184.0], [149.0, 4145.0], [147.0, 4214.0], [146.0, 4130.0], [145.0, 4234.0], [144.0, 4201.0], [156.0, 4184.0], [154.0, 4253.0], [153.0, 4167.0], [152.0, 4185.0], [162.0, 4235.666666666667], [174.0, 4225.0], [173.0, 4215.0], [172.0, 4222.0], [171.0, 4158.0], [170.0, 4145.0], [169.0, 4157.0], [168.0, 4242.833333333334], [182.0, 4204.333333333333], [179.0, 4219.0], [178.0, 4288.0], [177.0, 4267.0], [191.0, 4277.0], [190.0, 4207.0], [189.0, 4280.0], [188.0, 4195.0], [187.0, 4216.333333333333], [186.0, 4198.0], [185.0, 4225.0], [198.0, 4273.0], [196.0, 4243.0], [195.0, 4243.0], [204.0, 4240.166666666667], [203.0, 4248.0], [201.0, 4246.0], [211.0, 4251.428571428572], [217.0, 4195.0], [216.0, 4203.0], [255.0, 4247.0], [253.0, 4277.333333333333], [252.0, 4272.0], [250.0, 4257.666666666667], [271.0, 4223.0], [270.0, 4319.0], [269.0, 4321.0], [268.0, 4308.799999999999], [265.0, 4327.0], [262.0, 4353.0], [261.0, 4255.0], [260.0, 4337.583333333334], [286.0, 4381.0], [287.0, 4379.0], [285.0, 4328.0], [284.0, 4338.0], [283.0, 4349.0], [282.0, 4342.0], [281.0, 4337.0], [280.0, 4338.0], [279.0, 4349.0], [272.0, 4278.0], [275.0, 4340.0], [273.0, 4327.0], [278.0, 4340.0], [276.0, 4344.0], [302.0, 4397.0], [303.0, 4398.0], [301.0, 4363.0], [300.0, 4398.0], [299.0, 4386.0], [298.0, 4374.0], [296.0, 4326.5], [294.0, 4348.666666666667], [291.0, 4382.333333333333], [288.0, 4331.0], [318.0, 4391.0], [319.0, 4392.0], [317.0, 4401.0], [316.0, 4347.0], [315.0, 4349.0], [314.0, 4351.0], [313.0, 4409.0], [312.0, 4350.0], [311.0, 4354.0], [305.0, 4398.0], [304.0, 4412.0], [307.0, 4379.0], [306.0, 4406.0], [310.0, 4352.0], [309.0, 4348.0], [308.0, 4345.0], [334.0, 4500.0], [335.0, 4498.0], [333.0, 4502.0], [332.0, 4506.0], [331.0, 4508.0], [330.0, 4511.0], [329.0, 4387.0], [328.0, 4509.0], [327.0, 4406.0], [321.0, 4398.5], [323.0, 4389.0], [322.0, 4388.0], [326.0, 4518.0], [325.0, 4408.0], [324.0, 4391.0], [350.0, 2932.0], [351.0, 4415.0], [349.0, 4507.0], [348.0, 4538.0], [347.0, 4364.0], [346.0, 4346.0], [345.0, 4466.0], [344.0, 4368.0], [343.0, 4470.0], [336.0, 4391.0], [338.0, 4493.0], [337.0, 4389.0], [342.0, 4472.0], [341.0, 4372.0], [340.0, 4440.0], [364.0, 4406.0], [352.0, 2924.0], [354.0, 4408.0], [353.0, 4477.0], [366.0, 4341.5], [363.0, 4364.0], [362.0, 4461.0], [361.0, 4426.0], [359.0, 4465.0], [358.0, 4378.0], [357.0, 4469.0], [356.0, 4348.0], [381.0, 4351.0], [382.0, 4406.0], [380.0, 4353.0], [371.0, 4427.333333333333], [370.0, 4370.0], [369.0, 4362.0], [379.0, 4359.0], [378.0, 4416.0], [377.0, 4440.0], [376.0, 4448.0], [375.0, 4385.5], [373.0, 4386.0], [372.0, 4370.0], [397.0, 4422.0], [396.0, 4377.333333333333], [393.0, 4396.0], [392.0, 4399.0], [390.0, 4409.0], [389.0, 4401.0], [388.0, 4406.5], [386.0, 4406.0], [384.0, 4404.5], [412.0, 4384.333333333333], [414.0, 4452.0], [415.0, 4392.0], [413.0, 4404.0], [410.0, 4488.0], [408.0, 4496.0], [407.0, 4508.0], [401.0, 4484.0], [400.0, 4456.0], [403.0, 4489.0], [402.0, 4473.0], [406.0, 4403.0], [405.0, 4417.0], [430.0, 4531.0], [431.0, 4510.0], [429.0, 4517.0], [419.0, 4449.0], [418.0, 4451.0], [417.0, 4449.0], [416.0, 4398.0], [427.0, 4431.5], [425.0, 4456.0], [424.0, 4482.0], [423.0, 4448.0], [422.0, 4452.0], [420.0, 4493.0], [446.0, 4509.0], [447.0, 4574.0], [445.0, 4496.0], [444.0, 4506.5], [442.0, 4510.0], [441.0, 4522.0], [440.0, 4458.5], [438.0, 4431.0], [433.0, 4529.0], [432.0, 4430.0], [435.0, 4426.0], [434.0, 4430.0], [437.0, 4503.0], [436.0, 4447.0], [462.0, 4524.0], [463.0, 4507.0], [461.0, 4520.0], [460.0, 4529.0], [459.0, 4559.0], [458.0, 4557.0], [457.0, 4581.0], [456.0, 4554.5], [454.0, 4550.0], [451.0, 4517.0], [449.0, 4528.5], [453.0, 4516.0], [452.0, 4513.0], [479.0, 4518.5], [475.0, 4531.0], [473.0, 4521.333333333333], [470.0, 4516.0], [469.0, 4507.0], [495.0, 4650.0], [494.0, 4577.333333333333], [491.0, 4570.0], [490.0, 4571.0], [489.0, 4569.0], [487.0, 4611.0], [486.0, 4597.0], [484.0, 4561.0], [483.0, 4549.5], [481.0, 4551.5], [510.0, 4630.0], [509.0, 4546.0], [508.0, 4547.333333333334], [505.0, 4545.0], [499.0, 4529.0], [498.0, 4575.0], [497.0, 4577.0], [496.0, 4573.0], [537.0, 4671.0], [541.0, 4672.0], [528.0, 3502.5], [540.0, 4679.0], [539.0, 4691.0], [538.0, 4689.0], [527.0, 4616.0], [513.0, 4598.0], [512.0, 4576.0], [517.0, 4603.666666666667], [514.0, 4605.0], [519.0, 4607.0], [518.0, 4489.0], [526.0, 4618.0], [525.0, 4613.0], [523.0, 4614.5], [521.0, 4610.0], [520.0, 4596.0], [535.0, 4622.0], [533.0, 4616.0], [532.0, 4657.5], [530.0, 4684.0], [570.0, 4803.5], [574.0, 4834.0], [575.0, 4749.0], [560.0, 4841.0], [562.0, 4792.5], [561.0, 4841.0], [573.0, 4776.0], [572.0, 4829.0], [571.0, 4768.0], [568.0, 4815.333333333333], [549.0, 4957.0], [548.0, 4947.0], [547.0, 4677.0], [545.0, 4668.0], [544.0, 4670.0], [558.0, 4836.0], [557.0, 4852.0], [556.0, 4857.0], [555.0, 4754.0], [554.0, 4861.0], [553.0, 4866.0], [552.0, 4889.666666666667], [565.0, 4802.5], [563.0, 4760.0], [603.0, 4953.666666666667], [607.0, 5041.0], [596.0, 2692.0], [594.0, 4751.0], [593.0, 4896.0], [597.0, 4919.5], [606.0, 4714.0], [605.0, 5024.0], [604.0, 4759.0], [600.0, 4730.0], [582.0, 4857.5], [580.0, 5066.0], [579.0, 4773.0], [578.0, 5049.0], [577.0, 4759.0], [576.0, 4964.0], [591.0, 4926.5], [589.0, 5167.0], [588.0, 4857.5], [586.0, 4866.0], [584.0, 4856.0], [599.0, 5130.0], [598.0, 4898.5], [636.0, 4997.0], [639.0, 4974.0], [625.0, 4648.0], [624.0, 4884.5], [638.0, 4888.0], [637.0, 4906.0], [635.0, 4889.0], [634.0, 4895.0], [633.0, 4922.0], [632.0, 4815.625], [621.0, 5057.0], [609.0, 5048.0], [608.0, 4725.0], [611.0, 5059.0], [610.0, 4668.0], [614.0, 5013.0], [612.0, 4663.0], [619.0, 4660.0], [618.0, 4802.5], [616.0, 4949.0], [631.0, 4924.0], [630.0, 4977.0], [670.0, 4933.0], [671.0, 4979.0], [668.0, 4963.333333333333], [665.0, 5139.0], [664.0, 5018.5], [646.0, 4858.0], [645.0, 4940.0], [644.0, 4929.5], [642.0, 4944.0], [641.0, 5092.0], [640.0, 5061.0], [662.0, 5058.2], [657.0, 4894.0], [656.0, 4943.0], [655.0, 4923.5], [653.0, 4890.0], [652.0, 4903.0], [651.0, 4938.0], [650.0, 4838.0], [649.0, 4903.0], [648.0, 5003.0], [701.0, 5017.0], [695.0, 4132.0], [694.0, 5004.0], [693.0, 5090.0], [692.0, 5058.0], [691.0, 5010.0], [690.0, 5067.0], [689.0, 5069.0], [688.0, 5061.0], [703.0, 5008.0], [702.0, 5011.0], [700.0, 5044.0], [699.0, 5047.0], [698.0, 5016.0], [697.0, 5043.0], [696.0, 5051.0], [679.0, 5017.0], [678.0, 5128.0], [677.0, 5085.0], [676.0, 5088.0], [675.0, 4968.0], [674.0, 4903.0], [673.0, 4888.0], [672.0, 5005.0], [687.0, 5020.0], [686.0, 5012.0], [685.0, 5008.0], [684.0, 5023.0], [683.0, 5010.0], [682.0, 4964.5], [680.0, 5052.0], [730.0, 5084.0], [710.0, 3300.0], [709.0, 4990.0], [708.0, 5035.0], [705.0, 5111.0], [704.0, 5005.0], [712.0, 3310.0], [713.0, 5044.5], [716.0, 5092.0], [715.0, 5027.75], [719.0, 3365.0], [732.0, 5074.0], [723.0, 5070.0], [722.0, 5112.666666666667], [728.0, 5089.0], [727.0, 5149.0], [726.0, 5144.0], [725.0, 5112.25], [724.0, 5080.0], [766.0, 5036.0], [767.0, 5008.0], [753.0, 5065.0], [752.0, 5068.5], [755.0, 5062.0], [754.0, 5065.0], [765.0, 5037.0], [764.0, 5037.0], [763.0, 5018.5], [761.0, 5011.5], [760.0, 5007.0], [739.0, 5063.714285714285], [750.0, 5024.0], [746.0, 5059.833333333334], [745.0, 5060.0], [758.0, 5021.0], [756.0, 5032.0], [795.0, 5009.0], [787.0, 5034.0], [797.0, 5127.0], [784.0, 5005.0], [786.0, 5035.0], [785.0, 5039.0], [794.0, 5145.0], [793.0, 5009.0], [792.0, 5013.0], [775.0, 5008.0], [774.0, 5012.0], [772.0, 5017.0], [771.0, 5002.0], [770.0, 5000.0], [769.0, 5003.0], [768.0, 5003.0], [783.0, 5099.0], [782.0, 5046.0], [781.0, 5009.0], [780.0, 5014.0], [779.0, 5015.0], [778.0, 5055.0], [777.0, 5009.0], [776.0, 5006.0], [791.0, 5021.0], [790.0, 5025.0], [789.0, 5030.0], [827.0, 5066.0], [828.0, 5095.625000000001], [826.0, 5054.0], [803.0, 5112.0], [802.0, 5119.0], [801.0, 5066.5], [818.0, 5084.0], [817.0, 5087.0], [816.0, 5075.0], [814.0, 5090.0], [813.0, 5001.0], [812.0, 5005.0], [811.0, 5097.0], [810.0, 5057.142857142857], [862.0, 5145.0], [863.0, 5146.0], [848.0, 5169.0], [861.0, 5142.0], [860.0, 5143.0], [859.0, 5140.0], [858.0, 5170.6], [847.0, 5171.0], [839.0, 5115.0], [837.0, 5114.0], [845.0, 5176.0], [843.0, 5178.0], [842.0, 5180.0], [841.0, 5099.555555555556], [840.0, 5114.0], [854.0, 5171.0], [852.0, 5172.0], [850.0, 5169.0], [849.0, 5170.0], [891.0, 5202.0], [884.0, 5197.0], [892.0, 5161.0], [881.0, 5218.0], [880.0, 5192.0], [890.0, 5193.666666666667], [871.0, 5208.0], [870.0, 5206.0], [869.0, 5207.0], [868.0, 5192.0], [867.0, 5157.0], [866.0, 5162.0], [865.0, 5159.0], [864.0, 5165.0], [879.0, 5194.0], [878.0, 5206.0], [877.0, 5218.0], [876.0, 5218.5], [874.0, 5217.0], [873.0, 5208.0], [872.0, 5205.0], [887.0, 5208.0], [886.0, 5198.0], [885.0, 5202.0], [883.0, 5212.0], [882.0, 5209.0], [925.0, 4682.0], [926.0, 4671.0], [924.0, 4682.0], [923.0, 4686.0], [922.0, 4693.857142857142], [903.0, 5189.0], [902.0, 5191.0], [901.0, 5122.0], [900.0, 5188.5], [915.0, 4698.0], [914.0, 4714.0], [912.0, 4702.0], [911.0, 4732.0], [910.0, 4737.0], [909.0, 5192.0], [908.0, 5192.0], [907.0, 5196.0], [906.0, 5193.0], [905.0, 5194.0], [904.0, 5189.0], [958.0, 4602.75], [959.0, 4562.0], [944.0, 4457.0], [946.0, 4451.0], [945.0, 4463.0], [948.0, 4526.5], [947.0, 4632.5], [957.0, 4561.25], [955.0, 4592.333333333333], [954.0, 4708.0], [953.0, 4697.5], [952.0, 4682.333333333333], [934.0, 4586.0], [930.0, 4614.0], [929.0, 4638.0], [928.0, 4637.5], [943.0, 4459.0], [942.0, 4466.0], [941.0, 4466.0], [940.0, 4466.0], [939.0, 4550.5], [937.0, 4584.0], [951.0, 4625.0], [950.0, 4505.666666666667], [984.0, 4420.25], [988.0, 4480.7692307692305], [991.0, 4845.041095890412], [977.0, 4505.0], [980.0, 4509.0], [978.0, 4510.875], [990.0, 4658.46551724138], [989.0, 4715.30357142857], [987.0, 4402.8], [986.0, 4398.0], [985.0, 4382.25], [975.0, 4536.0], [961.0, 4625.0], [960.0, 4550.5], [963.0, 4569.0], [962.0, 4609.833333333333], [965.0, 4565.222222222223], [964.0, 4638.0], [967.0, 4535.5], [966.0, 4533.5], [974.0, 4550.5], [973.0, 4527.222222222223], [972.0, 4552.6], [971.0, 4582.0], [970.0, 4591.0], [969.0, 4572.250000000001], [968.0, 4659.0], [983.0, 4386.666666666667], [982.0, 4487.2], [1000.0, 7638.052168525357], [999.0, 6608.0], [998.0, 6579.538461538462], [997.0, 5709.822784810127], [996.0, 4805.8703703703695], [994.0, 5022.727272727272], [993.0, 5018.860465116279], [992.0, 5093.674418604652], [1.0, 3383.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[948.7660000000002, 7069.646899999971]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7913.0, "minX": 1.61787438E12, "maxY": 17070.766666666666, "series": [{"data": [[1.61787438E12, 17070.766666666666], [1.61787444E12, 10730.533333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61787438E12, 12587.0], [1.61787444E12, 7913.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787444E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5340.739637305696, "minX": 1.61787438E12, "maxY": 8156.54951140061, "series": [{"data": [[1.61787438E12, 8156.54951140061], [1.61787444E12, 5340.739637305696]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787444E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5340.7259067357545, "minX": 1.61787438E12, "maxY": 8156.531107491846, "series": [{"data": [[1.61787438E12, 8156.531107491846], [1.61787444E12, 5340.7259067357545]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787444E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4715025906735753, "minX": 1.61787438E12, "maxY": 0.9565146579804549, "series": [{"data": [[1.61787438E12, 0.9565146579804549], [1.61787444E12, 0.4715025906735753]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787444E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 379.0, "minX": 1.61787438E12, "maxY": 17046.0, "series": [{"data": [[1.61787438E12, 17046.0], [1.61787444E12, 6710.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61787438E12, 11948.600000000002], [1.61787444E12, 6452.700000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61787438E12, 14939.830000000005], [1.61787444E12, 6617.389999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61787438E12, 13500.95], [1.61787444E12, 6552.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61787438E12, 379.0], [1.61787444E12, 3383.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61787438E12, 7396.5], [1.61787444E12, 5162.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787444E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1382.0, "minX": 1.0, "maxY": 13831.0, "series": [{"data": [[2.0, 3510.5], [3.0, 5248.0], [5.0, 3300.0], [8.0, 4168.0], [12.0, 7428.0], [15.0, 11197.0], [19.0, 8773.0], [24.0, 7219.5], [25.0, 9645.0], [36.0, 11098.5], [37.0, 11205.0], [38.0, 7127.5], [47.0, 8657.0], [52.0, 5441.5], [53.0, 6132.0], [57.0, 7374.0], [58.0, 6091.0], [59.0, 4637.0], [69.0, 11577.0], [74.0, 7540.0], [81.0, 4178.0], [84.0, 10231.0], [87.0, 7618.0], [93.0, 7289.0], [100.0, 11714.5], [102.0, 10289.5], [109.0, 6616.0], [113.0, 7456.0], [123.0, 12339.0], [122.0, 10001.0], [127.0, 13831.0], [133.0, 5815.0], [140.0, 11455.5], [141.0, 13556.0], [138.0, 6801.5], [143.0, 5716.0], [142.0, 5578.5], [148.0, 7436.5], [158.0, 6013.5], [154.0, 5120.5], [165.0, 6504.0], [174.0, 5395.0], [170.0, 7163.0], [173.0, 4932.0], [182.0, 13455.5], [177.0, 7298.0], [180.0, 5305.5], [188.0, 9325.0], [199.0, 9970.0], [193.0, 5471.0], [221.0, 9645.0], [217.0, 8001.0], [220.0, 4894.5], [230.0, 6584.0], [226.0, 6269.5], [224.0, 7425.5], [231.0, 6405.0], [255.0, 6085.0], [1.0, 1382.0], [256.0, 4495.5], [286.0, 7673.5], [275.0, 4679.0], [303.0, 6775.0], [294.0, 5830.0], [346.0, 6779.5], [340.0, 4214.5], [386.0, 6115.0], [415.0, 4684.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 415.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1377.5, "minX": 1.0, "maxY": 13831.0, "series": [{"data": [[2.0, 3510.5], [3.0, 5248.0], [5.0, 3300.0], [8.0, 4168.0], [12.0, 7428.0], [15.0, 11197.0], [19.0, 8773.0], [24.0, 7219.5], [25.0, 9645.0], [36.0, 11098.5], [37.0, 11205.0], [38.0, 7127.5], [47.0, 8657.0], [52.0, 5441.5], [53.0, 6132.0], [57.0, 7374.0], [58.0, 6091.0], [59.0, 4637.0], [69.0, 11577.0], [74.0, 7540.0], [81.0, 4178.0], [84.0, 10231.0], [87.0, 7618.0], [93.0, 7289.0], [100.0, 11714.5], [102.0, 10289.5], [109.0, 6615.0], [113.0, 7456.0], [123.0, 12339.0], [122.0, 10001.0], [127.0, 13831.0], [133.0, 5815.0], [140.0, 11455.0], [141.0, 13556.0], [138.0, 6801.5], [143.0, 5716.0], [142.0, 5578.5], [148.0, 7436.5], [158.0, 6013.5], [154.0, 5120.5], [165.0, 6504.0], [174.0, 5395.0], [170.0, 7163.0], [173.0, 4932.0], [182.0, 13455.5], [177.0, 7298.0], [180.0, 5305.5], [188.0, 9325.0], [199.0, 9970.0], [193.0, 5471.0], [221.0, 9645.0], [217.0, 8001.0], [220.0, 4894.5], [230.0, 6584.0], [226.0, 6269.5], [224.0, 7425.5], [231.0, 6405.0], [255.0, 6085.0], [1.0, 1377.5], [256.0, 4495.5], [286.0, 7673.5], [275.0, 4679.0], [303.0, 6775.0], [294.0, 5830.0], [346.0, 6779.5], [340.0, 4214.5], [386.0, 6115.0], [415.0, 4684.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 415.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 47.666666666666664, "minX": 1.61787438E12, "maxY": 119.0, "series": [{"data": [[1.61787438E12, 119.0], [1.61787444E12, 47.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787444E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 64.33333333333333, "minX": 1.61787438E12, "maxY": 102.33333333333333, "series": [{"data": [[1.61787438E12, 102.33333333333333], [1.61787444E12, 64.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787444E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 64.33333333333333, "minX": 1.61787438E12, "maxY": 102.33333333333333, "series": [{"data": [[1.61787438E12, 102.33333333333333], [1.61787444E12, 64.33333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787444E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 64.33333333333333, "minX": 1.61787438E12, "maxY": 102.33333333333333, "series": [{"data": [[1.61787438E12, 102.33333333333333], [1.61787444E12, 64.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787444E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

