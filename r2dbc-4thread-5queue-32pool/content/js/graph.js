/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 41.0, "minX": 0.0, "maxY": 12246.0, "series": [{"data": [[0.0, 41.0], [0.1, 1429.0], [0.2, 1746.0], [0.3, 2236.0], [0.4, 2424.0], [0.5, 2588.0], [0.6, 2602.0], [0.7, 2650.0], [0.8, 2661.0], [0.9, 2686.0], [1.0, 2694.0], [1.1, 2699.0], [1.2, 2703.0], [1.3, 2711.0], [1.4, 2724.0], [1.5, 2737.0], [1.6, 2767.0], [1.7, 2782.0], [1.8, 2792.0], [1.9, 2799.0], [2.0, 2810.0], [2.1, 2819.0], [2.2, 2831.0], [2.3, 2850.0], [2.4, 2867.0], [2.5, 2881.0], [2.6, 2889.0], [2.7, 2905.0], [2.8, 2911.0], [2.9, 2929.0], [3.0, 2960.0], [3.1, 2986.0], [3.2, 2994.0], [3.3, 3007.0], [3.4, 3021.0], [3.5, 3030.0], [3.6, 3042.0], [3.7, 3062.0], [3.8, 3084.0], [3.9, 3109.0], [4.0, 3114.0], [4.1, 3119.0], [4.2, 3128.0], [4.3, 3137.0], [4.4, 3155.0], [4.5, 3162.0], [4.6, 3184.0], [4.7, 3192.0], [4.8, 3200.0], [4.9, 3204.0], [5.0, 3207.0], [5.1, 3211.0], [5.2, 3215.0], [5.3, 3218.0], [5.4, 3220.0], [5.5, 3222.0], [5.6, 3224.0], [5.7, 3227.0], [5.8, 3232.0], [5.9, 3233.0], [6.0, 3238.0], [6.1, 3240.0], [6.2, 3242.0], [6.3, 3246.0], [6.4, 3249.0], [6.5, 3256.0], [6.6, 3259.0], [6.7, 3262.0], [6.8, 3266.0], [6.9, 3269.0], [7.0, 3271.0], [7.1, 3273.0], [7.2, 3274.0], [7.3, 3276.0], [7.4, 3277.0], [7.5, 3280.0], [7.6, 3281.0], [7.7, 3282.0], [7.8, 3284.0], [7.9, 3284.0], [8.0, 3285.0], [8.1, 3286.0], [8.2, 3287.0], [8.3, 3288.0], [8.4, 3289.0], [8.5, 3290.0], [8.6, 3291.0], [8.7, 3291.0], [8.8, 3292.0], [8.9, 3293.0], [9.0, 3294.0], [9.1, 3295.0], [9.2, 3296.0], [9.3, 3297.0], [9.4, 3298.0], [9.5, 3298.0], [9.6, 3299.0], [9.7, 3299.0], [9.8, 3300.0], [9.9, 3301.0], [10.0, 3301.0], [10.1, 3302.0], [10.2, 3302.0], [10.3, 3303.0], [10.4, 3304.0], [10.5, 3304.0], [10.6, 3305.0], [10.7, 3305.0], [10.8, 3306.0], [10.9, 3306.0], [11.0, 3306.0], [11.1, 3307.0], [11.2, 3307.0], [11.3, 3308.0], [11.4, 3309.0], [11.5, 3310.0], [11.6, 3310.0], [11.7, 3311.0], [11.8, 3311.0], [11.9, 3312.0], [12.0, 3312.0], [12.1, 3312.0], [12.2, 3313.0], [12.3, 3314.0], [12.4, 3314.0], [12.5, 3315.0], [12.6, 3315.0], [12.7, 3316.0], [12.8, 3317.0], [12.9, 3318.0], [13.0, 3318.0], [13.1, 3319.0], [13.2, 3320.0], [13.3, 3320.0], [13.4, 3321.0], [13.5, 3322.0], [13.6, 3323.0], [13.7, 3324.0], [13.8, 3325.0], [13.9, 3326.0], [14.0, 3327.0], [14.1, 3327.0], [14.2, 3328.0], [14.3, 3330.0], [14.4, 3332.0], [14.5, 3333.0], [14.6, 3335.0], [14.7, 3338.0], [14.8, 3340.0], [14.9, 3343.0], [15.0, 3346.0], [15.1, 3347.0], [15.2, 3347.0], [15.3, 3349.0], [15.4, 3350.0], [15.5, 3353.0], [15.6, 3354.0], [15.7, 3357.0], [15.8, 3359.0], [15.9, 3361.0], [16.0, 3364.0], [16.1, 3365.0], [16.2, 3367.0], [16.3, 3368.0], [16.4, 3369.0], [16.5, 3370.0], [16.6, 3372.0], [16.7, 3374.0], [16.8, 3375.0], [16.9, 3377.0], [17.0, 3379.0], [17.1, 3381.0], [17.2, 3383.0], [17.3, 3384.0], [17.4, 3385.0], [17.5, 3385.0], [17.6, 3386.0], [17.7, 3386.0], [17.8, 3387.0], [17.9, 3388.0], [18.0, 3389.0], [18.1, 3389.0], [18.2, 3390.0], [18.3, 3391.0], [18.4, 3392.0], [18.5, 3392.0], [18.6, 3393.0], [18.7, 3394.0], [18.8, 3394.0], [18.9, 3395.0], [19.0, 3395.0], [19.1, 3395.0], [19.2, 3396.0], [19.3, 3397.0], [19.4, 3398.0], [19.5, 3399.0], [19.6, 3400.0], [19.7, 3401.0], [19.8, 3402.0], [19.9, 3402.0], [20.0, 3402.0], [20.1, 3403.0], [20.2, 3403.0], [20.3, 3404.0], [20.4, 3405.0], [20.5, 3405.0], [20.6, 3406.0], [20.7, 3407.0], [20.8, 3407.0], [20.9, 3408.0], [21.0, 3409.0], [21.1, 3409.0], [21.2, 3410.0], [21.3, 3411.0], [21.4, 3411.0], [21.5, 3412.0], [21.6, 3413.0], [21.7, 3413.0], [21.8, 3414.0], [21.9, 3415.0], [22.0, 3415.0], [22.1, 3415.0], [22.2, 3416.0], [22.3, 3418.0], [22.4, 3418.0], [22.5, 3419.0], [22.6, 3420.0], [22.7, 3421.0], [22.8, 3422.0], [22.9, 3423.0], [23.0, 3425.0], [23.1, 3426.0], [23.2, 3427.0], [23.3, 3428.0], [23.4, 3429.0], [23.5, 3431.0], [23.6, 3433.0], [23.7, 3435.0], [23.8, 3437.0], [23.9, 3441.0], [24.0, 3444.0], [24.1, 3446.0], [24.2, 3449.0], [24.3, 3451.0], [24.4, 3453.0], [24.5, 3456.0], [24.6, 3459.0], [24.7, 3461.0], [24.8, 3462.0], [24.9, 3464.0], [25.0, 3465.0], [25.1, 3466.0], [25.2, 3468.0], [25.3, 3471.0], [25.4, 3472.0], [25.5, 3473.0], [25.6, 3475.0], [25.7, 3477.0], [25.8, 3478.0], [25.9, 3480.0], [26.0, 3482.0], [26.1, 3484.0], [26.2, 3485.0], [26.3, 3486.0], [26.4, 3488.0], [26.5, 3490.0], [26.6, 3492.0], [26.7, 3494.0], [26.8, 3496.0], [26.9, 3498.0], [27.0, 3500.0], [27.1, 3501.0], [27.2, 3503.0], [27.3, 3505.0], [27.4, 3508.0], [27.5, 3510.0], [27.6, 3511.0], [27.7, 3512.0], [27.8, 3513.0], [27.9, 3514.0], [28.0, 3514.0], [28.1, 3516.0], [28.2, 3517.0], [28.3, 3518.0], [28.4, 3520.0], [28.5, 3521.0], [28.6, 3522.0], [28.7, 3525.0], [28.8, 3526.0], [28.9, 3528.0], [29.0, 3530.0], [29.1, 3532.0], [29.2, 3533.0], [29.3, 3535.0], [29.4, 3536.0], [29.5, 3536.0], [29.6, 3538.0], [29.7, 3540.0], [29.8, 3542.0], [29.9, 3543.0], [30.0, 3545.0], [30.1, 3547.0], [30.2, 3550.0], [30.3, 3553.0], [30.4, 3556.0], [30.5, 3557.0], [30.6, 3559.0], [30.7, 3560.0], [30.8, 3561.0], [30.9, 3562.0], [31.0, 3564.0], [31.1, 3566.0], [31.2, 3567.0], [31.3, 3568.0], [31.4, 3569.0], [31.5, 3570.0], [31.6, 3572.0], [31.7, 3575.0], [31.8, 3576.0], [31.9, 3577.0], [32.0, 3578.0], [32.1, 3579.0], [32.2, 3580.0], [32.3, 3582.0], [32.4, 3582.0], [32.5, 3583.0], [32.6, 3584.0], [32.7, 3585.0], [32.8, 3586.0], [32.9, 3587.0], [33.0, 3588.0], [33.1, 3589.0], [33.2, 3589.0], [33.3, 3590.0], [33.4, 3591.0], [33.5, 3591.0], [33.6, 3592.0], [33.7, 3593.0], [33.8, 3594.0], [33.9, 3595.0], [34.0, 3596.0], [34.1, 3596.0], [34.2, 3597.0], [34.3, 3598.0], [34.4, 3598.0], [34.5, 3599.0], [34.6, 3600.0], [34.7, 3601.0], [34.8, 3602.0], [34.9, 3603.0], [35.0, 3604.0], [35.1, 3605.0], [35.2, 3607.0], [35.3, 3608.0], [35.4, 3609.0], [35.5, 3610.0], [35.6, 3612.0], [35.7, 3613.0], [35.8, 3615.0], [35.9, 3616.0], [36.0, 3617.0], [36.1, 3619.0], [36.2, 3621.0], [36.3, 3623.0], [36.4, 3625.0], [36.5, 3628.0], [36.6, 3630.0], [36.7, 3634.0], [36.8, 3642.0], [36.9, 3646.0], [37.0, 3651.0], [37.1, 3654.0], [37.2, 3657.0], [37.3, 3663.0], [37.4, 3665.0], [37.5, 3666.0], [37.6, 3670.0], [37.7, 3673.0], [37.8, 3676.0], [37.9, 3678.0], [38.0, 3681.0], [38.1, 3683.0], [38.2, 3689.0], [38.3, 3690.0], [38.4, 3691.0], [38.5, 3694.0], [38.6, 3697.0], [38.7, 3699.0], [38.8, 3702.0], [38.9, 3703.0], [39.0, 3706.0], [39.1, 3709.0], [39.2, 3711.0], [39.3, 3714.0], [39.4, 3716.0], [39.5, 3719.0], [39.6, 3725.0], [39.7, 3737.0], [39.8, 3749.0], [39.9, 3756.0], [40.0, 3760.0], [40.1, 3764.0], [40.2, 3767.0], [40.3, 3769.0], [40.4, 3776.0], [40.5, 3782.0], [40.6, 3785.0], [40.7, 3796.0], [40.8, 3809.0], [40.9, 3821.0], [41.0, 3827.0], [41.1, 3837.0], [41.2, 3850.0], [41.3, 3871.0], [41.4, 3883.0], [41.5, 3895.0], [41.6, 3900.0], [41.7, 3904.0], [41.8, 3909.0], [41.9, 3913.0], [42.0, 3916.0], [42.1, 3920.0], [42.2, 3926.0], [42.3, 3930.0], [42.4, 3935.0], [42.5, 3950.0], [42.6, 3960.0], [42.7, 3966.0], [42.8, 3970.0], [42.9, 3975.0], [43.0, 3977.0], [43.1, 3980.0], [43.2, 3985.0], [43.3, 3989.0], [43.4, 3991.0], [43.5, 3993.0], [43.6, 3996.0], [43.7, 4000.0], [43.8, 4004.0], [43.9, 4009.0], [44.0, 4012.0], [44.1, 4017.0], [44.2, 4020.0], [44.3, 4041.0], [44.4, 4047.0], [44.5, 4059.0], [44.6, 4071.0], [44.7, 4079.0], [44.8, 4082.0], [44.9, 4083.0], [45.0, 4086.0], [45.1, 4089.0], [45.2, 4091.0], [45.3, 4093.0], [45.4, 4096.0], [45.5, 4099.0], [45.6, 4102.0], [45.7, 4104.0], [45.8, 4109.0], [45.9, 4112.0], [46.0, 4115.0], [46.1, 4117.0], [46.2, 4120.0], [46.3, 4122.0], [46.4, 4124.0], [46.5, 4128.0], [46.6, 4131.0], [46.7, 4134.0], [46.8, 4135.0], [46.9, 4138.0], [47.0, 4141.0], [47.1, 4144.0], [47.2, 4148.0], [47.3, 4154.0], [47.4, 4160.0], [47.5, 4162.0], [47.6, 4166.0], [47.7, 4169.0], [47.8, 4174.0], [47.9, 4177.0], [48.0, 4180.0], [48.1, 4183.0], [48.2, 4185.0], [48.3, 4187.0], [48.4, 4190.0], [48.5, 4192.0], [48.6, 4200.0], [48.7, 4204.0], [48.8, 4206.0], [48.9, 4225.0], [49.0, 4284.0], [49.1, 4295.0], [49.2, 4315.0], [49.3, 4339.0], [49.4, 4370.0], [49.5, 4389.0], [49.6, 4399.0], [49.7, 4407.0], [49.8, 4429.0], [49.9, 4441.0], [50.0, 4450.0], [50.1, 4466.0], [50.2, 4478.0], [50.3, 4491.0], [50.4, 4503.0], [50.5, 4505.0], [50.6, 4511.0], [50.7, 4516.0], [50.8, 4521.0], [50.9, 4526.0], [51.0, 4530.0], [51.1, 4536.0], [51.2, 4541.0], [51.3, 4550.0], [51.4, 4558.0], [51.5, 4562.0], [51.6, 4568.0], [51.7, 4573.0], [51.8, 4579.0], [51.9, 4588.0], [52.0, 4594.0], [52.1, 4598.0], [52.2, 4603.0], [52.3, 4606.0], [52.4, 4611.0], [52.5, 4622.0], [52.6, 4631.0], [52.7, 4637.0], [52.8, 4641.0], [52.9, 4661.0], [53.0, 4670.0], [53.1, 4679.0], [53.2, 4686.0], [53.3, 4689.0], [53.4, 4692.0], [53.5, 4696.0], [53.6, 4699.0], [53.7, 4702.0], [53.8, 4706.0], [53.9, 4712.0], [54.0, 4719.0], [54.1, 4735.0], [54.2, 4755.0], [54.3, 4762.0], [54.4, 4769.0], [54.5, 4788.0], [54.6, 4796.0], [54.7, 4800.0], [54.8, 4802.0], [54.9, 4808.0], [55.0, 4811.0], [55.1, 4814.0], [55.2, 4820.0], [55.3, 4823.0], [55.4, 4825.0], [55.5, 4829.0], [55.6, 4832.0], [55.7, 4837.0], [55.8, 4848.0], [55.9, 4852.0], [56.0, 4854.0], [56.1, 4861.0], [56.2, 4866.0], [56.3, 4870.0], [56.4, 4873.0], [56.5, 4876.0], [56.6, 4878.0], [56.7, 4882.0], [56.8, 4884.0], [56.9, 4888.0], [57.0, 4894.0], [57.1, 4900.0], [57.2, 4902.0], [57.3, 4910.0], [57.4, 4913.0], [57.5, 4921.0], [57.6, 4930.0], [57.7, 4933.0], [57.8, 4937.0], [57.9, 4942.0], [58.0, 4947.0], [58.1, 4953.0], [58.2, 4958.0], [58.3, 4961.0], [58.4, 4963.0], [58.5, 4967.0], [58.6, 4969.0], [58.7, 4970.0], [58.8, 4974.0], [58.9, 4977.0], [59.0, 4980.0], [59.1, 4983.0], [59.2, 4988.0], [59.3, 4994.0], [59.4, 4995.0], [59.5, 5000.0], [59.6, 5002.0], [59.7, 5005.0], [59.8, 5008.0], [59.9, 5011.0], [60.0, 5016.0], [60.1, 5022.0], [60.2, 5025.0], [60.3, 5034.0], [60.4, 5040.0], [60.5, 5047.0], [60.6, 5051.0], [60.7, 5057.0], [60.8, 5064.0], [60.9, 5073.0], [61.0, 5079.0], [61.1, 5082.0], [61.2, 5084.0], [61.3, 5087.0], [61.4, 5088.0], [61.5, 5090.0], [61.6, 5091.0], [61.7, 5093.0], [61.8, 5094.0], [61.9, 5096.0], [62.0, 5098.0], [62.1, 5099.0], [62.2, 5101.0], [62.3, 5103.0], [62.4, 5105.0], [62.5, 5107.0], [62.6, 5108.0], [62.7, 5110.0], [62.8, 5114.0], [62.9, 5120.0], [63.0, 5121.0], [63.1, 5124.0], [63.2, 5127.0], [63.3, 5128.0], [63.4, 5130.0], [63.5, 5131.0], [63.6, 5133.0], [63.7, 5134.0], [63.8, 5135.0], [63.9, 5138.0], [64.0, 5140.0], [64.1, 5142.0], [64.2, 5143.0], [64.3, 5144.0], [64.4, 5146.0], [64.5, 5149.0], [64.6, 5152.0], [64.7, 5154.0], [64.8, 5158.0], [64.9, 5160.0], [65.0, 5163.0], [65.1, 5165.0], [65.2, 5170.0], [65.3, 5173.0], [65.4, 5174.0], [65.5, 5176.0], [65.6, 5177.0], [65.7, 5178.0], [65.8, 5179.0], [65.9, 5179.0], [66.0, 5180.0], [66.1, 5182.0], [66.2, 5183.0], [66.3, 5183.0], [66.4, 5184.0], [66.5, 5185.0], [66.6, 5185.0], [66.7, 5186.0], [66.8, 5186.0], [66.9, 5187.0], [67.0, 5187.0], [67.1, 5187.0], [67.2, 5188.0], [67.3, 5188.0], [67.4, 5189.0], [67.5, 5189.0], [67.6, 5189.0], [67.7, 5190.0], [67.8, 5191.0], [67.9, 5191.0], [68.0, 5192.0], [68.1, 5192.0], [68.2, 5192.0], [68.3, 5193.0], [68.4, 5193.0], [68.5, 5194.0], [68.6, 5194.0], [68.7, 5195.0], [68.8, 5195.0], [68.9, 5196.0], [69.0, 5196.0], [69.1, 5196.0], [69.2, 5197.0], [69.3, 5197.0], [69.4, 5197.0], [69.5, 5198.0], [69.6, 5198.0], [69.7, 5198.0], [69.8, 5199.0], [69.9, 5199.0], [70.0, 5199.0], [70.1, 5200.0], [70.2, 5200.0], [70.3, 5200.0], [70.4, 5201.0], [70.5, 5201.0], [70.6, 5202.0], [70.7, 5202.0], [70.8, 5203.0], [70.9, 5203.0], [71.0, 5203.0], [71.1, 5204.0], [71.2, 5204.0], [71.3, 5205.0], [71.4, 5205.0], [71.5, 5206.0], [71.6, 5207.0], [71.7, 5207.0], [71.8, 5208.0], [71.9, 5208.0], [72.0, 5208.0], [72.1, 5209.0], [72.2, 5210.0], [72.3, 5210.0], [72.4, 5211.0], [72.5, 5211.0], [72.6, 5212.0], [72.7, 5213.0], [72.8, 5213.0], [72.9, 5214.0], [73.0, 5215.0], [73.1, 5216.0], [73.2, 5217.0], [73.3, 5217.0], [73.4, 5219.0], [73.5, 5220.0], [73.6, 5221.0], [73.7, 5221.0], [73.8, 5222.0], [73.9, 5223.0], [74.0, 5224.0], [74.1, 5224.0], [74.2, 5225.0], [74.3, 5226.0], [74.4, 5227.0], [74.5, 5228.0], [74.6, 5229.0], [74.7, 5229.0], [74.8, 5231.0], [74.9, 5232.0], [75.0, 5234.0], [75.1, 5235.0], [75.2, 5237.0], [75.3, 5240.0], [75.4, 5241.0], [75.5, 5244.0], [75.6, 5246.0], [75.7, 5250.0], [75.8, 5252.0], [75.9, 5254.0], [76.0, 5256.0], [76.1, 5257.0], [76.2, 5259.0], [76.3, 5262.0], [76.4, 5265.0], [76.5, 5267.0], [76.6, 5268.0], [76.7, 5270.0], [76.8, 5273.0], [76.9, 5274.0], [77.0, 5276.0], [77.1, 5278.0], [77.2, 5279.0], [77.3, 5280.0], [77.4, 5281.0], [77.5, 5282.0], [77.6, 5284.0], [77.7, 5286.0], [77.8, 5287.0], [77.9, 5288.0], [78.0, 5289.0], [78.1, 5292.0], [78.2, 5294.0], [78.3, 5297.0], [78.4, 5302.0], [78.5, 5307.0], [78.6, 5313.0], [78.7, 5318.0], [78.8, 5325.0], [78.9, 5333.0], [79.0, 5340.0], [79.1, 5347.0], [79.2, 5366.0], [79.3, 5374.0], [79.4, 5380.0], [79.5, 5384.0], [79.6, 5386.0], [79.7, 5389.0], [79.8, 5393.0], [79.9, 5400.0], [80.0, 5402.0], [80.1, 5404.0], [80.2, 5407.0], [80.3, 5410.0], [80.4, 5414.0], [80.5, 5420.0], [80.6, 5433.0], [80.7, 5445.0], [80.8, 5448.0], [80.9, 5457.0], [81.0, 5474.0], [81.1, 5483.0], [81.2, 5486.0], [81.3, 5489.0], [81.4, 5492.0], [81.5, 5497.0], [81.6, 5501.0], [81.7, 5506.0], [81.8, 5511.0], [81.9, 5519.0], [82.0, 5526.0], [82.1, 5534.0], [82.2, 5539.0], [82.3, 5546.0], [82.4, 5553.0], [82.5, 5560.0], [82.6, 5570.0], [82.7, 5578.0], [82.8, 5581.0], [82.9, 5584.0], [83.0, 5587.0], [83.1, 5590.0], [83.2, 5593.0], [83.3, 5595.0], [83.4, 5597.0], [83.5, 5601.0], [83.6, 5608.0], [83.7, 5611.0], [83.8, 5614.0], [83.9, 5618.0], [84.0, 5642.0], [84.1, 5658.0], [84.2, 5682.0], [84.3, 5693.0], [84.4, 5697.0], [84.5, 5700.0], [84.6, 5706.0], [84.7, 5721.0], [84.8, 5751.0], [84.9, 5779.0], [85.0, 5791.0], [85.1, 5794.0], [85.2, 5798.0], [85.3, 5803.0], [85.4, 5809.0], [85.5, 5816.0], [85.6, 5836.0], [85.7, 5866.0], [85.8, 5884.0], [85.9, 5888.0], [86.0, 5893.0], [86.1, 5898.0], [86.2, 5910.0], [86.3, 5918.0], [86.4, 5925.0], [86.5, 5963.0], [86.6, 5979.0], [86.7, 5987.0], [86.8, 5994.0], [86.9, 6024.0], [87.0, 6052.0], [87.1, 6095.0], [87.2, 6109.0], [87.3, 6178.0], [87.4, 6246.0], [87.5, 6276.0], [87.6, 6306.0], [87.7, 6322.0], [87.8, 6329.0], [87.9, 6390.0], [88.0, 6402.0], [88.1, 6430.0], [88.2, 6469.0], [88.3, 6491.0], [88.4, 6505.0], [88.5, 6559.0], [88.6, 6583.0], [88.7, 6618.0], [88.8, 6634.0], [88.9, 6686.0], [89.0, 6692.0], [89.1, 6704.0], [89.2, 6725.0], [89.3, 6771.0], [89.4, 6801.0], [89.5, 6852.0], [89.6, 6918.0], [89.7, 7000.0], [89.8, 7035.0], [89.9, 7105.0], [90.0, 7199.0], [90.1, 7258.0], [90.2, 7324.0], [90.3, 7376.0], [90.4, 7430.0], [90.5, 7485.0], [90.6, 7535.0], [90.7, 7620.0], [90.8, 7685.0], [90.9, 7722.0], [91.0, 7788.0], [91.1, 7817.0], [91.2, 7874.0], [91.3, 7898.0], [91.4, 7935.0], [91.5, 7959.0], [91.6, 7984.0], [91.7, 8011.0], [91.8, 8057.0], [91.9, 8076.0], [92.0, 8132.0], [92.1, 8165.0], [92.2, 8211.0], [92.3, 8232.0], [92.4, 8259.0], [92.5, 8278.0], [92.6, 8290.0], [92.7, 8306.0], [92.8, 8319.0], [92.9, 8331.0], [93.0, 8339.0], [93.1, 8351.0], [93.2, 8360.0], [93.3, 8368.0], [93.4, 8373.0], [93.5, 8378.0], [93.6, 8382.0], [93.7, 8390.0], [93.8, 8397.0], [93.9, 8404.0], [94.0, 8414.0], [94.1, 8427.0], [94.2, 8446.0], [94.3, 8453.0], [94.4, 8464.0], [94.5, 8476.0], [94.6, 8487.0], [94.7, 8500.0], [94.8, 8523.0], [94.9, 8539.0], [95.0, 8577.0], [95.1, 8599.0], [95.2, 8618.0], [95.3, 8641.0], [95.4, 8652.0], [95.5, 8668.0], [95.6, 8678.0], [95.7, 8690.0], [95.8, 8706.0], [95.9, 8728.0], [96.0, 8746.0], [96.1, 8769.0], [96.2, 8792.0], [96.3, 8813.0], [96.4, 8828.0], [96.5, 8841.0], [96.6, 8856.0], [96.7, 8868.0], [96.8, 8885.0], [96.9, 8899.0], [97.0, 8916.0], [97.1, 8938.0], [97.2, 8952.0], [97.3, 8972.0], [97.4, 8990.0], [97.5, 9001.0], [97.6, 9038.0], [97.7, 9077.0], [97.8, 9106.0], [97.9, 9122.0], [98.0, 9149.0], [98.1, 9196.0], [98.2, 9229.0], [98.3, 9300.0], [98.4, 9366.0], [98.5, 9395.0], [98.6, 9411.0], [98.7, 9441.0], [98.8, 9484.0], [98.9, 9523.0], [99.0, 9584.0], [99.1, 9634.0], [99.2, 9683.0], [99.3, 9887.0], [99.4, 9958.0], [99.5, 10048.0], [99.6, 10165.0], [99.7, 11707.0], [99.8, 11849.0], [99.9, 11972.0], [100.0, 12246.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 984.0, "series": [{"data": [[0.0, 5.0], [100.0, 1.0], [900.0, 1.0], [1000.0, 1.0], [1200.0, 1.0], [1400.0, 3.0], [1600.0, 6.0], [1700.0, 3.0], [1900.0, 4.0], [2000.0, 1.0], [2100.0, 3.0], [2200.0, 2.0], [2300.0, 3.0], [2400.0, 9.0], [2500.0, 14.0], [2600.0, 54.0], [2700.0, 79.0], [2800.0, 75.0], [2900.0, 62.0], [3000.0, 59.0], [3100.0, 92.0], [3200.0, 493.0], [3300.0, 984.0], [3400.0, 742.0], [3500.0, 758.0], [3700.0, 200.0], [3600.0, 419.0], [3800.0, 86.0], [3900.0, 209.0], [4000.0, 184.0], [4200.0, 53.0], [4300.0, 51.0], [4100.0, 305.0], [4500.0, 176.0], [4600.0, 147.0], [4400.0, 76.0], [4800.0, 237.0], [4700.0, 109.0], [4900.0, 239.0], [5100.0, 792.0], [5000.0, 266.0], [5300.0, 153.0], [5200.0, 831.0], [5600.0, 101.0], [5500.0, 194.0], [5400.0, 166.0], [5800.0, 88.0], [5700.0, 74.0], [5900.0, 72.0], [6000.0, 32.0], [6100.0, 19.0], [6200.0, 24.0], [6300.0, 39.0], [6400.0, 39.0], [6500.0, 28.0], [6600.0, 44.0], [6700.0, 31.0], [6800.0, 17.0], [6900.0, 13.0], [7000.0, 20.0], [7100.0, 11.0], [7200.0, 17.0], [7300.0, 17.0], [7400.0, 18.0], [7500.0, 15.0], [7600.0, 18.0], [7800.0, 23.0], [7900.0, 35.0], [7700.0, 22.0], [8000.0, 30.0], [8100.0, 20.0], [8200.0, 51.0], [8300.0, 116.0], [8400.0, 86.0], [8500.0, 42.0], [8600.0, 66.0], [8700.0, 48.0], [8800.0, 66.0], [8900.0, 56.0], [9000.0, 32.0], [9100.0, 33.0], [9200.0, 18.0], [9300.0, 23.0], [9400.0, 30.0], [9500.0, 20.0], [9600.0, 19.0], [9700.0, 5.0], [9900.0, 13.0], [10100.0, 4.0], [9800.0, 4.0], [10000.0, 13.0], [11700.0, 8.0], [11600.0, 3.0], [11400.0, 1.0], [11500.0, 4.0], [11900.0, 8.0], [11800.0, 7.0], [12000.0, 1.0], [12100.0, 3.0], [12200.0, 5.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9985.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9985.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 15.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 511.6976744186047, "minX": 1.61786088E12, "maxY": 946.4155870242007, "series": [{"data": [[1.61786094E12, 946.4155870242007], [1.61786088E12, 511.6976744186047]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61786094E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 970.0, "minX": 2.0, "maxY": 5082.238248790769, "series": [{"data": [[2.0, 2586.0], [3.0, 2588.0], [4.0, 2588.0], [5.0, 2593.0], [6.0, 2592.0], [7.0, 2584.0], [8.0, 2592.0], [10.0, 2594.5], [12.0, 2598.5], [13.0, 2601.0], [14.0, 2647.0], [15.0, 2608.0], [16.0, 2602.0], [18.0, 2644.0], [20.0, 2647.3333333333335], [21.0, 2642.0], [22.0, 2654.0], [23.0, 2657.0], [24.0, 2676.0], [25.0, 2650.0], [26.0, 2656.0], [27.0, 2664.0], [28.0, 2671.0], [29.0, 2670.0], [30.0, 2651.0], [33.0, 2658.5], [32.0, 2653.0], [34.0, 2668.0], [37.0, 2711.0], [36.0, 2689.5], [39.0, 2705.0], [38.0, 2706.0], [41.0, 2704.0], [40.0, 2703.0], [43.0, 2702.0], [42.0, 2702.0], [45.0, 2702.0], [44.0, 2703.0], [49.0, 2704.0], [48.0, 2702.3333333333335], [51.0, 2707.0], [50.0, 2703.0], [53.0, 2689.0], [52.0, 2695.0], [55.0, 2693.0], [54.0, 2694.0], [57.0, 2699.0], [56.0, 2692.0], [59.0, 2686.0], [58.0, 2686.0], [60.0, 2686.0], [63.0, 2652.0], [62.0, 2712.0], [67.0, 2721.0], [66.0, 2698.0], [65.0, 2650.0], [64.0, 2649.0], [71.0, 2728.0], [70.0, 2695.0], [69.0, 2693.0], [68.0, 2649.0], [75.0, 2691.0], [74.0, 2706.0], [73.0, 2752.5], [79.0, 2734.0], [78.0, 2697.0], [77.0, 2686.0], [76.0, 2733.0], [83.0, 2779.0], [82.0, 2782.0], [81.0, 2701.0], [87.0, 2690.0], [86.0, 2624.0], [85.0, 2698.0], [84.0, 2781.0], [91.0, 2793.0], [90.0, 2789.0], [89.0, 2781.0], [88.0, 2693.0], [95.0, 2695.0], [94.0, 2697.0], [93.0, 2776.0], [92.0, 2697.0], [99.0, 2767.0], [98.0, 2752.0], [97.0, 2699.0], [96.0, 2699.0], [103.0, 2716.5], [101.0, 2739.0], [100.0, 2719.0], [107.0, 2795.0], [106.0, 2723.0], [104.0, 2721.0], [111.0, 2742.0], [110.0, 2715.0], [109.0, 2711.0], [108.0, 2715.0], [114.0, 2727.0], [113.0, 2796.0], [112.0, 2724.0], [117.0, 2807.0], [123.0, 2737.0], [122.0, 2798.0], [121.0, 2796.0], [120.0, 2759.2], [126.0, 2797.0], [125.0, 2783.0], [135.0, 2795.0], [134.0, 2788.0], [132.0, 2800.0], [131.0, 2792.0], [130.0, 2784.0], [129.0, 2806.0], [128.0, 2770.3333333333335], [143.0, 2773.0], [142.0, 2804.3333333333335], [141.0, 2784.0], [139.0, 2784.3333333333335], [136.0, 2771.0], [151.0, 2796.0], [150.0, 2893.0], [149.0, 2884.0], [148.0, 2859.0], [147.0, 2813.0], [146.0, 2805.0], [159.0, 2864.0], [158.0, 2857.0], [157.0, 2882.0], [156.0, 2886.0], [155.0, 2789.0], [154.0, 2790.0], [153.0, 2952.0], [152.0, 2884.0], [167.0, 2859.0], [166.0, 2754.0], [165.0, 2766.0], [164.0, 2902.0], [162.0, 2867.0], [161.0, 2892.0], [174.0, 2826.0], [173.0, 2818.0], [172.0, 2816.0], [170.0, 2747.0], [169.0, 2746.0], [168.0, 2808.0], [183.0, 2824.0], [182.0, 2908.0], [181.0, 2835.0], [180.0, 2812.0], [179.0, 2817.0], [178.0, 2898.0], [177.0, 2811.0], [176.0, 2884.0], [191.0, 2825.0], [190.0, 2860.0], [188.0, 2888.0], [187.0, 2824.0], [186.0, 2921.0], [185.0, 2820.0], [184.0, 2831.0], [199.0, 2866.0], [198.0, 2867.0], [197.0, 2872.0], [196.0, 2880.0], [195.0, 2879.0], [194.0, 2878.0], [193.0, 2902.0], [192.0, 2833.0], [207.0, 2865.5], [205.0, 2872.0], [204.0, 2811.0], [202.0, 2904.0], [201.0, 2874.0], [215.0, 2891.0], [214.0, 2941.0], [213.0, 2886.5], [211.0, 2905.0], [210.0, 2879.0], [208.0, 2889.0], [223.0, 2792.0], [222.0, 2826.0], [221.0, 2849.0], [220.0, 2837.0], [219.0, 2831.0], [218.0, 2828.0], [217.0, 2829.0], [216.0, 2836.0], [231.0, 2919.0], [230.0, 2906.0], [229.0, 2911.0], [228.0, 2883.0], [227.0, 2838.0], [225.0, 2840.0], [224.0, 2841.0], [239.0, 2905.0], [238.0, 2907.3333333333335], [236.0, 2907.0], [234.0, 2926.5], [232.0, 2929.0], [246.0, 2966.0], [244.0, 2929.0], [242.0, 2927.0], [255.0, 2927.0], [254.0, 2928.0], [253.0, 2912.0], [252.0, 2910.0], [251.0, 2910.0], [250.0, 2991.0], [248.0, 2961.0], [271.0, 3009.0], [268.0, 2994.0], [259.0, 3011.0], [258.0, 2988.0], [257.0, 2992.0], [256.0, 2917.0], [267.0, 3008.0], [266.0, 3006.0], [265.0, 2996.0], [264.0, 2994.0], [263.0, 2962.0], [261.0, 2997.0], [260.0, 2995.0], [275.0, 2972.0], [287.0, 3036.3333333333335], [284.0, 2969.0], [282.0, 2968.0], [281.0, 3069.0], [280.0, 2989.0], [279.0, 2994.0], [278.0, 2991.0], [277.0, 2982.5], [274.0, 2969.0], [273.0, 3026.25], [291.0, 3174.0], [302.0, 3025.0], [301.0, 3066.0], [299.0, 3061.0], [297.0, 3061.5], [295.0, 2994.0], [293.0, 3088.0], [290.0, 3157.0], [289.0, 3055.5], [318.0, 3007.0], [319.0, 3021.0], [317.0, 3009.0], [316.0, 2960.0], [315.0, 2960.0], [314.0, 3011.0], [313.0, 3033.5], [311.0, 3042.0], [307.0, 3024.3333333333335], [305.0, 3131.3333333333335], [310.0, 3044.0], [308.0, 3174.0], [333.0, 3158.0], [331.0, 2208.0], [335.0, 3030.0], [334.0, 3030.0], [330.0, 3135.0], [327.0, 3041.5], [321.0, 3029.0], [320.0, 3028.0], [325.0, 3200.0], [324.0, 3021.0], [323.0, 3113.0], [322.0, 3033.0], [339.0, 1427.0], [341.0, 2234.0], [340.0, 3150.6666666666665], [344.0, 2320.5], [351.0, 3109.0], [350.0, 3207.0], [349.0, 3116.5], [347.0, 3122.0], [345.0, 3112.0], [343.0, 3041.0], [336.0, 3123.5], [338.0, 3057.0], [337.0, 3055.0], [342.0, 3035.0], [367.0, 3068.5], [365.0, 3065.0], [355.0, 3119.0], [354.0, 3196.0], [353.0, 3109.0], [352.0, 3203.0], [363.0, 3103.0], [362.0, 3124.0], [361.0, 3205.0], [360.0, 3118.0], [359.0, 3204.0], [358.0, 3192.0], [357.0, 3124.0], [356.0, 3121.0], [382.0, 3129.0], [383.0, 3097.0], [381.0, 3159.0], [371.0, 3115.0], [370.0, 3078.0], [368.0, 3021.0], [379.0, 3093.0], [378.0, 3082.0], [377.0, 3088.0], [376.0, 3187.0], [375.0, 3083.0], [374.0, 3195.0], [373.0, 3097.5], [387.0, 3166.5], [399.0, 2617.6666666666665], [397.0, 3110.3333333333335], [385.0, 3185.0], [384.0, 3090.0], [394.0, 3107.0], [393.0, 3158.0], [392.0, 3142.0], [391.0, 3070.0], [390.0, 3122.0], [389.0, 3128.0], [388.0, 3114.0], [401.0, 2251.2], [402.0, 2174.6666666666665], [404.0, 1693.0], [415.0, 3223.0], [414.0, 3200.0], [412.0, 3138.6], [403.0, 3147.0], [407.0, 3206.0], [406.0, 3192.0], [405.0, 3191.0], [428.0, 3191.0], [430.0, 3177.0], [431.0, 3184.0], [429.0, 3162.0], [427.0, 3162.6666666666665], [424.0, 3162.5], [422.0, 3161.0], [416.0, 3128.0], [419.0, 3184.0], [418.0, 3170.0], [421.0, 3123.0], [420.0, 3193.0], [446.0, 3155.0], [439.0, 1913.0], [447.0, 3220.0], [444.0, 3147.0], [434.0, 3184.0], [433.0, 3168.0], [432.0, 3166.0], [443.0, 3248.0], [442.0, 3220.0], [441.0, 3197.0], [440.0, 3239.0], [438.0, 3149.0], [437.0, 3233.0], [436.0, 3161.0], [462.0, 3207.0], [463.0, 3226.0], [461.0, 3203.0], [460.0, 3207.0], [459.0, 3206.0], [458.0, 3203.0], [457.0, 3212.0], [456.0, 3204.0], [455.0, 3204.0], [448.0, 3223.0], [450.0, 3156.0], [449.0, 3247.0], [454.0, 3212.0], [453.0, 3219.0], [452.0, 3149.0], [478.0, 3261.0], [464.0, 2620.5], [471.0, 3201.0], [470.0, 3202.5], [468.0, 3223.0], [465.0, 2612.0], [479.0, 3259.0], [477.0, 3258.0], [476.0, 3257.0], [467.0, 3215.0], [466.0, 3204.0], [475.0, 3260.0], [473.0, 3261.0], [472.0, 3209.0], [494.0, 3303.0], [495.0, 3323.0], [493.0, 3312.0], [492.0, 3312.0], [491.0, 3306.0], [490.0, 3307.0], [489.0, 3232.0], [488.0, 3239.0], [487.0, 3240.0], [481.0, 3233.0], [480.0, 3240.0], [483.0, 3233.0], [482.0, 3230.0], [486.0, 3239.0], [485.0, 3235.0], [484.0, 3235.0], [511.0, 3293.0], [503.0, 2236.0], [501.0, 2720.5], [500.0, 3288.0], [504.0, 2201.0], [505.0, 3265.5], [510.0, 3295.0], [509.0, 3218.0], [508.0, 3300.0], [499.0, 3219.0], [498.0, 3291.0], [497.0, 3215.0], [496.0, 3233.0], [507.0, 3217.0], [506.0, 3305.0], [538.0, 3096.8], [522.0, 2917.0], [520.0, 3238.0], [523.0, 3324.0], [524.0, 2787.5], [537.0, 2404.0], [519.0, 3238.0], [518.0, 3267.0], [517.0, 3250.0], [515.0, 3298.0], [514.0, 3298.0], [513.0, 3299.0], [512.0, 3291.0], [526.0, 3299.0], [525.0, 3224.0], [539.0, 2589.2], [543.0, 3268.0], [529.0, 3276.3333333333335], [541.0, 3276.5], [534.0, 3269.0], [532.0, 3308.0], [570.0, 3309.5], [545.0, 2992.0], [548.0, 3082.0], [550.0, 3258.0], [549.0, 3343.0], [558.0, 2513.0], [557.0, 3298.5], [555.0, 3300.0], [554.0, 3220.0], [552.0, 3301.0], [559.0, 2441.6666666666665], [561.0, 2536.0], [565.0, 3316.666666666667], [562.0, 3212.0], [567.0, 3212.0], [566.0, 3289.0], [573.0, 3290.0], [572.0, 3407.0], [568.0, 3290.0], [551.0, 3268.0], [602.0, 3342.5], [606.0, 3291.0], [607.0, 3287.0], [593.0, 3271.0], [592.0, 3271.0], [595.0, 3396.0], [594.0, 3392.0], [605.0, 3314.0], [604.0, 3288.0], [603.0, 3289.0], [600.0, 3307.3333333333335], [583.0, 3315.0], [580.0, 3402.0], [578.0, 3322.0], [577.0, 3290.0], [576.0, 3289.0], [591.0, 3393.0], [590.0, 3308.0], [589.0, 3394.0], [588.0, 3318.2], [585.0, 3281.0], [584.0, 3282.5], [597.0, 3269.0], [596.0, 3306.0], [638.0, 3299.3333333333335], [613.0, 3154.5], [623.0, 3240.0], [611.0, 3286.0], [610.0, 3282.5], [622.0, 3243.0], [621.0, 3255.0], [620.0, 3305.0], [619.0, 3313.0], [618.0, 3253.0], [617.0, 3333.0], [639.0, 3302.0], [625.0, 3316.0], [624.0, 3303.0], [636.0, 3287.0], [634.0, 3283.5], [632.0, 3229.0], [615.0, 3357.0], [630.0, 3264.0], [628.0, 3316.0], [627.0, 3316.0], [626.0, 3247.0], [666.0, 3228.0], [671.0, 3334.0], [669.0, 970.0], [658.0, 2670.0], [657.0, 3366.0], [656.0, 3389.0], [659.0, 3301.0], [661.0, 3347.0], [660.0, 3349.0], [668.0, 1903.0], [670.0, 3334.0], [665.0, 3291.5], [647.0, 3304.0], [646.0, 3306.0], [645.0, 3307.0], [644.0, 3305.0], [643.0, 3232.0], [642.0, 3308.0], [641.0, 3307.0], [640.0, 3307.0], [655.0, 3307.0], [654.0, 3299.0], [653.0, 3300.0], [652.0, 3301.0], [651.0, 3302.0], [650.0, 3303.5], [648.0, 3304.0], [663.0, 3265.0], [662.0, 3266.0], [698.0, 3289.0], [676.0, 1000.0], [675.0, 3248.0], [674.0, 3249.0], [673.0, 3323.6], [687.0, 3302.0], [686.0, 3304.0], [685.0, 3212.0], [684.0, 3309.0], [683.0, 3312.0], [682.0, 3315.0], [681.0, 3298.0], [680.0, 3311.2], [679.0, 1723.0], [703.0, 3241.5], [689.0, 3297.0], [688.0, 3298.0], [693.0, 3293.0], [691.0, 3294.5], [702.0, 3283.0], [700.0, 3285.0], [697.0, 3288.0], [696.0, 3291.0], [695.0, 3408.0], [694.0, 3292.0], [732.0, 3387.0], [718.0, 3353.0], [717.0, 3399.0], [716.0, 3394.0], [715.0, 3387.0], [714.0, 3393.0], [713.0, 3347.0], [712.0, 3393.0], [719.0, 3386.0], [707.0, 3278.3333333333335], [704.0, 3244.0], [709.0, 3239.0], [708.0, 3241.0], [711.0, 3404.0], [710.0, 3235.0], [735.0, 3390.0], [721.0, 3389.0], [720.0, 3220.0], [723.0, 3389.0], [722.0, 3387.0], [725.0, 3386.0], [724.0, 3388.0], [727.0, 3384.0], [726.0, 3385.0], [734.0, 3389.0], [733.0, 3391.0], [731.0, 3386.0], [730.0, 3382.0], [729.0, 3384.0], [728.0, 3399.0], [764.0, 3415.0], [767.0, 3386.0], [752.0, 3384.0], [754.0, 3413.0], [753.0, 3383.0], [757.0, 3358.0], [755.0, 3387.0], [766.0, 3389.0], [765.0, 3413.0], [763.0, 3386.0], [762.0, 3386.0], [761.0, 3397.0], [760.0, 3422.0], [751.0, 3394.0], [736.0, 3350.0], [738.0, 3354.0], [737.0, 3339.0], [740.0, 3359.0], [739.0, 3353.0], [743.0, 3421.0], [742.0, 3421.5], [750.0, 3411.0], [749.0, 3395.0], [748.0, 3410.0], [747.0, 3390.0], [746.0, 3390.0], [745.0, 3349.0], [744.0, 3346.0], [759.0, 3412.0], [758.0, 3392.0], [796.0, 3369.0], [799.0, 3386.0], [784.0, 3322.0], [786.0, 3378.0], [785.0, 3377.0], [789.0, 3375.0], [788.0, 3383.0], [798.0, 3394.0], [797.0, 3374.0], [795.0, 3396.0], [794.0, 3400.0], [793.0, 3391.0], [792.0, 3377.0], [783.0, 3391.5], [769.0, 3385.0], [768.0, 3386.0], [771.0, 3347.0], [770.0, 3402.0], [773.0, 3346.0], [772.0, 3354.0], [775.0, 3401.0], [774.0, 3395.0], [781.0, 3385.0], [780.0, 3351.0], [779.0, 3312.0], [778.0, 3400.0], [777.0, 3347.0], [776.0, 3348.0], [791.0, 3375.0], [790.0, 3394.0], [824.0, 3420.0], [829.0, 3464.5], [810.0, 3591.5], [809.0, 3325.0], [808.0, 3357.0], [811.0, 3412.0], [813.0, 3419.0], [812.0, 3403.0], [815.0, 3412.0], [800.0, 3380.0], [802.0, 3364.0], [801.0, 3433.0], [804.0, 3441.0], [803.0, 3316.0], [807.0, 3432.0], [805.0, 3446.0], [814.0, 3414.0], [830.0, 3465.0], [817.0, 3403.0], [816.0, 3414.0], [819.0, 3414.0], [818.0, 3403.0], [821.0, 3421.0], [820.0, 3408.0], [827.0, 3466.0], [826.0, 3413.0], [825.0, 3409.0], [823.0, 3409.0], [822.0, 3415.0], [860.0, 3474.0], [863.0, 3754.5], [849.0, 3480.0], [848.0, 3430.0], [851.0, 3479.0], [850.0, 3478.0], [853.0, 3473.0], [852.0, 3479.0], [862.0, 3472.0], [861.0, 3473.0], [859.0, 3476.0], [858.0, 3486.0], [857.0, 3490.0], [856.0, 3494.0], [847.0, 3450.0], [833.0, 3468.0], [832.0, 3466.0], [835.0, 3465.0], [834.0, 3385.0], [838.0, 3467.0], [837.0, 3465.5], [846.0, 3460.0], [845.0, 3452.0], [844.0, 3449.0], [843.0, 3453.0], [842.0, 3454.0], [841.0, 3450.0], [840.0, 3449.5], [855.0, 3504.0], [854.0, 3498.0], [892.0, 3566.0], [895.0, 3562.0], [881.0, 3544.0], [880.0, 3506.0], [883.0, 3505.0], [882.0, 3521.0], [885.0, 3502.0], [884.0, 3504.0], [894.0, 3564.0], [893.0, 3561.0], [891.0, 3519.0], [890.0, 3518.0], [889.0, 3520.0], [888.0, 3512.0], [879.0, 3501.0], [865.0, 3471.0], [864.0, 3461.0], [867.0, 3481.0], [866.0, 3477.0], [869.0, 3485.0], [868.0, 3486.0], [871.0, 3477.0], [870.0, 3477.0], [878.0, 3499.0], [877.0, 3498.0], [876.0, 3500.0], [875.0, 3494.0], [874.0, 3489.0], [873.0, 3490.0], [872.0, 3441.0], [887.0, 3510.0], [886.0, 3507.0], [924.0, 3338.0], [898.0, 3868.5], [897.0, 3521.0], [896.0, 3519.0], [911.0, 3564.0], [910.0, 3568.0], [909.0, 3565.0], [908.0, 3565.0], [907.0, 3530.0], [906.0, 3528.0], [905.0, 3525.0], [904.0, 3524.0], [899.0, 3873.0], [927.0, 3411.0], [912.0, 3573.0], [915.0, 3570.0], [914.0, 3559.5], [917.0, 3547.0], [916.0, 3561.0], [919.0, 3390.0], [918.0, 3525.0], [926.0, 3337.0], [925.0, 3333.0], [923.0, 3336.0], [922.0, 3336.0], [921.0, 3334.0], [920.0, 3381.0], [903.0, 3522.0], [902.0, 3527.0], [901.0, 3525.0], [900.0, 3522.0], [956.0, 3585.321428571429], [959.0, 3512.1874999999995], [945.0, 3422.517241379311], [944.0, 3448.7272727272725], [947.0, 3329.791666666667], [946.0, 3385.5526315789475], [949.0, 3301.3333333333335], [948.0, 3303.4], [958.0, 3528.0], [957.0, 3496.8750000000005], [955.0, 3601.25], [954.0, 3522.7961165048555], [953.0, 3297.878260869564], [952.0, 3334.5714285714284], [943.0, 3421.3750000000005], [928.0, 3410.0], [930.0, 3399.0], [929.0, 3408.0], [932.0, 3394.0], [931.0, 3400.0], [935.0, 3399.5], [933.0, 3429.0], [942.0, 3412.0], [941.0, 3404.0], [940.0, 3407.0], [939.0, 3393.6666666666665], [936.0, 3395.0], [951.0, 3307.076923076923], [950.0, 3301.9999999999995], [988.0, 3606.476744186048], [960.0, 3519.6250000000005], [963.0, 3592.4], [962.0, 3568.1333333333337], [965.0, 3589.1578947368425], [964.0, 3595.6363636363635], [967.0, 3531.6666666666665], [966.0, 3510.5], [975.0, 3680.6666666666665], [974.0, 3684.0], [973.0, 3687.833333333333], [972.0, 3673.727272727272], [971.0, 3611.0], [970.0, 3636.583333333333], [969.0, 3661.0], [968.0, 3614.6363636363635], [991.0, 3602.0], [977.0, 3762.0], [979.0, 3615.0], [978.0, 3615.416666666666], [981.0, 3612.0], [980.0, 3654.285714285714], [983.0, 3601.3000000000006], [982.0, 3603.5714285714284], [990.0, 3601.5], [989.0, 3601.6], [987.0, 3603.0], [986.0, 3631.8666666666672], [985.0, 3604.275862068965], [984.0, 3607.0], [996.0, 3629.125], [1000.0, 5082.238248790769], [999.0, 3632.7857142857138], [998.0, 3616.0], [997.0, 3615.5], [995.0, 3614.6666666666665], [994.0, 3624.0], [993.0, 3612.5], [992.0, 3599.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[944.5462999999978, 4735.859200000006]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 88.15, "minX": 1.61786088E12, "maxY": 27684.6, "series": [{"data": [[1.61786094E12, 27684.6], [1.61786088E12, 130.13333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61786094E12, 20411.85], [1.61786088E12, 88.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61786094E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2072.2093023255816, "minX": 1.61786088E12, "maxY": 4747.362358140021, "series": [{"data": [[1.61786094E12, 4747.362358140021], [1.61786088E12, 2072.2093023255816]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61786094E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2072.046511627907, "minX": 1.61786088E12, "maxY": 4747.349804157877, "series": [{"data": [[1.61786094E12, 4747.349804157877], [1.61786088E12, 2072.046511627907]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61786094E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6048006427638861, "minX": 1.61786088E12, "maxY": 53.18604651162791, "series": [{"data": [[1.61786094E12, 0.6048006427638861], [1.61786088E12, 53.18604651162791]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61786094E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1614.0, "minX": 1.61786088E12, "maxY": 12246.0, "series": [{"data": [[1.61786094E12, 12246.0], [1.61786088E12, 3312.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61786094E12, 7221.600000000008], [1.61786088E12, 2645.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61786094E12, 9592.279999999995], [1.61786088E12, 3312.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61786094E12, 8583.399999999998], [1.61786088E12, 3255.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61786094E12, 2584.0], [1.61786088E12, 1614.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61786094E12, 4481.0], [1.61786088E12, 2323.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61786094E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 41.0, "minX": 1.0, "maxY": 8894.5, "series": [{"data": [[32.0, 7151.0], [559.0, 3116.0], [51.0, 7594.0], [59.0, 8737.0], [69.0, 5420.0], [79.0, 2685.0], [82.0, 6999.0], [81.0, 4675.0], [87.0, 5198.0], [6.0, 4218.5], [111.0, 8394.0], [8.0, 3237.0], [129.0, 3520.0], [141.0, 5381.0], [158.0, 4538.0], [161.0, 8237.0], [169.0, 3597.0], [182.0, 5264.5], [178.0, 4852.0], [185.0, 4187.0], [192.0, 8529.5], [199.0, 8645.0], [203.0, 5082.0], [208.0, 8894.5], [212.0, 3389.0], [222.0, 5199.5], [225.0, 5195.0], [233.0, 3526.0], [244.0, 4497.5], [240.0, 5548.0], [1.0, 4912.0], [16.0, 6146.0], [263.0, 5187.0], [266.0, 3391.0], [282.0, 6306.5], [277.0, 5221.0], [281.0, 5185.0], [293.0, 3713.0], [305.0, 4968.0], [312.0, 3397.5], [327.0, 4683.0], [337.0, 4106.0], [345.0, 3512.0], [354.0, 3357.5], [362.0, 3600.0], [393.0, 3315.0], [420.0, 3919.0], [31.0, 2251.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 1428.0], [8.0, 1723.0], [354.0, 41.0], [362.0, 198.0], [233.0, 68.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 559.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 41.0, "minX": 1.0, "maxY": 8894.5, "series": [{"data": [[32.0, 7151.0], [559.0, 3116.0], [51.0, 7594.0], [59.0, 8737.0], [69.0, 5420.0], [79.0, 2685.0], [82.0, 6999.0], [81.0, 4675.0], [87.0, 5198.0], [6.0, 4218.5], [111.0, 8394.0], [8.0, 3237.0], [129.0, 3520.0], [141.0, 5381.0], [158.0, 4538.0], [161.0, 8237.0], [169.0, 3597.0], [182.0, 5264.5], [178.0, 4852.0], [185.0, 4187.0], [192.0, 8529.5], [199.0, 8645.0], [203.0, 5082.0], [208.0, 8894.5], [212.0, 3389.0], [222.0, 5199.5], [225.0, 5195.0], [233.0, 3526.0], [244.0, 4497.5], [240.0, 5548.0], [1.0, 4912.0], [16.0, 6146.0], [263.0, 5187.0], [266.0, 3391.0], [282.0, 6306.5], [277.0, 5221.0], [281.0, 5185.0], [293.0, 3713.0], [305.0, 4968.0], [312.0, 3397.5], [327.0, 4683.0], [337.0, 4106.0], [345.0, 3512.0], [354.0, 3357.5], [362.0, 3600.0], [393.0, 3315.0], [420.0, 3919.0], [31.0, 2251.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 1428.0], [8.0, 1723.0], [354.0, 41.0], [362.0, 198.0], [233.0, 68.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 559.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.45, "minX": 1.61786088E12, "maxY": 153.21666666666667, "series": [{"data": [[1.61786094E12, 153.21666666666667], [1.61786088E12, 13.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61786094E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.61786088E12, "maxY": 165.85, "series": [{"data": [[1.61786094E12, 165.85], [1.61786088E12, 0.5666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61786094E12, 0.1], [1.61786088E12, 0.15]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61786094E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.61786088E12, "maxY": 165.85, "series": [{"data": [[1.61786094E12, 0.1], [1.61786088E12, 0.15]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.61786094E12, 165.85], [1.61786088E12, 0.5666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61786094E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.61786088E12, "maxY": 165.85, "series": [{"data": [[1.61786094E12, 165.85], [1.61786088E12, 0.5666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61786094E12, 0.1], [1.61786088E12, 0.15]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61786094E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

