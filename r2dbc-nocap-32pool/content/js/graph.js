/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 554.0, "minX": 0.0, "maxY": 17167.0, "series": [{"data": [[0.0, 554.0], [0.1, 2738.0], [0.2, 2814.0], [0.3, 2832.0], [0.4, 2854.0], [0.5, 2865.0], [0.6, 2870.0], [0.7, 2887.0], [0.8, 2902.0], [0.9, 2977.0], [1.0, 2989.0], [1.1, 3011.0], [1.2, 3028.0], [1.3, 3048.0], [1.4, 3095.0], [1.5, 3119.0], [1.6, 3142.0], [1.7, 3171.0], [1.8, 3223.0], [1.9, 3234.0], [2.0, 3244.0], [2.1, 3257.0], [2.2, 3271.0], [2.3, 3283.0], [2.4, 3302.0], [2.5, 3314.0], [2.6, 3325.0], [2.7, 3335.0], [2.8, 3379.0], [2.9, 3393.0], [3.0, 3396.0], [3.1, 3433.0], [3.2, 3522.0], [3.3, 3637.0], [3.4, 3644.0], [3.5, 3655.0], [3.6, 3661.0], [3.7, 3670.0], [3.8, 3677.0], [3.9, 3684.0], [4.0, 3688.0], [4.1, 3692.0], [4.2, 3695.0], [4.3, 3699.0], [4.4, 3700.0], [4.5, 3704.0], [4.6, 3707.0], [4.7, 3709.0], [4.8, 3712.0], [4.9, 3716.0], [5.0, 3718.0], [5.1, 3720.0], [5.2, 3723.0], [5.3, 3724.0], [5.4, 3726.0], [5.5, 3728.0], [5.6, 3731.0], [5.7, 3735.0], [5.8, 3739.0], [5.9, 3743.0], [6.0, 3746.0], [6.1, 3752.0], [6.2, 3755.0], [6.3, 3760.0], [6.4, 3768.0], [6.5, 3775.0], [6.6, 3782.0], [6.7, 3787.0], [6.8, 3793.0], [6.9, 3801.0], [7.0, 3807.0], [7.1, 3810.0], [7.2, 3813.0], [7.3, 3815.0], [7.4, 3816.0], [7.5, 3819.0], [7.6, 3821.0], [7.7, 3823.0], [7.8, 3825.0], [7.9, 3827.0], [8.0, 3830.0], [8.1, 3832.0], [8.2, 3834.0], [8.3, 3836.0], [8.4, 3838.0], [8.5, 3840.0], [8.6, 3841.0], [8.7, 3843.0], [8.8, 3846.0], [8.9, 3849.0], [9.0, 3852.0], [9.1, 3854.0], [9.2, 3858.0], [9.3, 3861.0], [9.4, 3863.0], [9.5, 3865.0], [9.6, 3867.0], [9.7, 3869.0], [9.8, 3870.0], [9.9, 3872.0], [10.0, 3872.0], [10.1, 3874.0], [10.2, 3874.0], [10.3, 3875.0], [10.4, 3876.0], [10.5, 3876.0], [10.6, 3878.0], [10.7, 3879.0], [10.8, 3880.0], [10.9, 3881.0], [11.0, 3882.0], [11.1, 3884.0], [11.2, 3885.0], [11.3, 3886.0], [11.4, 3887.0], [11.5, 3887.0], [11.6, 3888.0], [11.7, 3889.0], [11.8, 3890.0], [11.9, 3891.0], [12.0, 3892.0], [12.1, 3892.0], [12.2, 3894.0], [12.3, 3895.0], [12.4, 3896.0], [12.5, 3897.0], [12.6, 3898.0], [12.7, 3899.0], [12.8, 3899.0], [12.9, 3900.0], [13.0, 3901.0], [13.1, 3901.0], [13.2, 3902.0], [13.3, 3903.0], [13.4, 3903.0], [13.5, 3904.0], [13.6, 3905.0], [13.7, 3905.0], [13.8, 3906.0], [13.9, 3906.0], [14.0, 3907.0], [14.1, 3907.0], [14.2, 3908.0], [14.3, 3909.0], [14.4, 3909.0], [14.5, 3910.0], [14.6, 3910.0], [14.7, 3911.0], [14.8, 3912.0], [14.9, 3912.0], [15.0, 3913.0], [15.1, 3914.0], [15.2, 3914.0], [15.3, 3915.0], [15.4, 3916.0], [15.5, 3917.0], [15.6, 3918.0], [15.7, 3919.0], [15.8, 3920.0], [15.9, 3921.0], [16.0, 3924.0], [16.1, 3925.0], [16.2, 3926.0], [16.3, 3927.0], [16.4, 3928.0], [16.5, 3928.0], [16.6, 3929.0], [16.7, 3930.0], [16.8, 3931.0], [16.9, 3932.0], [17.0, 3933.0], [17.1, 3934.0], [17.2, 3935.0], [17.3, 3937.0], [17.4, 3938.0], [17.5, 3940.0], [17.6, 3941.0], [17.7, 3943.0], [17.8, 3945.0], [17.9, 3946.0], [18.0, 3948.0], [18.1, 3949.0], [18.2, 3950.0], [18.3, 3952.0], [18.4, 3953.0], [18.5, 3955.0], [18.6, 3957.0], [18.7, 3960.0], [18.8, 3962.0], [18.9, 3964.0], [19.0, 3966.0], [19.1, 3968.0], [19.2, 3969.0], [19.3, 3971.0], [19.4, 3973.0], [19.5, 3976.0], [19.6, 3978.0], [19.7, 3981.0], [19.8, 3985.0], [19.9, 3986.0], [20.0, 3987.0], [20.1, 3989.0], [20.2, 3991.0], [20.3, 3992.0], [20.4, 3993.0], [20.5, 3995.0], [20.6, 3996.0], [20.7, 3997.0], [20.8, 3998.0], [20.9, 3999.0], [21.0, 4000.0], [21.1, 4001.0], [21.2, 4002.0], [21.3, 4003.0], [21.4, 4005.0], [21.5, 4006.0], [21.6, 4007.0], [21.7, 4009.0], [21.8, 4010.0], [21.9, 4011.0], [22.0, 4012.0], [22.1, 4013.0], [22.2, 4014.0], [22.3, 4015.0], [22.4, 4017.0], [22.5, 4018.0], [22.6, 4018.0], [22.7, 4020.0], [22.8, 4022.0], [22.9, 4023.0], [23.0, 4025.0], [23.1, 4027.0], [23.2, 4028.0], [23.3, 4030.0], [23.4, 4032.0], [23.5, 4033.0], [23.6, 4034.0], [23.7, 4036.0], [23.8, 4038.0], [23.9, 4040.0], [24.0, 4044.0], [24.1, 4047.0], [24.2, 4049.0], [24.3, 4051.0], [24.4, 4054.0], [24.5, 4056.0], [24.6, 4058.0], [24.7, 4059.0], [24.8, 4060.0], [24.9, 4063.0], [25.0, 4065.0], [25.1, 4066.0], [25.2, 4067.0], [25.3, 4069.0], [25.4, 4070.0], [25.5, 4071.0], [25.6, 4072.0], [25.7, 4073.0], [25.8, 4074.0], [25.9, 4075.0], [26.0, 4076.0], [26.1, 4077.0], [26.2, 4077.0], [26.3, 4078.0], [26.4, 4080.0], [26.5, 4081.0], [26.6, 4084.0], [26.7, 4085.0], [26.8, 4086.0], [26.9, 4087.0], [27.0, 4089.0], [27.1, 4090.0], [27.2, 4091.0], [27.3, 4094.0], [27.4, 4099.0], [27.5, 4100.0], [27.6, 4105.0], [27.7, 4108.0], [27.8, 4112.0], [27.9, 4114.0], [28.0, 4116.0], [28.1, 4117.0], [28.2, 4120.0], [28.3, 4122.0], [28.4, 4126.0], [28.5, 4130.0], [28.6, 4134.0], [28.7, 4138.0], [28.8, 4140.0], [28.9, 4144.0], [29.0, 4150.0], [29.1, 4155.0], [29.2, 4158.0], [29.3, 4160.0], [29.4, 4161.0], [29.5, 4164.0], [29.6, 4167.0], [29.7, 4168.0], [29.8, 4171.0], [29.9, 4174.0], [30.0, 4178.0], [30.1, 4180.0], [30.2, 4182.0], [30.3, 4185.0], [30.4, 4188.0], [30.5, 4199.0], [30.6, 4210.0], [30.7, 4230.0], [30.8, 4359.0], [30.9, 4389.0], [31.0, 4404.0], [31.1, 4434.0], [31.2, 4457.0], [31.3, 4501.0], [31.4, 4511.0], [31.5, 4520.0], [31.6, 4528.0], [31.7, 4532.0], [31.8, 4540.0], [31.9, 4547.0], [32.0, 4553.0], [32.1, 4562.0], [32.2, 4568.0], [32.3, 4571.0], [32.4, 4574.0], [32.5, 4578.0], [32.6, 4581.0], [32.7, 4593.0], [32.8, 4597.0], [32.9, 4601.0], [33.0, 4604.0], [33.1, 4607.0], [33.2, 4609.0], [33.3, 4612.0], [33.4, 4617.0], [33.5, 4621.0], [33.6, 4623.0], [33.7, 4629.0], [33.8, 4632.0], [33.9, 4642.0], [34.0, 4647.0], [34.1, 4655.0], [34.2, 4667.0], [34.3, 4676.0], [34.4, 4681.0], [34.5, 4686.0], [34.6, 4690.0], [34.7, 4692.0], [34.8, 4694.0], [34.9, 4701.0], [35.0, 4706.0], [35.1, 4711.0], [35.2, 4714.0], [35.3, 4717.0], [35.4, 4721.0], [35.5, 4726.0], [35.6, 4731.0], [35.7, 4737.0], [35.8, 4743.0], [35.9, 4747.0], [36.0, 4752.0], [36.1, 4756.0], [36.2, 4761.0], [36.3, 4766.0], [36.4, 4771.0], [36.5, 4778.0], [36.6, 4781.0], [36.7, 4786.0], [36.8, 4792.0], [36.9, 4795.0], [37.0, 4798.0], [37.1, 4800.0], [37.2, 4803.0], [37.3, 4805.0], [37.4, 4807.0], [37.5, 4809.0], [37.6, 4811.0], [37.7, 4812.0], [37.8, 4814.0], [37.9, 4816.0], [38.0, 4817.0], [38.1, 4818.0], [38.2, 4820.0], [38.3, 4822.0], [38.4, 4824.0], [38.5, 4828.0], [38.6, 4829.0], [38.7, 4832.0], [38.8, 4835.0], [38.9, 4838.0], [39.0, 4840.0], [39.1, 4841.0], [39.2, 4843.0], [39.3, 4848.0], [39.4, 4852.0], [39.5, 4855.0], [39.6, 4858.0], [39.7, 4860.0], [39.8, 4864.0], [39.9, 4869.0], [40.0, 4871.0], [40.1, 4873.0], [40.2, 4876.0], [40.3, 4878.0], [40.4, 4880.0], [40.5, 4883.0], [40.6, 4885.0], [40.7, 4886.0], [40.8, 4887.0], [40.9, 4888.0], [41.0, 4889.0], [41.1, 4890.0], [41.2, 4892.0], [41.3, 4893.0], [41.4, 4894.0], [41.5, 4896.0], [41.6, 4897.0], [41.7, 4898.0], [41.8, 4899.0], [41.9, 4901.0], [42.0, 4902.0], [42.1, 4906.0], [42.2, 4908.0], [42.3, 4912.0], [42.4, 4914.0], [42.5, 4915.0], [42.6, 4917.0], [42.7, 4920.0], [42.8, 4923.0], [42.9, 4926.0], [43.0, 4930.0], [43.1, 4931.0], [43.2, 4933.0], [43.3, 4937.0], [43.4, 4940.0], [43.5, 4942.0], [43.6, 4944.0], [43.7, 4947.0], [43.8, 4953.0], [43.9, 4955.0], [44.0, 4957.0], [44.1, 4962.0], [44.2, 4964.0], [44.3, 4967.0], [44.4, 4969.0], [44.5, 4973.0], [44.6, 4974.0], [44.7, 4975.0], [44.8, 4976.0], [44.9, 4977.0], [45.0, 4978.0], [45.1, 4979.0], [45.2, 4980.0], [45.3, 4981.0], [45.4, 4982.0], [45.5, 4982.0], [45.6, 4984.0], [45.7, 4985.0], [45.8, 4986.0], [45.9, 4988.0], [46.0, 4990.0], [46.1, 4991.0], [46.2, 4993.0], [46.3, 4993.0], [46.4, 4995.0], [46.5, 4996.0], [46.6, 4997.0], [46.7, 4998.0], [46.8, 4999.0], [46.9, 5000.0], [47.0, 5001.0], [47.1, 5002.0], [47.2, 5003.0], [47.3, 5004.0], [47.4, 5005.0], [47.5, 5006.0], [47.6, 5008.0], [47.7, 5009.0], [47.8, 5011.0], [47.9, 5013.0], [48.0, 5014.0], [48.1, 5017.0], [48.2, 5020.0], [48.3, 5021.0], [48.4, 5024.0], [48.5, 5026.0], [48.6, 5029.0], [48.7, 5031.0], [48.8, 5032.0], [48.9, 5035.0], [49.0, 5037.0], [49.1, 5041.0], [49.2, 5044.0], [49.3, 5048.0], [49.4, 5052.0], [49.5, 5054.0], [49.6, 5056.0], [49.7, 5059.0], [49.8, 5062.0], [49.9, 5064.0], [50.0, 5067.0], [50.1, 5069.0], [50.2, 5071.0], [50.3, 5074.0], [50.4, 5077.0], [50.5, 5079.0], [50.6, 5081.0], [50.7, 5084.0], [50.8, 5085.0], [50.9, 5086.0], [51.0, 5088.0], [51.1, 5091.0], [51.2, 5092.0], [51.3, 5094.0], [51.4, 5095.0], [51.5, 5098.0], [51.6, 5101.0], [51.7, 5103.0], [51.8, 5104.0], [51.9, 5106.0], [52.0, 5107.0], [52.1, 5108.0], [52.2, 5109.0], [52.3, 5111.0], [52.4, 5114.0], [52.5, 5118.0], [52.6, 5120.0], [52.7, 5122.0], [52.8, 5126.0], [52.9, 5128.0], [53.0, 5131.0], [53.1, 5133.0], [53.2, 5135.0], [53.3, 5141.0], [53.4, 5144.0], [53.5, 5148.0], [53.6, 5151.0], [53.7, 5154.0], [53.8, 5161.0], [53.9, 5167.0], [54.0, 5172.0], [54.1, 5176.0], [54.2, 5188.0], [54.3, 5193.0], [54.4, 5196.0], [54.5, 5200.0], [54.6, 5206.0], [54.7, 5209.0], [54.8, 5214.0], [54.9, 5221.0], [55.0, 5227.0], [55.1, 5235.0], [55.2, 5241.0], [55.3, 5245.0], [55.4, 5253.0], [55.5, 5264.0], [55.6, 5277.0], [55.7, 5282.0], [55.8, 5292.0], [55.9, 5297.0], [56.0, 5303.0], [56.1, 5309.0], [56.2, 5311.0], [56.3, 5316.0], [56.4, 5325.0], [56.5, 5331.0], [56.6, 5340.0], [56.7, 5346.0], [56.8, 5355.0], [56.9, 5364.0], [57.0, 5369.0], [57.1, 5376.0], [57.2, 5379.0], [57.3, 5381.0], [57.4, 5384.0], [57.5, 5386.0], [57.6, 5388.0], [57.7, 5390.0], [57.8, 5393.0], [57.9, 5396.0], [58.0, 5400.0], [58.1, 5403.0], [58.2, 5407.0], [58.3, 5408.0], [58.4, 5410.0], [58.5, 5414.0], [58.6, 5416.0], [58.7, 5418.0], [58.8, 5422.0], [58.9, 5424.0], [59.0, 5426.0], [59.1, 5428.0], [59.2, 5430.0], [59.3, 5432.0], [59.4, 5434.0], [59.5, 5436.0], [59.6, 5438.0], [59.7, 5440.0], [59.8, 5442.0], [59.9, 5445.0], [60.0, 5447.0], [60.1, 5449.0], [60.2, 5453.0], [60.3, 5457.0], [60.4, 5461.0], [60.5, 5465.0], [60.6, 5470.0], [60.7, 5473.0], [60.8, 5475.0], [60.9, 5477.0], [61.0, 5479.0], [61.1, 5480.0], [61.2, 5481.0], [61.3, 5482.0], [61.4, 5484.0], [61.5, 5486.0], [61.6, 5486.0], [61.7, 5487.0], [61.8, 5489.0], [61.9, 5490.0], [62.0, 5492.0], [62.1, 5494.0], [62.2, 5496.0], [62.3, 5498.0], [62.4, 5500.0], [62.5, 5501.0], [62.6, 5502.0], [62.7, 5504.0], [62.8, 5506.0], [62.9, 5508.0], [63.0, 5512.0], [63.1, 5514.0], [63.2, 5518.0], [63.3, 5521.0], [63.4, 5527.0], [63.5, 5532.0], [63.6, 5536.0], [63.7, 5540.0], [63.8, 5548.0], [63.9, 5552.0], [64.0, 5560.0], [64.1, 5565.0], [64.2, 5575.0], [64.3, 5579.0], [64.4, 5583.0], [64.5, 5587.0], [64.6, 5591.0], [64.7, 5595.0], [64.8, 5599.0], [64.9, 5602.0], [65.0, 5606.0], [65.1, 5612.0], [65.2, 5616.0], [65.3, 5627.0], [65.4, 5636.0], [65.5, 5660.0], [65.6, 5670.0], [65.7, 5675.0], [65.8, 5682.0], [65.9, 5686.0], [66.0, 5691.0], [66.1, 5695.0], [66.2, 5700.0], [66.3, 5703.0], [66.4, 5705.0], [66.5, 5707.0], [66.6, 5710.0], [66.7, 5712.0], [66.8, 5714.0], [66.9, 5717.0], [67.0, 5719.0], [67.1, 5720.0], [67.2, 5722.0], [67.3, 5724.0], [67.4, 5725.0], [67.5, 5727.0], [67.6, 5728.0], [67.7, 5730.0], [67.8, 5731.0], [67.9, 5733.0], [68.0, 5734.0], [68.1, 5736.0], [68.2, 5741.0], [68.3, 5744.0], [68.4, 5744.0], [68.5, 5746.0], [68.6, 5747.0], [68.7, 5749.0], [68.8, 5751.0], [68.9, 5752.0], [69.0, 5754.0], [69.1, 5755.0], [69.2, 5757.0], [69.3, 5759.0], [69.4, 5763.0], [69.5, 5765.0], [69.6, 5767.0], [69.7, 5768.0], [69.8, 5770.0], [69.9, 5772.0], [70.0, 5773.0], [70.1, 5774.0], [70.2, 5775.0], [70.3, 5776.0], [70.4, 5777.0], [70.5, 5778.0], [70.6, 5778.0], [70.7, 5780.0], [70.8, 5781.0], [70.9, 5782.0], [71.0, 5783.0], [71.1, 5785.0], [71.2, 5786.0], [71.3, 5786.0], [71.4, 5787.0], [71.5, 5788.0], [71.6, 5788.0], [71.7, 5789.0], [71.8, 5790.0], [71.9, 5791.0], [72.0, 5792.0], [72.1, 5793.0], [72.2, 5794.0], [72.3, 5795.0], [72.4, 5796.0], [72.5, 5798.0], [72.6, 5800.0], [72.7, 5802.0], [72.8, 5806.0], [72.9, 5808.0], [73.0, 5812.0], [73.1, 5817.0], [73.2, 5820.0], [73.3, 5824.0], [73.4, 5827.0], [73.5, 5830.0], [73.6, 5834.0], [73.7, 5838.0], [73.8, 5846.0], [73.9, 5858.0], [74.0, 5864.0], [74.1, 5876.0], [74.2, 5884.0], [74.3, 5891.0], [74.4, 5897.0], [74.5, 5900.0], [74.6, 5904.0], [74.7, 5912.0], [74.8, 5921.0], [74.9, 5925.0], [75.0, 5931.0], [75.1, 5936.0], [75.2, 5945.0], [75.3, 5950.0], [75.4, 5956.0], [75.5, 5965.0], [75.6, 5971.0], [75.7, 5977.0], [75.8, 5984.0], [75.9, 5988.0], [76.0, 5991.0], [76.1, 5994.0], [76.2, 6001.0], [76.3, 6005.0], [76.4, 6009.0], [76.5, 6014.0], [76.6, 6024.0], [76.7, 6033.0], [76.8, 6043.0], [76.9, 6051.0], [77.0, 6058.0], [77.1, 6064.0], [77.2, 6073.0], [77.3, 6079.0], [77.4, 6087.0], [77.5, 6098.0], [77.6, 6113.0], [77.7, 6129.0], [77.8, 6138.0], [77.9, 6166.0], [78.0, 6186.0], [78.1, 6196.0], [78.2, 6202.0], [78.3, 6205.0], [78.4, 6209.0], [78.5, 6212.0], [78.6, 6222.0], [78.7, 6235.0], [78.8, 6263.0], [78.9, 6280.0], [79.0, 6290.0], [79.1, 6303.0], [79.2, 6318.0], [79.3, 6339.0], [79.4, 6363.0], [79.5, 6384.0], [79.6, 6394.0], [79.7, 6399.0], [79.8, 6403.0], [79.9, 6408.0], [80.0, 6414.0], [80.1, 6420.0], [80.2, 6425.0], [80.3, 6433.0], [80.4, 6453.0], [80.5, 6469.0], [80.6, 6479.0], [80.7, 6487.0], [80.8, 6495.0], [80.9, 6502.0], [81.0, 6507.0], [81.1, 6511.0], [81.2, 6518.0], [81.3, 6523.0], [81.4, 6529.0], [81.5, 6544.0], [81.6, 6567.0], [81.7, 6582.0], [81.8, 6587.0], [81.9, 6592.0], [82.0, 6599.0], [82.1, 6602.0], [82.2, 6606.0], [82.3, 6609.0], [82.4, 6612.0], [82.5, 6623.0], [82.6, 6636.0], [82.7, 6644.0], [82.8, 6651.0], [82.9, 6658.0], [83.0, 6667.0], [83.1, 6671.0], [83.2, 6676.0], [83.3, 6677.0], [83.4, 6679.0], [83.5, 6680.0], [83.6, 6684.0], [83.7, 6686.0], [83.8, 6689.0], [83.9, 6691.0], [84.0, 6692.0], [84.1, 6694.0], [84.2, 6696.0], [84.3, 6697.0], [84.4, 6699.0], [84.5, 6701.0], [84.6, 6703.0], [84.7, 6706.0], [84.8, 6708.0], [84.9, 6710.0], [85.0, 6712.0], [85.1, 6714.0], [85.2, 6715.0], [85.3, 6717.0], [85.4, 6720.0], [85.5, 6723.0], [85.6, 6727.0], [85.7, 6731.0], [85.8, 6733.0], [85.9, 6739.0], [86.0, 6746.0], [86.1, 6756.0], [86.2, 6762.0], [86.3, 6769.0], [86.4, 6778.0], [86.5, 6783.0], [86.6, 6789.0], [86.7, 6792.0], [86.8, 6795.0], [86.9, 6802.0], [87.0, 6809.0], [87.1, 6816.0], [87.2, 6840.0], [87.3, 6865.0], [87.4, 6889.0], [87.5, 6914.0], [87.6, 6944.0], [87.7, 6996.0], [87.8, 7031.0], [87.9, 7090.0], [88.0, 7186.0], [88.1, 7218.0], [88.2, 7272.0], [88.3, 7290.0], [88.4, 7314.0], [88.5, 7347.0], [88.6, 7397.0], [88.7, 7442.0], [88.8, 7626.0], [88.9, 7729.0], [89.0, 7780.0], [89.1, 7906.0], [89.2, 7989.0], [89.3, 8087.0], [89.4, 8204.0], [89.5, 8363.0], [89.6, 8477.0], [89.7, 8593.0], [89.8, 8651.0], [89.9, 8770.0], [90.0, 8999.0], [90.1, 9192.0], [90.2, 9387.0], [90.3, 9645.0], [90.4, 9723.0], [90.5, 10028.0], [90.6, 10180.0], [90.7, 10242.0], [90.8, 10454.0], [90.9, 10577.0], [91.0, 10626.0], [91.1, 10705.0], [91.2, 10796.0], [91.3, 10847.0], [91.4, 10885.0], [91.5, 10953.0], [91.6, 11001.0], [91.7, 11061.0], [91.8, 11161.0], [91.9, 11227.0], [92.0, 11280.0], [92.1, 11399.0], [92.2, 11484.0], [92.3, 11593.0], [92.4, 11641.0], [92.5, 11710.0], [92.6, 11809.0], [92.7, 11833.0], [92.8, 11888.0], [92.9, 11935.0], [93.0, 11988.0], [93.1, 12022.0], [93.2, 12055.0], [93.3, 12080.0], [93.4, 12106.0], [93.5, 12143.0], [93.6, 12184.0], [93.7, 12220.0], [93.8, 12248.0], [93.9, 12327.0], [94.0, 12339.0], [94.1, 12361.0], [94.2, 12381.0], [94.3, 12391.0], [94.4, 12400.0], [94.5, 12411.0], [94.6, 12423.0], [94.7, 12436.0], [94.8, 12445.0], [94.9, 12458.0], [95.0, 12470.0], [95.1, 12497.0], [95.2, 12518.0], [95.3, 12576.0], [95.4, 12641.0], [95.5, 12681.0], [95.6, 12718.0], [95.7, 12764.0], [95.8, 12791.0], [95.9, 12813.0], [96.0, 12833.0], [96.1, 12861.0], [96.2, 12879.0], [96.3, 12901.0], [96.4, 12933.0], [96.5, 12966.0], [96.6, 12991.0], [96.7, 13005.0], [96.8, 13025.0], [96.9, 13043.0], [97.0, 13064.0], [97.1, 13088.0], [97.2, 13100.0], [97.3, 13116.0], [97.4, 13141.0], [97.5, 13165.0], [97.6, 13179.0], [97.7, 13190.0], [97.8, 13202.0], [97.9, 13224.0], [98.0, 13232.0], [98.1, 13247.0], [98.2, 13264.0], [98.3, 13276.0], [98.4, 13299.0], [98.5, 13318.0], [98.6, 13336.0], [98.7, 13358.0], [98.8, 13377.0], [98.9, 13399.0], [99.0, 13422.0], [99.1, 13447.0], [99.2, 13504.0], [99.3, 13672.0], [99.4, 14060.0], [99.5, 14293.0], [99.6, 16161.0], [99.7, 16466.0], [99.8, 16991.0], [99.9, 17060.0], [100.0, 17167.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 819.0, "series": [{"data": [[500.0, 1.0], [1700.0, 3.0], [2000.0, 3.0], [2100.0, 1.0], [2800.0, 61.0], [2700.0, 9.0], [2900.0, 27.0], [3000.0, 37.0], [3100.0, 31.0], [3300.0, 63.0], [3200.0, 65.0], [3400.0, 16.0], [3500.0, 7.0], [3700.0, 255.0], [3600.0, 111.0], [3800.0, 591.0], [3900.0, 819.0], [4000.0, 644.0], [4200.0, 25.0], [4300.0, 21.0], [4100.0, 307.0], [4600.0, 202.0], [4500.0, 156.0], [4400.0, 32.0], [4800.0, 476.0], [4700.0, 220.0], [5100.0, 295.0], [5000.0, 469.0], [4900.0, 501.0], [5300.0, 207.0], [5200.0, 144.0], [5400.0, 439.0], [5500.0, 242.0], [5600.0, 139.0], [5700.0, 640.0], [5800.0, 188.0], [6000.0, 133.0], [5900.0, 170.0], [6100.0, 64.0], [6200.0, 90.0], [6300.0, 67.0], [6600.0, 241.0], [6500.0, 115.0], [6400.0, 116.0], [6900.0, 27.0], [6800.0, 56.0], [6700.0, 244.0], [7100.0, 13.0], [7000.0, 21.0], [7300.0, 28.0], [7400.0, 8.0], [7200.0, 30.0], [7600.0, 10.0], [7500.0, 6.0], [7900.0, 12.0], [7800.0, 3.0], [7700.0, 20.0], [8000.0, 12.0], [8100.0, 6.0], [8200.0, 6.0], [8300.0, 6.0], [8400.0, 11.0], [8500.0, 11.0], [8600.0, 13.0], [8700.0, 4.0], [8800.0, 4.0], [8900.0, 6.0], [9100.0, 5.0], [9000.0, 6.0], [9200.0, 2.0], [9300.0, 8.0], [9700.0, 4.0], [9600.0, 11.0], [9500.0, 4.0], [9400.0, 3.0], [9900.0, 5.0], [10000.0, 5.0], [10100.0, 9.0], [10200.0, 9.0], [10300.0, 6.0], [10400.0, 6.0], [10500.0, 9.0], [10600.0, 17.0], [10700.0, 11.0], [10800.0, 23.0], [10900.0, 16.0], [11000.0, 12.0], [11100.0, 12.0], [11200.0, 20.0], [11300.0, 7.0], [11500.0, 13.0], [11400.0, 10.0], [11600.0, 15.0], [11700.0, 9.0], [11800.0, 24.0], [12000.0, 35.0], [11900.0, 22.0], [12100.0, 24.0], [12200.0, 25.0], [12300.0, 52.0], [12400.0, 73.0], [12500.0, 21.0], [12600.0, 23.0], [12700.0, 27.0], [13000.0, 51.0], [13100.0, 59.0], [13300.0, 50.0], [13200.0, 62.0], [12800.0, 46.0], [12900.0, 39.0], [13400.0, 29.0], [13600.0, 5.0], [13500.0, 6.0], [13700.0, 3.0], [13800.0, 1.0], [13900.0, 4.0], [14000.0, 2.0], [14100.0, 8.0], [14200.0, 2.0], [14300.0, 2.0], [15500.0, 3.0], [15900.0, 1.0], [16000.0, 2.0], [16100.0, 3.0], [16200.0, 3.0], [16300.0, 1.0], [16900.0, 6.0], [17000.0, 12.0], [17100.0, 6.0], [16400.0, 9.0], [16500.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9999.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9999.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 947.9862831405458, "minX": 1.61787708E12, "maxY": 978.6536796536798, "series": [{"data": [[1.61787708E12, 978.6536796536798], [1.61787714E12, 947.9862831405458]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787714E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 554.0, "minX": 4.0, "maxY": 6202.089228096298, "series": [{"data": [[4.0, 2733.0], [5.0, 2738.0], [6.0, 2738.0], [8.0, 2788.0], [20.0, 2819.5], [21.0, 2832.0], [22.0, 2832.0], [23.0, 2858.0], [24.0, 2853.0], [25.0, 2865.0], [26.0, 2870.0], [28.0, 2833.0], [29.0, 2870.0], [33.0, 2867.75], [34.0, 2860.0], [38.0, 2873.25], [40.0, 2851.0], [43.0, 2851.0], [42.0, 2851.5], [45.0, 2854.5], [46.0, 2854.0], [49.0, 2864.0], [48.0, 2845.0], [50.0, 2866.0], [53.0, 2873.0], [52.0, 2866.5], [55.0, 2860.0], [54.0, 2867.0], [56.0, 2884.0], [67.0, 2900.0], [66.0, 2888.285714285714], [65.0, 2894.0], [71.0, 2975.75], [75.0, 2920.0], [72.0, 2896.0], [81.0, 2914.166666666667], [87.0, 2983.5], [85.0, 2977.0], [84.0, 2956.3333333333335], [91.0, 3048.0], [90.0, 3006.0], [172.0, 554.0], [188.0, 3019.0], [213.0, 2953.0], [221.0, 2953.0], [229.0, 3103.8529411764707], [243.0, 3286.0], [255.0, 3491.0], [254.0, 3310.0], [253.0, 3492.0], [252.0, 3273.9875], [251.0, 3167.1666666666665], [249.0, 3082.0], [259.0, 3357.0], [271.0, 3316.0], [270.0, 3368.4], [265.0, 3326.0], [264.0, 3334.0], [263.0, 3353.0], [262.0, 3299.0], [261.0, 3478.0], [260.0, 3305.0], [258.0, 3308.0], [257.0, 3306.0], [256.0, 3304.0], [285.0, 3325.0], [287.0, 3364.0], [284.0, 3315.0], [275.0, 3433.0], [273.0, 3433.0], [272.0, 3440.0], [283.0, 3415.0], [282.0, 3326.0], [281.0, 3417.0], [280.0, 3423.0], [279.0, 3322.5], [277.0, 3314.0], [276.0, 3309.0], [303.0, 3394.5], [302.0, 3356.0], [296.0, 3393.4], [291.0, 3314.0], [290.0, 3381.6666666666665], [317.0, 3735.0], [319.0, 3743.5], [316.0, 3734.0], [307.0, 3394.0], [305.0, 3394.25], [304.0, 3395.0], [315.0, 3379.0], [314.0, 3379.0], [313.0, 3338.0], [312.0, 3384.0], [311.0, 3385.0], [310.0, 3388.0], [309.0, 3393.0], [335.0, 3711.6666666666665], [333.0, 3714.0], [323.0, 3706.0], [322.0, 3743.0], [321.0, 3744.0], [320.0, 3745.0], [331.0, 3700.0], [330.0, 3700.0], [329.0, 3701.0], [328.0, 3702.0], [327.0, 3705.0], [325.0, 3708.0], [324.0, 3704.0], [350.0, 3712.0], [351.0, 3712.0], [349.0, 3742.5], [348.0, 3720.0], [346.0, 3723.0], [345.0, 3728.0], [344.0, 3720.0], [343.0, 3719.0], [336.0, 3715.0], [339.0, 3711.0], [338.0, 3707.5], [342.0, 3719.0], [341.0, 3718.5], [366.0, 3752.0], [367.0, 3745.0], [364.0, 3745.0], [355.0, 3764.0], [354.0, 3715.0], [353.0, 3710.0], [352.0, 3710.0], [363.0, 3743.0], [362.0, 3753.0], [361.0, 3738.0], [359.0, 3747.0], [357.0, 3711.0], [356.0, 3751.0], [383.0, 3706.3333333333335], [380.0, 3713.0], [378.0, 3710.0], [377.0, 3696.0], [376.0, 3699.0], [375.0, 3699.0], [374.0, 3723.4285714285716], [387.0, 3693.0], [397.0, 3682.0], [396.0, 3683.0], [386.0, 3705.0], [385.0, 3690.0], [384.0, 3683.0], [395.0, 3685.0], [394.0, 3672.5], [392.0, 3668.0], [391.0, 3691.0], [390.0, 3700.0], [389.0, 3700.0], [388.0, 3700.0], [414.0, 3751.0], [406.0, 1724.0], [405.0, 3687.0], [404.0, 3686.0], [407.0, 3676.0], [400.0, 3685.0], [403.0, 3766.0], [402.0, 3693.5], [412.0, 2735.0], [415.0, 3747.0], [413.0, 3753.0], [411.0, 3755.0], [410.0, 3673.0], [409.0, 3687.0], [408.0, 3760.0], [430.0, 3717.0], [420.0, 2763.0], [421.0, 3669.0], [423.0, 3734.0], [417.0, 3744.0], [416.0, 3676.0], [419.0, 3673.0], [418.0, 3680.0], [422.0, 3667.0], [431.0, 3716.0], [429.0, 3723.0], [428.0, 3724.0], [427.0, 3721.0], [426.0, 3709.0], [425.0, 3731.0], [424.0, 3731.0], [446.0, 3677.0], [447.0, 3672.0], [445.0, 3677.0], [444.0, 3683.0], [443.0, 3684.0], [442.0, 3680.0], [441.0, 3686.0], [440.0, 3682.0], [439.0, 3685.0], [433.0, 3715.0], [432.0, 3718.0], [435.0, 3689.0], [434.0, 3709.0], [437.0, 3689.0], [436.0, 3688.0], [462.0, 3657.5], [463.0, 3657.0], [460.0, 3658.0], [459.0, 3657.0], [458.0, 3655.0], [457.0, 3660.0], [456.0, 3663.0], [454.0, 3661.0], [448.0, 3670.0], [450.0, 3672.0], [449.0, 3673.0], [451.0, 3669.0], [478.0, 3646.0], [473.0, 2848.0], [466.0, 3109.6666666666665], [464.0, 3651.0], [467.0, 3651.0], [471.0, 3645.0], [470.0, 3644.0], [469.0, 3640.0], [468.0, 3653.0], [475.0, 2854.5], [479.0, 3631.0], [477.0, 3633.0], [476.0, 3637.0], [474.0, 3647.0], [472.0, 3649.0], [494.0, 3701.5], [482.0, 2872.5], [481.0, 3638.0], [480.0, 3640.0], [483.0, 3637.0], [491.0, 3655.0], [490.0, 3724.0], [489.0, 3658.0], [488.0, 3593.0], [487.0, 3693.0], [485.0, 3600.0], [484.0, 3639.0], [511.0, 3778.0], [509.0, 3735.5], [499.0, 3718.0], [498.0, 3695.0], [497.0, 3699.25], [507.0, 3737.0], [506.0, 3782.0], [505.0, 3720.0], [504.0, 3737.0], [503.0, 3718.0], [502.0, 3707.0], [501.0, 3733.0], [500.0, 3738.0], [537.0, 3781.0], [542.0, 3787.0], [543.0, 3839.0], [530.0, 3853.0], [528.0, 3791.0], [533.0, 3835.0], [531.0, 3789.0], [541.0, 3752.5], [539.0, 3780.0], [538.0, 3781.0], [536.0, 3792.0], [519.0, 3785.5], [517.0, 3776.0], [516.0, 3782.0], [515.0, 3786.0], [514.0, 3779.0], [513.0, 3781.0], [512.0, 3771.0], [527.0, 3854.0], [526.0, 3784.0], [525.0, 3782.0], [524.0, 3799.0], [523.0, 3798.0], [522.0, 3797.0], [521.0, 3793.0], [520.0, 3789.0], [535.0, 3784.0], [534.0, 3853.0], [569.0, 3834.0], [574.0, 3891.0], [575.0, 3875.0], [562.0, 3838.0], [561.0, 3835.3333333333335], [565.0, 3846.0], [564.0, 3841.0], [573.0, 3878.0], [572.0, 3878.0], [571.0, 3864.0], [568.0, 3841.0], [551.0, 3852.0], [550.0, 3830.0], [549.0, 3833.0], [548.0, 3852.0], [547.0, 3834.0], [546.0, 3835.0], [545.0, 3826.0], [544.0, 3842.0], [558.0, 3813.0], [557.0, 3815.0], [556.0, 3823.0], [555.0, 3843.0], [554.0, 3856.0], [553.0, 3821.0], [552.0, 3826.0], [567.0, 3905.0], [566.0, 3906.0], [606.0, 3818.0], [595.0, 3831.0], [607.0, 3913.0], [592.0, 3824.0], [594.0, 3896.0], [593.0, 3829.0], [604.0, 3912.0], [602.0, 3824.0], [600.0, 3907.0], [583.0, 3824.5], [581.0, 3813.0], [580.0, 3867.0], [579.0, 3866.0], [578.0, 3881.0], [577.0, 3874.0], [576.0, 3877.0], [591.0, 3816.0], [590.0, 3820.0], [589.0, 3823.0], [586.0, 3832.0], [585.0, 3820.0], [584.0, 3814.0], [599.0, 3897.0], [598.0, 3883.0], [596.0, 3816.0], [634.0, 3923.0], [638.0, 3933.0], [639.0, 3916.0], [626.0, 3923.5], [624.0, 3894.0], [637.0, 3915.0], [636.0, 3918.0], [635.0, 3919.0], [633.0, 3899.6], [615.0, 3885.0], [614.0, 3787.0], [613.0, 3894.0], [612.0, 3901.0], [611.0, 3889.1428571428573], [623.0, 3892.0], [622.0, 3903.0], [621.0, 3897.0], [620.0, 3893.0], [619.0, 3891.0], [618.0, 3899.0], [617.0, 3885.0], [616.0, 3884.0], [628.0, 3946.0], [627.0, 3947.0], [664.0, 3906.0], [668.0, 3967.0], [671.0, 3941.0], [657.0, 3898.0], [656.0, 3899.0], [660.0, 3967.0], [659.0, 3905.0], [670.0, 3929.0], [669.0, 3952.0], [667.0, 3904.0], [666.0, 3952.0], [665.0, 3957.0], [655.0, 3901.0], [640.0, 3907.0], [643.0, 3907.0], [641.0, 3905.0], [647.0, 3926.0], [646.0, 3918.6666666666665], [654.0, 3902.0], [653.0, 3906.0], [652.0, 3918.0], [651.0, 3917.0], [649.0, 3924.0], [648.0, 3914.0], [663.0, 3933.5], [661.0, 3892.0], [696.0, 3913.0], [702.0, 3965.5], [703.0, 3989.0], [688.0, 3972.0], [691.0, 3999.0], [689.0, 3936.0], [700.0, 3965.0], [698.0, 3911.0], [697.0, 3918.0], [687.0, 3938.0], [672.0, 3926.0], [674.0, 3927.0], [673.0, 3929.0], [677.0, 3929.0], [675.0, 3933.0], [679.0, 3926.0], [678.0, 3920.0], [686.0, 3924.0], [685.0, 3927.0], [684.0, 3945.0], [683.0, 3926.0], [682.0, 3917.0], [681.0, 3926.0], [680.0, 3925.0], [695.0, 3910.0], [694.0, 3914.0], [693.0, 3969.0], [692.0, 3968.0], [729.0, 4014.0], [734.0, 4002.0], [735.0, 4009.0], [722.0, 3998.0], [720.0, 3998.0], [724.0, 3999.0], [723.0, 4001.0], [733.0, 4035.0], [731.0, 3998.0], [730.0, 3995.0], [728.0, 4063.0], [711.0, 4014.0], [710.0, 3968.0], [709.0, 4007.0], [708.0, 3969.0], [707.0, 3858.0], [706.0, 3994.0], [705.0, 3998.0], [704.0, 3986.0], [719.0, 3997.0], [718.0, 4002.0], [717.0, 3999.0], [716.0, 4018.0], [715.0, 3996.0], [714.0, 4013.0], [713.0, 4004.0], [712.0, 4003.0], [727.0, 3999.0], [726.0, 4006.0], [764.0, 4077.0], [767.0, 4078.0], [752.0, 4019.0], [754.0, 4019.0], [753.0, 4018.0], [756.0, 4031.0], [755.0, 4028.0], [766.0, 4085.0], [765.0, 4079.0], [763.0, 4075.0], [762.0, 4074.0], [761.0, 4072.0], [760.0, 4065.0], [751.0, 4019.0], [737.0, 4059.0], [736.0, 4007.0], [739.0, 4041.0], [738.0, 4048.0], [741.0, 4016.0], [740.0, 4046.0], [743.0, 4021.0], [742.0, 3913.0], [750.0, 4017.0], [749.0, 4038.0], [748.0, 4045.0], [747.0, 4038.0], [746.0, 4027.0], [745.0, 4020.5], [759.0, 4067.5], [758.0, 4029.0], [796.0, 4065.0], [799.0, 4059.0], [785.0, 4110.0], [784.0, 4103.0], [787.0, 4137.0], [786.0, 4136.0], [789.0, 4138.0], [788.0, 4135.0], [798.0, 4163.0], [797.0, 4170.0], [795.0, 4130.0], [794.0, 4134.0], [793.0, 4135.0], [792.0, 4134.0], [782.0, 4113.0], [769.0, 4076.0], [768.0, 3993.0], [771.0, 4084.0], [770.0, 4080.0], [773.0, 4041.0], [772.0, 4081.0], [775.0, 4073.0], [774.0, 4075.0], [781.0, 4100.0], [780.0, 4072.0], [779.0, 4068.0], [778.0, 4071.0], [777.0, 4072.0], [776.0, 4072.0], [791.0, 4135.0], [790.0, 4138.0], [828.0, 4165.0], [831.0, 3876.0], [817.0, 4137.0], [816.0, 4142.0], [819.0, 4141.0], [818.0, 4142.0], [821.0, 4146.0], [820.0, 4144.0], [830.0, 3875.0], [829.0, 3902.0], [827.0, 4167.0], [826.0, 4165.0], [825.0, 4168.0], [824.0, 4171.0], [814.0, 4146.0], [801.0, 4161.0], [800.0, 4155.0], [803.0, 4161.0], [802.0, 4161.0], [805.0, 4161.0], [804.0, 4160.0], [807.0, 4154.0], [806.0, 4163.0], [813.0, 4148.0], [812.0, 4144.0], [811.0, 4150.0], [810.0, 4151.0], [809.0, 4075.0], [808.0, 4154.0], [823.0, 4174.0], [822.0, 4181.0], [857.0, 3948.0], [862.0, 4002.0], [863.0, 4000.0], [861.0, 3955.0], [860.0, 3978.0], [858.0, 3962.0], [847.0, 3943.0], [832.0, 3915.0], [835.0, 3907.5], [833.0, 3907.0], [837.0, 3917.0], [836.0, 3915.0], [839.0, 3913.0], [838.0, 3912.0], [846.0, 3910.0], [845.0, 3948.0], [844.0, 3913.0], [843.0, 3908.0], [842.0, 3912.0], [841.0, 3909.0], [840.0, 3912.0], [855.0, 3932.2], [850.0, 3918.0], [849.0, 3943.0], [848.0, 3944.0], [892.0, 3995.0], [895.0, 4016.0], [880.0, 3934.0], [882.0, 3937.0], [881.0, 3997.0], [884.0, 3949.0], [883.0, 3937.0], [894.0, 4013.0], [893.0, 4005.0], [891.0, 3992.0], [890.0, 4003.0], [889.0, 3987.0], [888.0, 3991.0], [879.0, 3989.0], [864.0, 4001.0], [866.0, 3996.0], [865.0, 3996.0], [868.0, 3991.0], [867.0, 3990.0], [870.0, 3991.0], [869.0, 3906.0], [878.0, 3996.0], [877.0, 3996.0], [876.0, 3996.0], [875.0, 3995.0], [874.0, 3999.0], [873.0, 3963.0], [872.0, 3991.5], [886.0, 3933.0], [885.0, 3933.0], [925.0, 4094.0], [916.0, 4030.0], [927.0, 4080.0], [917.0, 4167.0], [926.0, 4091.0], [924.0, 4062.3333333333335], [903.0, 4050.0], [902.0, 4059.0], [900.0, 4043.0], [899.0, 4074.0], [898.0, 4080.0], [897.0, 4013.0], [896.0, 3894.0], [911.0, 4104.0], [910.0, 4098.0], [909.0, 4100.0], [908.0, 4084.0], [907.0, 4089.0], [906.0, 4047.0], [905.0, 4050.0], [904.0, 4056.0], [919.0, 4044.0], [918.0, 4039.6666666666665], [914.0, 4087.0], [913.0, 4099.0], [912.0, 4086.0], [955.0, 3982.457142857143], [929.0, 4174.333333333333], [943.0, 4113.2], [928.0, 4085.0], [942.0, 4091.4285714285716], [941.0, 4067.0], [940.0, 4065.2], [939.0, 4070.666666666667], [938.0, 4059.5], [937.0, 4051.0], [936.0, 4050.6666666666665], [958.0, 4100.375], [945.0, 4043.0], [944.0, 4102.285714285716], [947.0, 4062.5], [946.0, 4031.5], [949.0, 4032.0], [948.0, 4052.0], [957.0, 4051.8571428571427], [956.0, 4033.9285714285716], [954.0, 3954.730769230769], [953.0, 3991.6190476190477], [952.0, 4024.8888888888887], [935.0, 4059.0], [934.0, 4073.1666666666665], [933.0, 4067.8888888888887], [932.0, 4052.3333333333335], [931.0, 4084.0], [930.0, 4089.0], [951.0, 4056.625], [950.0, 4044.4285714285716], [988.0, 3902.0], [991.0, 3958.2000000000007], [977.0, 4168.0], [979.0, 4011.0], [978.0, 4125.0], [981.0, 4096.0], [980.0, 4117.8], [990.0, 4008.051948051949], [989.0, 3920.0888888888885], [987.0, 3910.2142857142853], [986.0, 3875.5], [985.0, 3863.0], [984.0, 3870.5], [974.0, 4157.2], [960.0, 4125.75], [962.0, 4227.666666666667], [961.0, 4101.0], [966.0, 4206.142857142857], [965.0, 4215.0], [971.0, 4173.0], [969.0, 4181.0], [983.0, 3891.0], [982.0, 4095.0], [1000.0, 6202.089228096298], [999.0, 3872.1200000000003], [998.0, 3832.5], [997.0, 3808.0], [996.0, 3838.785714285714], [995.0, 3854.25], [994.0, 3874.0], [993.0, 3873.4444444444443], [992.0, 3977.7238805970164]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[948.6946999999994, 5737.672500000003]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 473.55, "minX": 1.61787708E12, "maxY": 27158.483333333334, "series": [{"data": [[1.61787708E12, 641.8333333333334], [1.61787714E12, 27158.483333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61787708E12, 473.55], [1.61787714E12, 20026.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787714E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5651.96335346502, "minX": 1.61787708E12, "maxY": 9362.316017316018, "series": [{"data": [[1.61787708E12, 9362.316017316018], [1.61787714E12, 5651.96335346502]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787714E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5651.951888627301, "minX": 1.61787708E12, "maxY": 9362.203463203456, "series": [{"data": [[1.61787708E12, 9362.203463203456], [1.61787714E12, 5651.951888627301]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787714E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.07615927935305582, "minX": 1.61787708E12, "maxY": 37.28138528138527, "series": [{"data": [[1.61787708E12, 37.28138528138527], [1.61787714E12, 0.07615927935305582]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787714E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 554.0, "minX": 1.61787708E12, "maxY": 17167.0, "series": [{"data": [[1.61787708E12, 12096.0], [1.61787714E12, 17167.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61787708E12, 11911.2], [1.61787714E12, 7316.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61787708E12, 12095.0], [1.61787714E12, 13425.199999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61787708E12, 12022.4], [1.61787714E12, 12499.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61787708E12, 554.0], [1.61787714E12, 2726.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61787708E12, 10479.0], [1.61787714E12, 5037.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787714E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 554.0, "minX": 1.0, "maxY": 12786.0, "series": [{"data": [[3.0, 3005.5], [4.0, 2064.5], [6.0, 7587.5], [14.0, 9019.5], [15.0, 6032.0], [20.0, 8491.5], [22.0, 5679.5], [31.0, 10278.0], [48.0, 5479.5], [55.0, 11142.0], [57.0, 11826.0], [69.0, 6678.0], [77.0, 7785.0], [83.0, 5187.0], [95.0, 3991.0], [100.0, 9634.0], [120.0, 4606.0], [122.0, 4067.0], [127.0, 5240.0], [133.0, 12093.0], [132.0, 5749.0], [131.0, 3875.0], [141.0, 4944.0], [136.0, 6716.0], [150.0, 12578.5], [145.0, 4978.0], [144.0, 5199.5], [154.0, 4577.5], [163.0, 12786.0], [166.0, 7778.0], [161.0, 5480.0], [170.0, 12460.5], [172.0, 5987.0], [211.0, 6579.0], [215.0, 4738.0], [217.0, 5771.0], [222.0, 4997.0], [228.0, 6896.0], [234.0, 6687.0], [240.0, 5814.5], [243.0, 5075.0], [251.0, 6283.0], [253.0, 5400.0], [1.0, 554.0], [268.0, 5483.0], [269.0, 5782.0], [266.0, 5013.5], [259.0, 4007.0], [284.0, 4886.5], [300.0, 3955.5], [290.0, 3907.0], [310.0, 3812.0], [306.0, 4041.0], [326.0, 4799.0], [347.0, 5028.0], [396.0, 3903.5], [429.0, 3275.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 429.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 548.0, "minX": 1.0, "maxY": 12786.0, "series": [{"data": [[3.0, 3005.5], [4.0, 2064.5], [6.0, 7587.5], [14.0, 9019.5], [15.0, 6032.0], [20.0, 8491.0], [22.0, 5679.5], [31.0, 10278.0], [48.0, 5479.5], [55.0, 11142.0], [57.0, 11826.0], [69.0, 6678.0], [77.0, 7785.0], [83.0, 5187.0], [95.0, 3991.0], [100.0, 9634.0], [120.0, 4606.0], [122.0, 4067.0], [127.0, 5240.0], [133.0, 12093.0], [132.0, 5749.0], [131.0, 3875.0], [141.0, 4944.0], [136.0, 6716.0], [150.0, 12578.5], [145.0, 4978.0], [144.0, 5199.5], [154.0, 4577.5], [163.0, 12786.0], [166.0, 7778.0], [161.0, 5480.0], [170.0, 12460.0], [172.0, 5987.0], [211.0, 6579.0], [215.0, 4738.0], [217.0, 5771.0], [222.0, 4997.0], [228.0, 6896.0], [234.0, 6687.0], [240.0, 5814.5], [243.0, 5075.0], [251.0, 6283.0], [253.0, 5400.0], [1.0, 548.0], [268.0, 5483.0], [269.0, 5782.0], [266.0, 5013.5], [259.0, 4007.0], [284.0, 4886.5], [300.0, 3955.5], [290.0, 3907.0], [310.0, 3812.0], [306.0, 4041.0], [326.0, 4799.0], [347.0, 5028.0], [396.0, 3903.5], [429.0, 3275.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 429.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 20.516666666666666, "minX": 1.61787708E12, "maxY": 146.15, "series": [{"data": [[1.61787708E12, 20.516666666666666], [1.61787714E12, 146.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787714E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.85, "minX": 1.61787708E12, "maxY": 162.81666666666666, "series": [{"data": [[1.61787708E12, 3.85], [1.61787714E12, 162.81666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61787714E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.85, "minX": 1.61787708E12, "maxY": 162.81666666666666, "series": [{"data": [[1.61787708E12, 3.85], [1.61787714E12, 162.81666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787714E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.85, "minX": 1.61787708E12, "maxY": 162.81666666666666, "series": [{"data": [[1.61787708E12, 3.85], [1.61787714E12, 162.81666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61787714E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

